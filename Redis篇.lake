<!doctype lake><title>Redis篇</title><meta name="doc-version" content="1" /><meta name="viewport" content="fixed" /><meta name="typography" content="classic" /><meta name="paragraphSpacing" content="relax" /><h2 data-lake-id="zQKAr" id="zQKAr"><span data-lake-id="u55537182" id="u55537182">1.Redis中常见的数据类型有那些？</span></h2><p data-lake-id="ufee00b97" id="ufee00b97"><span data-lake-id="u004e96c4" id="u004e96c4" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Redis 常见的数据结构主要有五种，这五种类型分别为：String (字符串)、List (列表)、Hash、Set (集合)、Zset (有序集合，也叫 sorted set)。</span></p><h3 data-lake-id="string" id="string"><span data-lake-id="udf128211" id="udf128211" style="color: rgb(0, 0, 0)">String</span></h3><p data-lake-id="u1e42ebec" id="u1e42ebec"><span data-lake-id="u993fc6fa" id="u993fc6fa" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">字符串是 Redis 中最基本的数据类型，可以存储任何类型的数据，包括文本、数字和二进制数据。它的最大长度为 512MB。</span></p><h4 data-lake-id="7059e9a3" id="7059e9a3"><span data-lake-id="u98abe652" id="u98abe652" style="color: rgb(0, 0, 0)">使用场景：</span></h4><ul list="u048b0355"><li fid="ud8fa438f" data-lake-id="ud96faab3" id="ud96faab3"><strong><span data-lake-id="u6102deaf" id="u6102deaf" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">缓存</span></strong><span data-lake-id="uba34e9c9" id="uba34e9c9" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：存储临时数据，如用户会话、页面缓存。</span></li><li fid="ud8fa438f" data-lake-id="ud04aa3c9" id="ud04aa3c9"><strong><span data-lake-id="uab845b23" id="uab845b23" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">计数器</span></strong><span data-lake-id="u44c63a1a" id="u44c63a1a" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：用于统计访问量、点赞数等，通过原子操作增加或减少。</span></li></ul><h3 data-lake-id="hash" id="hash"><span data-lake-id="u9f305a61" id="u9f305a61" style="color: rgb(0, 0, 0)">Hash</span></h3><p data-lake-id="u375d90ea" id="u375d90ea"><span data-lake-id="udf397925" id="udf397925" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">哈希是一个键值对集合，适合存储对象的属性。Redis 内部使用哈希表实现，适合小规模数据。</span></p><h4 data-lake-id="7059e9a3-1" id="7059e9a3-1"><span data-lake-id="u231d9c6b" id="u231d9c6b" style="color: rgb(0, 0, 0)">使用场景：</span></h4><ul list="u294ba437"><li fid="u17fb5701" data-lake-id="u2a9821f6" id="u2a9821f6"><strong><span data-lake-id="u838c34b6" id="u838c34b6" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">商品详情</span></strong><span data-lake-id="uedd9fedd" id="uedd9fedd" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：存储商品的各个属性，方便快速检索。</span></li></ul><h3 data-lake-id="list" id="list"><span data-lake-id="uae36308c" id="uae36308c" style="color: rgb(0, 0, 0)">List</span></h3><p data-lake-id="u027a76f6" id="u027a76f6"><span data-lake-id="uf8a263a8" id="uf8a263a8" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">列表是有序的字符串集合，支持从两端推入和弹出元素，底层实现为双向链表。</span></p><h4 data-lake-id="7059e9a3-2" id="7059e9a3-2"><span data-lake-id="u98f98b92" id="u98f98b92" style="color: rgb(0, 0, 0)">使用场景：</span></h4><ul list="ubbf18b6c"><li fid="u1647742a" data-lake-id="u2cd31a77" id="u2cd31a77"><strong><span data-lake-id="u4c7cc098" id="u4c7cc098" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">消息队列</span></strong><span data-lake-id="u954f9ce7" id="u954f9ce7" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：用于简单任务调度、消息传递等场景，通过 LPUSH 和 RPOP 操作实现生产者消费者模式。</span></li><li fid="u1647742a" data-lake-id="ub1d22cac" id="ub1d22cac"><strong><span data-lake-id="u66c3fdff" id="u66c3fdff" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">历史记录</span></strong><span data-lake-id="u74b0e873" id="u74b0e873" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：存储用户操作的历史记录，便于快速访问。</span></li></ul><h3 data-lake-id="set" id="set"><span data-lake-id="u0c292572" id="u0c292572" style="color: rgb(0, 0, 0)">Set</span></h3><p data-lake-id="uf3834bb3" id="uf3834bb3"><span data-lake-id="u4beb1064" id="u4beb1064" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">集合是无序且不重复的字符串集合，使用哈希表实现，支持快速查找和去重操作。</span></p><h3 data-lake-id="KlPhG" id="KlPhG"><span data-lake-id="udaba5bf8" id="udaba5bf8" style="color: rgb(0, 0, 0) !important">使用场景：</span></h3><ul list="uf68d3215"><li fid="ud71f9dcf" data-lake-id="u48459704" id="u48459704"><strong><span data-lake-id="uad66f21c" id="uad66f21c" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">标签系统</span></strong><span data-lake-id="u085ab64f" id="u085ab64f" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：存储用户的兴趣标签，避免重复。</span></li><li fid="ud71f9dcf" data-lake-id="u17e12dbc" id="u17e12dbc"><strong><span data-lake-id="u42931692" id="u42931692" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">唯一用户集合</span></strong><span data-lake-id="u2951a2af" id="u2951a2af" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：记录访问过某个页面的唯一用户，方便进行分析。</span></li></ul><h3 data-lake-id="sorted-set" id="sorted-set"><span data-lake-id="ufff77128" id="ufff77128" style="color: rgb(0, 0, 0) !important">Sorted Set</span></h3><p data-lake-id="u4e46bb8c" id="u4e46bb8c"><span data-lake-id="u9daa122e" id="u9daa122e" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">有序集合类似于集合，但每个元素都有一个分数（score），用于排序。底层使用跳表实现，支持快速的范围查询。</span></p><h3 data-lake-id="OOKjF" id="OOKjF"><span data-lake-id="u1754773d" id="u1754773d" style="color: rgb(0, 0, 0) !important">使用场景：</span></h3><ul list="u0e076d8f"><li fid="ub19daa5d" data-lake-id="u7645d6d9" id="u7645d6d9"><strong><span data-lake-id="u5ae05290" id="u5ae05290" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">排行榜</span></strong><span data-lake-id="u176b7925" id="u176b7925" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：存储用户分数，实现实时排行榜。</span></li><li fid="ub19daa5d" data-lake-id="u0ac23660" id="u0ac23660"><strong><span data-lake-id="u2d7460e4" id="u2d7460e4" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">任务调度</span></strong><span data-lake-id="u7b366dcc" id="u7b366dcc" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：根据任务的优先级进行排序，方便调度执行。</span></li></ul><p data-lake-id="ua846da90" id="ua846da90"><span data-lake-id="u94307736" id="u94307736" style="color: rgb(28, 31, 35)"><br /><br /></span></p><p data-lake-id="u11ac8268" id="u11ac8268"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744197519771-1704e1e8-0296-4c2a-9b33-4b28cf7065e2.png%22%2C%22taskId%22%3A%22ue2d891d4-0d53-4015-9876-cc88bd71a71%22%2C%22clientId%22%3A%22ue238c052-c3e0-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A920%2C%22height%22%3A757%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A387359%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1380%2C%22originHeight%22%3A1136%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22MIANSHIYA%20STRING%20P%20LIST%20KEY%201%20VALUE%201%20HASH%20KEY%202%20VALUE%202%20KEY%20A%20SET%20A%20A%20C%202SET%202%208%209%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A873%2C%22y%22%3A154%2C%22width%22%3A126%2C%22height%22%3A21%2C%22text%22%3A%22MIANSHIYA%22%7D%2C%7B%22x%22%3A1183%2C%22y%22%3A157%2C%22width%22%3A81%2C%22height%22%3A34%2C%22text%22%3A%22STRING%22%7D%2C%7B%22x%22%3A1066%2C%22y%22%3A297%2C%22width%22%3A16%2C%22height%22%3A23%2C%22text%22%3A%22P%22%7D%2C%7B%22x%22%3A1203%2C%22y%22%3A299%2C%22width%22%3A45%2C%22height%22%3A27%2C%22text%22%3A%22LIST%22%7D%2C%7B%22x%22%3A823%2C%22y%22%3A438%2C%22width%22%3A54%2C%22height%22%3A24%2C%22text%22%3A%22KEY%201%22%7D%2C%7B%22x%22%3A998%2C%22y%22%3A438%2C%22width%22%3A63%2C%22height%22%3A21%2C%22text%22%3A%22VALUE%201%22%7D%2C%7B%22x%22%3A1195%2C%22y%22%3A469%2C%22width%22%3A67%2C%22height%22%3A27%2C%22text%22%3A%22HASH%22%7D%2C%7B%22x%22%3A823%2C%22y%22%3A511%2C%22width%22%3A54%2C%22height%22%3A22%2C%22text%22%3A%22KEY%202%22%7D%2C%7B%22x%22%3A996%2C%22y%22%3A511%2C%22width%22%3A62%2C%22height%22%3A17%2C%22text%22%3A%22VALUE%202%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A516%2C%22width%22%3A54%2C%22height%22%3A37%2C%22text%22%3A%22KEY%22%7D%2C%7B%22x%22%3A910%2C%22y%22%3A664%2C%22width%22%3A18%2C%22height%22%3A24%2C%22text%22%3A%22A%22%7D%2C%7B%22x%22%3A1198%2C%22y%22%3A694%2C%22width%22%3A42%2C%22height%22%3A22%2C%22text%22%3A%22SET%22%7D%2C%7B%22x%22%3A908%2C%22y%22%3A913%2C%22width%22%3A20%2C%22height%22%3A28%2C%22text%22%3A%22A%22%7D%2C%7B%22x%22%3A833%2C%22y%22%3A919%2C%22width%22%3A20%2C%22height%22%3A21%2C%22text%22%3A%22A%22%7D%2C%7B%22x%22%3A983%2C%22y%22%3A920%2C%22width%22%3A16%2C%22height%22%3A20%2C%22text%22%3A%22C%22%7D%2C%7B%22x%22%3A1196%2C%22y%22%3A954%2C%22width%22%3A62%2C%22height%22%3A24%2C%22text%22%3A%222SET%22%7D%2C%7B%22x%22%3A910%2C%22y%22%3A965%2C%22width%22%3A19%2C%22height%22%3A31%2C%22text%22%3A%222%22%7D%2C%7B%22x%22%3A1058%2C%22y%22%3A966%2C%22width%22%3A20%2C%22height%22%3A26%2C%22text%22%3A%228%22%7D%2C%7B%22x%22%3A984%2C%22y%22%3A967%2C%22width%22%3A17%2C%22height%22%3A26%2C%22text%22%3A%229%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fbfaf9%22%2C%22id%22%3A%22u3d3ac462%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u4ce05a25" id="u4ce05a25"><span data-lake-id="u5f62757d" id="u5f62757d">高级数据类型</span></p><p data-lake-id="u80209b86" id="u80209b86"><span data-lake-id="ufe6178a7" id="ufe6178a7">BitMap，</span><span data-lake-id="u793008a6" id="u793008a6" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">HyperLogLog，GEO，Stream</span></p><p data-lake-id="u5ea47f2d" id="u5ea47f2d"><span data-lake-id="u8b697ec3" id="u8b697ec3" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Redis 9 种常见的基本数据类型应用场景汇总</span><span data-lake-id="ubb3287fa" id="ubb3287fa"><br /><br /></span></p><ul list="u5456b375"><li fid="u5670fd18" data-lake-id="uf4ca0a9a" id="uf4ca0a9a"><span data-lake-id="u8d91d57c" id="u8d91d57c" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">String：缓存对象、计数器、分布式锁、分布式 session 等</span></li><li fid="u5670fd18" data-lake-id="ud6de99e5" id="ud6de99e5"><span data-lake-id="u3c9c02f7" id="u3c9c02f7" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">List：阻塞队列、消息队列（但是有两个问题：1. 生产者需要自行实现全局唯一 ID；2. 不能以消费组形式消费数据）等</span></li><li fid="u5670fd18" data-lake-id="u28a792a6" id="u28a792a6"><span data-lake-id="uecf4f4c0" id="uecf4f4c0" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Hash：缓存对象、购物车等</span></li><li fid="u5670fd18" data-lake-id="ud189a5c3" id="ud189a5c3"><span data-lake-id="ucd78385e" id="ucd78385e" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Set：集合聚合计算（并集、交集、差集）的场景，如点赞、共同关注、收藏等</span></li><li fid="u5670fd18" data-lake-id="ucd911269" id="ucd911269"><span data-lake-id="ua3da2034" id="ua3da2034" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Zset：最典型的就是排行榜，这个也是面试中经常问到的点</span></li><li fid="u5670fd18" data-lake-id="ue4420a05" id="ue4420a05"><span data-lake-id="u7653d07f" id="u7653d07f" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">BitMap（2.2 版新增）：主要有 0 和 1 两种状态，可以用于签到统计、用户登录态判断等</span></li><li fid="u5670fd18" data-lake-id="u2baeccc2" id="u2baeccc2"><span data-lake-id="u66f6e322" id="u66f6e322" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">HyperLogLog（2.8 版新增）：海量数据基数统计的场景，有一定的误差，可以根据场景选择使用，常用于网页 PV、UV 的统计</span></li><li fid="u5670fd18" data-lake-id="ua596cd54" id="ua596cd54"><span data-lake-id="u4ce47309" id="u4ce47309" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">GEO（3.2 版新增）：存储地理位置信息的场景，比如说百度地图、高德地图、附近的人等</span></li><li fid="u5670fd18" data-lake-id="ue9c3c381" id="ue9c3c381"><span data-lake-id="u5fc391f7" id="u5fc391f7" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Stream（5.0 版新增）：这个主要就是消息队列了，可以实现一个简单的消息，其相比 list 多了两个特性，分别是自动生成全局唯一消息 ID 以及支持以消费组形式消费数据（同一个消息可被分发给多个单消费者和消费者组），相比 pub/sub 它是可以被持久化。</span></li></ul><card type="block" name="hr" value="data:%7B%22id%22%3A%22L5LtE%22%7D"></card><h3 data-lake-id="49d2cce6" id="49d2cce6"><strong><span data-lake-id="u9636ed57" id="u9636ed57" style="color: rgb(64, 64, 64)">Redis 数据类型总表</span></strong></h3><table data-lake-id="bzPfe" id="bzPfe" margin="true" class="lake-table" style="width: 748px"><colgroup><col width="187"><col width="187"><col width="187"><col width="187"></colgroup><tbody><tr data-lake-id="u6e7ed505" id="u6e7ed505"><td data-lake-id="ue101dcfc" id="ue101dcfc"><p data-lake-id="u925b8c68" id="u925b8c68" style="text-align: left"><strong><span data-lake-id="ue50c51be" id="ue50c51be" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">数据类型</span></strong></p></td><td data-lake-id="uc941c978" id="uc941c978"><p data-lake-id="u8fa4e496" id="u8fa4e496" style="text-align: left"><strong><span data-lake-id="u76769ca1" id="u76769ca1" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">特点</span></strong></p></td><td data-lake-id="u0c78af5e" id="u0c78af5e"><p data-lake-id="ue979cfe7" id="ue979cfe7" style="text-align: left"><strong><span data-lake-id="u8c21f114" id="u8c21f114" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">使用场景</span></strong></p></td><td data-lake-id="u373ad07a" id="u373ad07a"><p data-lake-id="ucb1f5322" id="ucb1f5322" style="text-align: left"><strong><span data-lake-id="u45f419f7" id="u45f419f7" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">底层实现</span></strong></p></td></tr><tr data-lake-id="u18d68fee" id="u18d68fee"><td data-lake-id="ud6e9cbd8" id="ud6e9cbd8"><p data-lake-id="u99702205" id="u99702205"><strong><span data-lake-id="u0326c068" id="u0326c068" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">String（字符串）</span></strong></p></td><td data-lake-id="u568f1a97" id="u568f1a97"><p data-lake-id="ueaf7f898" id="ueaf7f898"><span data-lake-id="u588345a7" id="u588345a7" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">二进制安全，可存文本、数字、序列化数据</span></p></td><td data-lake-id="u2d492287" id="u2d492287"><p data-lake-id="u36f0d050" id="u36f0d050"><span data-lake-id="u531acf89" id="u531acf89" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">缓存、计数器（如浏览量）、分布式锁</span></p></td><td data-lake-id="u9d3f4e38" id="u9d3f4e38"><p data-lake-id="u1cef5add" id="u1cef5add"><span data-lake-id="u7238a7f0" id="u7238a7f0" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">SDS（简单动态字符串）</span></p></td></tr><tr data-lake-id="u75c78171" id="u75c78171"><td data-lake-id="u6e0abe53" id="u6e0abe53"><p data-lake-id="ude0be7c9" id="ude0be7c9"><strong><span data-lake-id="u1e5a08c7" id="u1e5a08c7" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">List（列表）</span></strong></p></td><td data-lake-id="u4a4600de" id="u4a4600de"><p data-lake-id="uede5a828" id="uede5a828"><span data-lake-id="u0811bbd3" id="u0811bbd3" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">有序、可重复，支持双向操作</span></p></td><td data-lake-id="ucadcc88a" id="ucadcc88a"><p data-lake-id="uf795c071" id="uf795c071"><span data-lake-id="u76fd73b6" id="u76fd73b6" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">消息队列、最新消息排行、历史记录</span></p></td><td data-lake-id="u218067e3" id="u218067e3"><p data-lake-id="u175b7856" id="u175b7856"><span data-lake-id="u37b73915" id="u37b73915" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">QuickList（3.2+，由 ziplist + linkedlist 优化）</span></p></td></tr><tr data-lake-id="ua0d0ac37" id="ua0d0ac37"><td data-lake-id="u7e6df513" id="u7e6df513"><p data-lake-id="uf49b7de1" id="uf49b7de1"><strong><span data-lake-id="u2aa1b7c9" id="u2aa1b7c9" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">Hash（哈希）</span></strong></p></td><td data-lake-id="ue014ea07" id="ue014ea07"><p data-lake-id="uee5dada7" id="uee5dada7"><span data-lake-id="u8cf78264" id="u8cf78264" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">键值对集合，适合存储对象</span></p></td><td data-lake-id="u07a38788" id="u07a38788"><p data-lake-id="u9ccb7d1d" id="u9ccb7d1d"><span data-lake-id="u09402648" id="u09402648" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">用户信息、商品详情</span></p></td><td data-lake-id="u94a6a214" id="u94a6a214"><p data-lake-id="ue8906441" id="ue8906441"><span data-lake-id="u60158e08" id="u60158e08" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">ziplist（小数据）或 hashtable（大数据）</span></p></td></tr><tr data-lake-id="uc8234eac" id="uc8234eac"><td data-lake-id="u7166d33c" id="u7166d33c"><p data-lake-id="ua5d3b5e4" id="ua5d3b5e4"><strong><span data-lake-id="ud52bd27c" id="ud52bd27c" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">Set（集合）</span></strong></p></td><td data-lake-id="u2d4471e3" id="u2d4471e3"><p data-lake-id="ue94c9b94" id="ue94c9b94"><span data-lake-id="u128843c4" id="u128843c4" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">无序、元素唯一，支持集合运算</span></p></td><td data-lake-id="u019ae928" id="u019ae928"><p data-lake-id="ub349e3fd" id="ub349e3fd"><span data-lake-id="uf402c9de" id="uf402c9de" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">标签系统、好友关系、抽奖去重</span></p></td><td data-lake-id="u501e7ca3" id="u501e7ca3"><p data-lake-id="u2b70debf" id="u2b70debf"><span data-lake-id="u6c92c061" id="u6c92c061" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">intset（整数集合）或 hashtable</span></p></td></tr><tr data-lake-id="uec1916ac" id="uec1916ac"><td data-lake-id="u33ba7543" id="u33ba7543"><p data-lake-id="u960c0ee3" id="u960c0ee3"><strong><span data-lake-id="uc39b1ed9" id="uc39b1ed9" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">Zset（Sorted Set）</span></strong></p></td><td data-lake-id="u05971f18" id="u05971f18"><p data-lake-id="u53a8b382" id="u53a8b382"><span data-lake-id="u8196e672" id="u8196e672" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">有序、元素唯一，按分数（score）排序</span></p></td><td data-lake-id="u8d45acdf" id="u8d45acdf"><p data-lake-id="ue37195bc" id="ue37195bc"><span data-lake-id="ua9ad64b2" id="ua9ad64b2" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">排行榜、延迟队列、优先级任务</span></p></td><td data-lake-id="ud9545376" id="ud9545376"><p data-lake-id="u9f9054bd" id="u9f9054bd"><span data-lake-id="u4b1d8960" id="u4b1d8960" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">ziplist（小数据）或</span><span data-lake-id="ub4465572" id="ub4465572" class="lake-fontsize-12" style="color: rgb(64, 64, 64)"> </span><strong><span data-lake-id="u356c4a04" id="u356c4a04" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">跳跃表（skiplist） + hashtable</span></strong></p></td></tr><tr data-lake-id="u13fb5095" id="u13fb5095"><td data-lake-id="uace324d0" id="uace324d0"><p data-lake-id="uf90c1597" id="uf90c1597"><strong><span data-lake-id="u6b3016f4" id="u6b3016f4" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">BitMap（位图）</span></strong></p></td><td data-lake-id="u430d00c0" id="u430d00c0"><p data-lake-id="u9520e7d1" id="u9520e7d1"><span data-lake-id="uff7a0a04" id="uff7a0a04" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">基于 String 的位操作</span></p></td><td data-lake-id="u7f9f044b" id="u7f9f044b"><p data-lake-id="u16fe3e1a" id="u16fe3e1a"><span data-lake-id="uaa482b6b" id="uaa482b6b" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">用户签到、布隆过滤器</span></p></td><td data-lake-id="u20625e84" id="u20625e84"><p data-lake-id="u6230386d" id="u6230386d"><span data-lake-id="u05a8aa8c" id="u05a8aa8c" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">String 底层（SDS）</span></p></td></tr><tr data-lake-id="ud06e978c" id="ud06e978c" style="height: 66px"><td data-lake-id="u3ada3724" id="u3ada3724"><p data-lake-id="u54a2896a" id="u54a2896a"><strong><span data-lake-id="u1a1ea0fc" id="u1a1ea0fc" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">HyperLogLog</span></strong></p></td><td data-lake-id="u76a6aa9b" id="u76a6aa9b"><p data-lake-id="u3ddb07b1" id="u3ddb07b1"><span data-lake-id="u15438bf7" id="u15438bf7" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">基数统计（去重计数），误差 0.81%</span></p></td><td data-lake-id="uafc29f88" id="uafc29f88"><p data-lake-id="u311a3de9" id="u311a3de9"><span data-lake-id="udb641e0a" id="udb641e0a" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">UV 统计、大规模去重计数</span></p></td><td data-lake-id="uba3c60d8" id="uba3c60d8"><p data-lake-id="u9e777b5e" id="u9e777b5e"><span data-lake-id="ue2de9c65" id="ue2de9c65" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">稀疏矩阵（Sparse）或密集矩阵（Dense）</span></p></td></tr><tr data-lake-id="ub384d0da" id="ub384d0da"><td data-lake-id="u81b0522f" id="u81b0522f"><p data-lake-id="u3452f0d4" id="u3452f0d4"><strong><span data-lake-id="uaa4bb1d8" id="uaa4bb1d8" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">GEO（地理空间）</span></strong></p></td><td data-lake-id="u1f7e85c2" id="u1f7e85c2"><p data-lake-id="u37d458c4" id="u37d458c4"><span data-lake-id="u3e04608b" id="u3e04608b" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">存储经纬度，支持位置计算</span></p></td><td data-lake-id="u3eadb5cc" id="u3eadb5cc"><p data-lake-id="uc523b3fd" id="uc523b3fd"><span data-lake-id="uffd40107" id="uffd40107" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">附近的人、地点搜索</span></p></td><td data-lake-id="uc2ae8d1a" id="uc2ae8d1a"><p data-lake-id="u0430ee1c" id="u0430ee1c"><span data-lake-id="u930d6f10" id="u930d6f10" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">Zset 实现（经纬度编码为 score）</span></p></td></tr><tr data-lake-id="u569e8682" id="u569e8682"><td data-lake-id="udefeea05" id="udefeea05"><p data-lake-id="ucfb0323c" id="ucfb0323c"><strong><span data-lake-id="ub997f3cc" id="ub997f3cc" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">Stream</span></strong></p></td><td data-lake-id="u4db0c063" id="u4db0c063"><p data-lake-id="u982b37cb" id="u982b37cb"><span data-lake-id="u7ca18aff" id="u7ca18aff" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">消息队列，支持多消费者组</span></p></td><td data-lake-id="u832e1ad0" id="u832e1ad0"><p data-lake-id="ua6a90653" id="ua6a90653"><span data-lake-id="ua2be856b" id="ua2be856b" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">日志收集、事件溯源</span></p></td><td data-lake-id="u5918ddd5" id="u5918ddd5"><p data-lake-id="ua6b735bc" id="ua6b735bc"><span data-lake-id="u8e2f91e1" id="u8e2f91e1" class="lake-fontsize-12" style="color: rgb(64, 64, 64)">radix tree（基数树）</span></p></td></tr></tbody></table><h2 data-lake-id="wxgNV" id="wxgNV"><span data-lake-id="ub0fac72d" id="ub0fac72d">2.Redis为什么这么快？</span></h2><p data-lake-id="ufdb2f2bc" id="ufdb2f2bc"><span data-lake-id="u0b2834f8" id="u0b2834f8" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">主要有 3 个方面的原因，分别是存储方式、优秀的线程模型以及 IO 模型、高效的数据结构。</span></p><ul list="u79fd282b"><li fid="u38a52d60" data-lake-id="u3df92d6a" id="u3df92d6a"><span data-lake-id="ua2990c48" id="ua2990c48" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Redis 将数据存储在内存中，提供快速的读写速度，相比于传统的磁盘数据库，内存访问速度快得多。</span></li><li fid="u38a52d60" data-lake-id="u29ec6c56" id="u29ec6c56"><span data-lake-id="u1a710bf2" id="u1a710bf2" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Redis 使用单线程事件驱动模型结合 I/O 多路复用，避免了多线程上下文切换和竞争条件，提高了并发处理效率。</span></li><li fid="u38a52d60" data-lake-id="uc2539715" id="uc2539715"><span data-lake-id="u130eee45" id="u130eee45" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Redis 提供多种高效的数据结构（如字符串、哈希、列表、集合等），这些结构经过优化，能够快速完成各种操作</span></li></ul><h2 data-lake-id="DH2ov" id="DH2ov"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744200227048-828fdacd-3b82-4bf0-a282-051a01937e39.png%22%2C%22taskId%22%3A%22uf1f208ec-b1d0-4762-a057-3dbe1790591%22%2C%22clientId%22%3A%22ue238c052-c3e0-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1026.6666666666667%2C%22height%22%3A643%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A260156%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1540%2C%22originHeight%22%3A965%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22RAM-BASED%200.3NS%20REGISTER%20L1%20CACHE%200.9NS%20L2%20CACHE%202.8NS%2012.9NS%20L3%20CACHE%20REDIS%20USES%20RAM%2C%20120NS%20RAM%20NOT%20DISK%2050-150US%20SSD%20HDD%201-10MS%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A620%2C%22y%22%3A81%2C%22width%22%3A316%2C%22height%22%3A49%2C%22text%22%3A%22RAM-BASED%22%7D%2C%7B%22x%22%3A315%2C%22y%22%3A222%2C%22width%22%3A398%2C%22height%22%3A72%2C%22text%22%3A%220.3NS%20REGISTER%22%7D%2C%7B%22x%22%3A477%2C%22y%22%3A332%2C%22width%22%3A236%2C%22height%22%3A51%2C%22text%22%3A%22L1%20CACHE%22%7D%2C%7B%22x%22%3A279%2C%22y%22%3A335%2C%22width%22%3A150%2C%22height%22%3A54%2C%22text%22%3A%220.9NS%22%7D%2C%7B%22x%22%3A471%2C%22y%22%3A440%2C%22width%22%3A247%2C%22height%22%3A55%2C%22text%22%3A%22L2%20CACHE%22%7D%2C%7B%22x%22%3A247%2C%22y%22%3A440%2C%22width%22%3A143%2C%22height%22%3A55%2C%22text%22%3A%222.8NS%22%7D%2C%7B%22x%22%3A182%2C%22y%22%3A551%2C%22width%22%3A170%2C%22height%22%3A52%2C%22text%22%3A%2212.9NS%22%7D%2C%7B%22x%22%3A469%2C%22y%22%3A551%2C%22width%22%3A248%2C%22height%22%3A49%2C%22text%22%3A%22L3%20CACHE%22%7D%2C%7B%22x%22%3A1069%2C%22y%22%3A621%2C%22width%22%3A453%2C%22height%22%3A60%2C%22text%22%3A%22REDIS%20USES%20RAM%2C%22%7D%2C%7B%22x%22%3A160%2C%22y%22%3A659%2C%22width%22%3A157%2C%22height%22%3A52%2C%22text%22%3A%22120NS%22%7D%2C%7B%22x%22%3A530%2C%22y%22%3A662%2C%22width%22%3A129%2C%22height%22%3A47%2C%22text%22%3A%22RAM%22%7D%2C%7B%22x%22%3A1070%2C%22y%22%3A696%2C%22width%22%3A218%2C%22height%22%3A52%2C%22text%22%3A%22NOT%20DISK%22%7D%2C%7B%22x%22%3A27%2C%22y%22%3A766%2C%22width%22%3A255%2C%22height%22%3A57%2C%22text%22%3A%2250-150US%22%7D%2C%7B%22x%22%3A536%2C%22y%22%3A770%2C%22width%22%3A119%2C%22height%22%3A50%2C%22text%22%3A%22SSD%22%7D%2C%7B%22x%22%3A531%2C%22y%22%3A879%2C%22width%22%3A128%2C%22height%22%3A50%2C%22text%22%3A%22HDD%22%7D%2C%7B%22x%22%3A58%2C%22y%22%3A879%2C%22width%22%3A185%2C%22height%22%3A51%2C%22text%22%3A%221-10MS%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f2f2f2%22%2C%22id%22%3A%22u71cef026%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><span data-lake-id="udf9867a7" id="udf9867a7"><br /></span><span data-lake-id="ud412ccb7" id="ud412ccb7"> 3.为什么Redis设计为单线程？6.0版本为何引入多线程？</span></h2><h3 data-lake-id="9285dbd1" id="9285dbd1"><span data-lake-id="u61deee1c" id="u61deee1c" style="color: rgb(0, 0, 0) !important">回答重点</span></h3><h4 data-lake-id="d1cf0599" id="d1cf0599"><span data-lake-id="u06eb57be" id="u06eb57be" style="color: rgb(0, 0, 0) !important">单线程设计原因：</span></h4><ol list="ua58ef0b7"><li fid="u0b7c1a6a" data-lake-id="u94c3c211" id="u94c3c211"><span data-lake-id="u902d819d" id="u902d819d" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Redis 的操作是基于内存的，其大多数操作的性能瓶颈主要不是 CPU 导致的</span></li><li fid="u0b7c1a6a" data-lake-id="u15fa50eb" id="u15fa50eb"><span data-lake-id="u7f773a16" id="u7f773a16" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">使用单线程模型，代码简便的同时也减少了线程上下文切换带来的性能开销</span></li><li fid="u0b7c1a6a" data-lake-id="uc0af276a" id="uc0af276a"><span data-lake-id="ue750d1e3" id="ue750d1e3" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Redis 在单线程的情况下，使用 I/O 多路复用模型就可以提高 Redis 的 I/O 利用率了</span></li></ol><h4 data-lake-id="cc643483" id="cc643483"><span data-lake-id="uca6f7cbb" id="uca6f7cbb" style="color: rgb(0, 0, 0) !important">6.0 版本引入多线程的原因：</span></h4><ol list="uc54143a3"><li fid="u56111d36" data-lake-id="u8f5cbcc3" id="u8f5cbcc3"><span data-lake-id="uc2ad10eb" id="uc2ad10eb" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">随着数据规模的增长、请求量的增多，Redis 的执行瓶颈主要在于网络 I/O。引入多线程处理可以提高网络 I/O 处理速度。</span></li></ol><h3 data-lake-id="b3a8e5e2" id="b3a8e5e2"><span data-lake-id="ub03a6e6c" id="ub03a6e6c" style="color: rgb(0, 0, 0) !important">扩展知识</span></h3><p data-lake-id="u58ceaf35" id="u58ceaf35"><span data-lake-id="u6845c5fe" id="u6845c5fe" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">我们所说的 Redis 单线程，主要指的是 Redis 网络 I/O 和键值对读写这些操作是由一个线程完成的。（持久化、集群等机制其实是有后台线程执行的）<br /></span><span data-lake-id="udba0f669" id="udba0f669" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">不过 Redis 并不是一直都单线程的，在 4.0 之后就开始引入了多线程指令，6.0 之后便正式引入了多线程的机制，不过 这里的多线程其只是针对网络请求过程使用多线程，其对于数据读写命令的处理依旧是单线程的。</span></p><p data-lake-id="ub725c418" id="ub725c418"><br></p><h2 data-lake-id="qOwWK" id="qOwWK"><span data-lake-id="ube94b0c0" id="ube94b0c0" style="color: rgb(28, 31, 35)">4.Redis中跳表是的实现原理是什么？</span></h2><p data-lake-id="u0a97a1ba" id="u0a97a1ba"><span data-lake-id="u19b59e0f" id="u19b59e0f" class="lake-fontsize-12">一般跳表</span><span data-lake-id="u8bbfc38b" id="u8bbfc38b" style="color: rgb(28, 31, 35)">主要是通过多层链表来实现，底层链表保存所有元素，而每一层链表都是下一层的子集。</span></p><p data-lake-id="u46c087df" id="u46c087df" style="padding-left: 2em"><span data-lake-id="ue394df9f" id="ue394df9f" style="color: rgb(28, 31, 35)"> - **插入**时，首先从最高层开始查找插入位置，然后随机决定新节点的层数，最后在相应的层中插入节点并更新指针。</span></p><p data-lake-id="u1d218fed" id="u1d218fed" style="padding-left: 2em"><span data-lake-id="uf813135a" id="uf813135a" style="color: rgb(28, 31, 35)"> - **删除**时，同样从最高层开始查找要删除的节点，并在各层中更新指针，以保持跳表的结构。</span></p><p data-lake-id="u94913928" id="u94913928" style="padding-left: 2em"><span data-lake-id="u2388d0e1" id="u2388d0e1" style="color: rgb(28, 31, 35)"> - **查找**时，从最高层开始，逐层向下，直到找到目标元素或确定元素不存在。查找效率高，时间复杂度为 O(logn) </span></p><p data-lake-id="uc862e4ce" id="uc862e4ce"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744291808180-e7b66831-a31f-4fbc-83ed-719dc34e0ecf.png%22%2C%22taskId%22%3A%22u6d3ab952-c59e-414c-8759-20bbd7233c2%22%2C%22clientId%22%3A%22u5a778552-34bc-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1254.6666666666667%2C%22height%22%3A607%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A409769%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1882%2C%22originHeight%22%3A911%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%2270%2090%20NIL%2050%2030%2010%2070%2040%20NIL%20SO%2010%2020%2070%2090%2030%2009%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1492%2C%22y%22%3A231%2C%22width%22%3A42%2C%22height%22%3A35%2C%22text%22%3A%2270%22%7D%2C%7B%22x%22%3A817%2C%22y%22%3A234%2C%22width%22%3A46%2C%22height%22%3A32%2C%22text%22%3A%2290%22%7D%2C%7B%22x%22%3A1741%2C%22y%22%3A236%2C%22width%22%3A46%2C%22height%22%3A29%2C%22text%22%3A%22NIL%22%7D%2C%7B%22x%22%3A1032%2C%22y%22%3A484%2C%22width%22%3A46%2C%22height%22%3A33%2C%22text%22%3A%2250%22%7D%2C%7B%22x%22%3A581%2C%22y%22%3A484%2C%22width%22%3A43%2C%22height%22%3A33%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A166%2C%22y%22%3A484%2C%22width%22%3A36%2C%22height%22%3A35%2C%22text%22%3A%2210%22%7D%2C%7B%22x%22%3A1490%2C%22y%22%3A484%2C%22width%22%3A41%2C%22height%22%3A33%2C%22text%22%3A%2270%22%7D%2C%7B%22x%22%3A818%2C%22y%22%3A485%2C%22width%22%3A43%2C%22height%22%3A32%2C%22text%22%3A%2240%22%7D%2C%7B%22x%22%3A1738%2C%22y%22%3A485%2C%22width%22%3A49%2C%22height%22%3A34%2C%22text%22%3A%22NIL%22%7D%2C%7B%22x%22%3A1033%2C%22y%22%3A711%2C%22width%22%3A44%2C%22height%22%3A34%2C%22text%22%3A%22SO%22%7D%2C%7B%22x%22%3A163%2C%22y%22%3A712%2C%22width%22%3A40%2C%22height%22%3A37%2C%22text%22%3A%2210%22%7D%2C%7B%22x%22%3A375%2C%22y%22%3A712%2C%22width%22%3A49%2C%22height%22%3A34%2C%22text%22%3A%2220%22%7D%2C%7B%22x%22%3A1490%2C%22y%22%3A713%2C%22width%22%3A41%2C%22height%22%3A34%2C%22text%22%3A%2270%22%7D%2C%7B%22x%22%3A816%2C%22y%22%3A713%2C%22width%22%3A45%2C%22height%22%3A33%2C%22text%22%3A%2290%22%7D%2C%7B%22x%22%3A588%2C%22y%22%3A714%2C%22width%22%3A44%2C%22height%22%3A33%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A1244%2C%22y%22%3A713%2C%22width%22%3A45%2C%22height%22%3A34%2C%22text%22%3A%2209%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f6%22%2C%22id%22%3A%22u0962bead%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u7062ab65" id="u7062ab65"><span data-lake-id="u90aaeeb4" id="u90aaeeb4">Redis的跳表相对于普通调表多了一个回退指针，且score可以重复；</span></p><h3 data-lake-id="ce1ed48f" id="ce1ed48f"><span data-lake-id="u880dfc01" id="u880dfc01" style="color: rgb(0, 0, 0)">为什么 Redis 跳表实现多了个回退指针（前驱指针）</span></h3><p data-lake-id="ue9d36ca7" id="ue9d36ca7"><span data-lake-id="u7294b08e" id="u7294b08e" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">回退指针主要是为了提高跳表的操作效率和灵活性。</span></p><p data-lake-id="u5b809fa4" id="u5b809fa4"><span data-lake-id="u6c04f787" id="u6c04f787" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">例如删除节点时，通过前驱指针可以在一次遍历中找到并记录所有关联的前驱节点，无需在变更指针时再次查找前驱节点。这种设计避免了重复查找过程，简化了操作逻辑，大幅提高了删除的执行效率。</span></p><p data-lake-id="u49686eaf" id="u49686eaf"><span data-lake-id="u00d14ad0" id="u00d14ad0" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">尤其是在频繁插入和删除的场景中，回退指针减少了节点之间指针的更新复杂度，提升性能</span></p><p data-lake-id="u865a7377" id="u865a7377"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744292446692-ed4ba5fe-f80a-400b-9ab3-1e8f36719e54.png%22%2C%22taskId%22%3A%22ufe698274-e239-4ffa-ab83-5f4c5b3d5c4%22%2C%22clientId%22%3A%22u5a778552-34bc-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1328%2C%22height%22%3A458%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A440122%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1992%2C%22originHeight%22%3A687%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%2270%2010%2040%2070%2010%2030%20SO%2090%2098%20VIL%2010%2070%2098%2090%2030%2020%2009%20SO%20NIL%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1658%2C%22y%22%3A134%2C%22width%22%3A42%2C%22height%22%3A37%2C%22text%22%3A%2270%22%7D%2C%7B%22x%22%3A107%2C%22y%22%3A136%2C%22width%22%3A37%2C%22height%22%3A34%2C%22text%22%3A%2210%22%7D%2C%7B%22x%22%3A760%2C%22y%22%3A138%2C%22width%22%3A43%2C%22height%22%3A30%2C%22text%22%3A%2240%22%7D%2C%7B%22x%22%3A1658%2C%22y%22%3A375%2C%22width%22%3A41%2C%22height%22%3A35%2C%22text%22%3A%2270%22%7D%2C%7B%22x%22%3A107%2C%22y%22%3A375%2C%22width%22%3A39%2C%22height%22%3A35%2C%22text%22%3A%2210%22%7D%2C%7B%22x%22%3A503%2C%22y%22%3A376%2C%22width%22%3A45%2C%22height%22%3A34%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A1221%2C%22y%22%3A376%2C%22width%22%3A43%2C%22height%22%3A31%2C%22text%22%3A%22SO%22%7D%2C%7B%22x%22%3A760%2C%22y%22%3A379%2C%22width%22%3A42%2C%22height%22%3A30%2C%22text%22%3A%2290%22%7D%2C%7B%22x%22%3A981%2C%22y%22%3A379%2C%22width%22%3A44%2C%22height%22%3A29%2C%22text%22%3A%2298%22%7D%2C%7B%22x%22%3A1897%2C%22y%22%3A383%2C%22width%22%3A43%2C%22height%22%3A26%2C%22text%22%3A%22VIL%22%7D%2C%7B%22x%22%3A107%2C%22y%22%3A593%2C%22width%22%3A38%2C%22height%22%3A35%2C%22text%22%3A%2210%22%7D%2C%7B%22x%22%3A1658%2C%22y%22%3A595%2C%22width%22%3A42%2C%22height%22%3A33%2C%22text%22%3A%2270%22%7D%2C%7B%22x%22%3A977%2C%22y%22%3A596%2C%22width%22%3A47%2C%22height%22%3A33%2C%22text%22%3A%2298%22%7D%2C%7B%22x%22%3A761%2C%22y%22%3A597%2C%22width%22%3A42%2C%22height%22%3A30%2C%22text%22%3A%2290%22%7D%2C%7B%22x%22%3A515%2C%22y%22%3A597%2C%22width%22%3A41%2C%22height%22%3A32%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A311%2C%22y%22%3A596%2C%22width%22%3A43%2C%22height%22%3A31%2C%22text%22%3A%2220%22%7D%2C%7B%22x%22%3A1421%2C%22y%22%3A597%2C%22width%22%3A44%2C%22height%22%3A30%2C%22text%22%3A%2209%22%7D%2C%7B%22x%22%3A1219%2C%22y%22%3A594%2C%22width%22%3A47%2C%22height%22%3A36%2C%22text%22%3A%22SO%22%7D%2C%7B%22x%22%3A1895%2C%22y%22%3A599%2C%22width%22%3A47%2C%22height%22%3A28%2C%22text%22%3A%22NIL%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f5f4%22%2C%22id%22%3A%22u093a10bf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u5b288db7" id="u5b288db7"><span data-lake-id="u020d85aa" id="u020d85aa">如果还是不理解推荐查看动画讲解：</span><a href="https://www.bilibili.com/video/BV1tK4y1X7de/?spm_id_from=333.337.search-card.all.click&amp;vd_source=9d35174f7c3d230c62ba6ea39d65beb4" target="_blank" data-lake-id="uf5a559d5" id="uf5a559d5"><span data-lake-id="ud0619ef8" id="ud0619ef8">https://www.bilibili.com/video/BV1tK4y1X7de/?spm_id_from=333.337.search-card.all.click&amp;vd_source=9d35174f7c3d230c62ba6ea39d65beb4</span></a></p><p data-lake-id="u77ec1967" id="u77ec1967"><span data-lake-id="ued243005" id="ued243005">​</span><br></p><h2 data-lake-id="yG8I0" id="yG8I0"><span data-lake-id="ua8cc44d0" id="ua8cc44d0">5.Redis的Hash是什么？</span></h2><p data-lake-id="uca17bf9f" id="uca17bf9f"><span data-lake-id="ua19a12d3" id="ua19a12d3" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Redis 的 hash 是一种键值对集合，可以将多个字段和值存储在同一个键中，便于管理一些关联数据。<br /></span><span data-lake-id="u0dbb174d" id="u0dbb174d" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">特点如下：</span><span data-lake-id="uc224a0fc" id="uc224a0fc"><br /><br /></span></p><ol list="u86a3c2ba"><li fid="u53f023a0" data-lake-id="u05095cd6" id="u05095cd6"><span data-lake-id="u864b18d7" id="u864b18d7" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">适合存储小数据，使用哈希表实现，能够在内存中高效存储和操作。</span></li><li fid="u53f023a0" data-lake-id="u219018a6" id="u219018a6"><span data-lake-id="udd07fe5d" id="udd07fe5d" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">支持快速的字段操作（如增、删、改、查），非常适合存储对象的属性。</span></li></ol><h3 data-lake-id="839628c5" id="839628c5"><span data-lake-id="u015b8c84" id="u015b8c84" style="color: rgb(0, 0, 0)">Hash 底层实现解析</span></h3><p data-lake-id="u08f36a89" id="u08f36a89"><span data-lake-id="ua34f169f" id="ua34f169f" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Hash 是 Redis 中的一种数据基础数据结构，类似于数据结构中的哈希表，一个 Hash 可以存储 2 的 32 次方 - 1 个键值对（约 40 亿）。底层结构需要分成两个情况：</span></p><p data-lake-id="udabc90ff" id="udabc90ff"><span data-lake-id="u2f7e76c1" id="u2f7e76c1" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">​</span><br></p><ul list="u4c5f411d"><li fid="u787bd777" data-lake-id="uf26b3a76" id="uf26b3a76"><span data-lake-id="u7099fcfc" id="u7099fcfc" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Redis 6 及之前，Hash 的底层是压缩列表加上哈希表的数据结构（ziplist + hashtable）</span></li><li fid="u787bd777" data-lake-id="uef182c13" id="uef182c13"><span data-lake-id="u63a7cfce" id="u63a7cfce" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Redis 7 之后，Hash 的底层是紧凑列表（Listpack）加上哈希表的数据结构（Listpack + hashtable）</span></li></ul><p data-lake-id="u1df62fec" id="u1df62fec"><span data-lake-id="u10ad21b8" id="u10ad21b8" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">ziplist 和 listpack 查找 key 的效率是类似的，时间复杂度都是 O（n），其主要区别就在于 listpack 解决了 ziplist 的级联更新问题。</span></p><p data-lake-id="ue42742da" id="ue42742da"><br></p><h2 data-lake-id="cZk1Z" id="cZk1Z"><span data-lake-id="u61f4bdc7" id="u61f4bdc7">6.Redis中Zset实现原理是什么？</span></h2><p data-lake-id="uc98f0756" id="uc98f0756"><span data-lake-id="ufe369a86" id="ufe369a86" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">Redis 中的 ZSet（有序集合，Sorted Set）是一种由跳表（Skip List）和哈希表（Hash Table）组成的数据结构。ZSet 结合了集合（Set）的特性和排序功能，能够存储具有唯一性的成员，并根据成员的分数（score）进行排序。<br /></span><span data-lake-id="u2ee7d565" id="u2ee7d565" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">ZSet 的实现由两个核心数据结构组成：</span></p><ol list="u2d5be1de"><li fid="u846849ce" data-lake-id="u6e1b848c" id="u6e1b848c"><span data-lake-id="ub20ed876" id="ub20ed876" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">跳表（Skip List）：用于存储数据的排序和快速查找。</span></li><li fid="u846849ce" data-lake-id="u31e673c0" id="u31e673c0"><span data-lake-id="u88ca84b9" id="u88ca84b9" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">哈希表（Hash Table）：用于存储成员与其分数的映射，提供快速查找。</span></li></ol><p data-lake-id="u77183e70" id="u77183e70"><span data-lake-id="u8576ffac" id="u8576ffac" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">当 Zset 元素数量较少时，Redis 会使用压缩列表（Zip List）来节省内存</span></p><ul list="u70053318"><li fid="u6616c718" data-lake-id="u18aa0774" id="u18aa0774"><span data-lake-id="u345188b0" id="u345188b0" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">即元素个数 ≤ zset-max-ziplist-entries（默认 128）</span></li><li fid="u6616c718" data-lake-id="u0fd15978" id="u0fd15978"><span data-lake-id="uf6fcfbbc" id="uf6fcfbbc" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">元素成员名和分值的长度 ≤ zset-max-ziplist-value（默认 64 字节）</span></li></ul><p data-lake-id="u8bd21207" id="u8bd21207"><span data-lake-id="u835d98ac" id="u835d98ac" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">如果任何一个条件不满足，Zset 将使用 跳表 + 哈希表 作为底层实现。</span></p><p data-lake-id="ue5127116" id="ue5127116"><br></p><h3 data-lake-id="8862d033" id="8862d033"><span data-lake-id="u305c07e7" id="u305c07e7" style="color: rgb(0, 0, 0)">ZSet 的插入、删除和查找操作</span></h3><p data-lake-id="u6bebf8f5" id="u6bebf8f5"><strong><span data-lake-id="ua11a5dbf" id="ua11a5dbf" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">插入操作（ZADD）</span></strong><span data-lake-id="uf633f4e2" id="uf633f4e2" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：插入操作的时间复杂度为 O (log N)，因为在跳表中查找插入位置的时间复杂度是 O (log N)，哈希表的更新操作是 O (1)。</span></p><ol list="u0159c446"><li fid="u0e8467a1" data-lake-id="u79ae3139" id="u79ae3139"><span data-lake-id="u8f21822a" id="u8f21822a" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">使用哈希表存储成员和分数的映射关系，分数作为哈希表中的值。</span></li><li fid="u0e8467a1" data-lake-id="u438a7239" id="u438a7239"><span data-lake-id="u9a492ee4" id="u9a492ee4" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">同时，将成员和分数插入跳表，跳表会根据分数排序。</span></li><li fid="u0e8467a1" data-lake-id="u66a0e687" id="u66a0e687"><span data-lake-id="u82319afd" id="u82319afd" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">如果是更新操作，Redis 会在哈希表中更新成员的分数，然后在跳表中更新该成员的位置。</span></li></ol><p data-lake-id="u9fba1986" id="u9fba1986"><strong><span data-lake-id="ubf705285" id="ubf705285" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">删除操作（ZREM）</span></strong><span data-lake-id="u5d972518" id="u5d972518" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：删除操作的时间复杂度为 O (log N)，其中 N 是跳表中元素的数量。</span></p><ol list="u7e26d670"><li fid="u6b19be5d" data-lake-id="u13887597" id="u13887597"><span data-lake-id="uc97ab23e" id="uc97ab23e" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">使用哈希表删除成员的映射。</span></li><li fid="u6b19be5d" data-lake-id="ub218afbf" id="ub218afbf"><span data-lake-id="u1e8e6095" id="u1e8e6095" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">同时在跳表中删除该成员。</span></li></ol><p data-lake-id="u8892f046" id="u8892f046"><strong><span data-lake-id="ubde92c2a" id="ubde92c2a" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">查找操作（ZSCORE）</span></strong><span data-lake-id="ub819a0a5" id="ub819a0a5">​</span></p><ol list="u0616552a"><li fid="u617a0c19" data-lake-id="u03304395" id="u03304395"><span data-lake-id="ud27cd127" id="ud27cd127" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">在哈希表中查找成员的分数，时间复杂度为 O (1)。</span><span data-lake-id="u5dce1ca4" id="u5dce1ca4"><br /><br /></span></li></ol><p data-lake-id="ue2ab7286" id="ue2ab7286"><strong><span data-lake-id="ud3039f8c" id="ud3039f8c" class="lake-fontsize-12" style="color: rgb(0, 0, 0) !important">范围查询操作（ZRANGE、ZREVRANGE、ZRANGEBYSCORE）</span></strong><span data-lake-id="u80eee935" id="u80eee935" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">：</span><span data-lake-id="uee4bded4" id="uee4bded4"><br /><br /></span></p><ol list="uba2f40ba"><li fid="ub45edc17" data-lake-id="u4db767d7" id="u4db767d7"><span data-lake-id="ue14326d8" id="ue14326d8" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">在跳表中根据分数区间查找成员，查找时间复杂度为 O (log N + M)，其中 M 是返回的成员数量。</span></li><li fid="ub45edc17" data-lake-id="u0d96adde" id="u0d96adde"><span data-lake-id="u2b2d1beb" id="u2b2d1beb" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">哈希表用于快速查找成员的分数。</span></li></ol><h3 data-lake-id="94919f81" id="94919f81"><span data-lake-id="u911e2e60" id="u911e2e60" style="color: rgb(0, 0, 0)">时间复杂度</span></h3><p data-lake-id="ubedbef52" id="ubedbef52"><span data-lake-id="uac105d5f" id="uac105d5f" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">ZSet 操作的核心时间复杂度是 O (log N)，因为大多数操作（如插入、删除、查找等）都需要通过跳表查找元素的位置。<br /></span><span data-lake-id="u38ec0b64" id="u38ec0b64" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">对于范围查询操作，由于返回的数据量可能很大，时间复杂度为 O (log N + M)，其中 M 是返回的元素数量。<br /></span><span data-lake-id="u491e209b" id="u491e209b" class="lake-fontsize-12" style="color: rgba(0, 0, 0, 0.85) !important">通过成员分数查询（如 ZSCORE）的时间复杂度为 O (1)，因为 Redis 使用哈希表来存储成员与分数的映射。</span></p><h2 data-lake-id="Vu2Hf" id="Vu2Hf"><span data-lake-id="u2f243bff" id="u2f243bff" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">7.Redis 中如何保证缓存与数据库的数据一致性？</span><span data-lake-id="u331bfbfb" id="u331bfbfb" style="color: rgb(28, 31, 35)"><br /><br /></span></h2><p data-lake-id="u5d57387a" id="u5d57387a"><span data-lake-id="u648dcb80" id="u648dcb80">实现缓存与数据库的一致性可以采用：</span></p><ol list="u46857adc"><li fid="u854a3dfa" data-lake-id="u063e3d65" id="u063e3d65"><span data-lake-id="u412641b7" id="u412641b7" style="color: rgb(28, 31, 35)">先更新缓存再更新数据库</span></li><li fid="u854a3dfa" data-lake-id="u3c2b1cac" id="u3c2b1cac"><span data-lake-id="u97f596b1" id="u97f596b1" style="color: rgb(28, 31, 35)">先更新数据库再更新缓存</span></li><li fid="u854a3dfa" data-lake-id="ud70c5104" id="ud70c5104"><span data-lake-id="ube40bc21" id="ube40bc21" style="color: rgb(28, 31, 35)">先删除缓存，再更新数据库，再将数据库数据同步到缓存中</span></li><li fid="u854a3dfa" data-lake-id="ue42e586d" id="ue42e586d"><span data-lake-id="u0003d14d" id="u0003d14d" style="color: rgb(28, 31, 35)">先更新数据库，再删除缓存，再将数据库数据同步到缓存中</span></li><li fid="u854a3dfa" data-lake-id="u1410ca00" id="u1410ca00"><span data-lake-id="u404ae084" id="u404ae084" style="color: rgb(28, 31, 35)">【双删策略】更新数据库之前删除一次缓存，更新数据库之后再删除一次缓存。</span></li><li fid="u854a3dfa" data-lake-id="u78577b3a" id="u78577b3a"><span data-lake-id="u44595465" id="u44595465" style="color: rgb(28, 31, 35)">使用 binlog 异步更新缓存，通过监听 binlog 变化异步更新缓存。</span></li></ol><p data-lake-id="u4c27b805" id="u4c27b805"><span data-lake-id="u4c932a40" id="u4c932a40" style="color: rgb(28, 31, 35)">并不推荐使用前面 3 种方式，可以根据业务场景来选择使用后面 3 种方式。</span></p><ul list="ua9f2d83a"><li fid="uc0329a77" data-lake-id="u23c0f8ad" id="u23c0f8ad"><span data-lake-id="u047546ff" id="u047546ff" style="color: rgb(28, 31, 35)">如果要保证的是缓存与数据库的实时一致性，那就使用先更新数据库，再删除缓存的方式，最然这种方式依旧会出现短暂的数据不一致，但是它已经尽可能的保证数据一致性了。 </span></li><li fid="uc0329a77" data-lake-id="u4d2aa8c7" id="u4d2aa8c7"><span data-lake-id="u94dabb0d" id="u94dabb0d" style="color: rgb(28, 31, 35)">如果要保证缓存与数据库的最终一致性，那就可以使用 binlog + 消息队列的方式进行，因为消息队列具有失</span></li><li fid="uc0329a77" data-lake-id="ue70a8c24" id="ue70a8c24"><span data-lake-id="u656df733" id="u656df733" style="color: rgb(28, 31, 35)">败重试以及顺序消费的特点，能够保证数据最终是一致的。</span></li></ul><p data-lake-id="u270e2d02" id="u270e2d02"><span data-lake-id="u17ad76b6" id="u17ad76b6" style="color: rgb(28, 31, 35)">4.先更新数据库，再删除缓存</span></p><ul list="ua9f2d83a" start="4"><li fid="uc0329a77" data-lake-id="u271f172d" id="u271f172d"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744364520481-6fafdd54-f6c2-410b-9d2d-d57524664e5d.png%22%2C%22taskId%22%3A%22u658d4962-f1c8-4090-92d8-3c02ca7fa65%22%2C%22clientId%22%3A%22uf4900cc0-d4bf-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A922.6666666666666%2C%22height%22%3A723%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A468989%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1384%2C%22originHeight%22%3A1084%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%BC%93%E5%AD%98%20%E8%AF%B7%E6%B1%82B%20%E6%95%B0%E6%8D%AE%E5%BA%93%20%E8%AF%B7%E6%B1%82A%20%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BA10%20%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%B8%BA20%20%E5%88%A0%E9%99%A4%E7%BC%93%E5%AD%98%20%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%B8%BA%E7%A9%BA%20%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BA10%20%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98%E4%B8%BA10%20%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%B8%BA10%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A845%2C%22y%22%3A87%2C%22width%22%3A49%2C%22height%22%3A25%2C%22text%22%3A%22%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A476%2C%22y%22%3A88%2C%22width%22%3A69%2C%22height%22%3A25%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82B%22%7D%2C%7B%22x%22%3A1197%2C%22y%22%3A89%2C%22width%22%3A67%2C%22height%22%3A21%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E5%BA%93%22%7D%2C%7B%22x%22%3A117%2C%22y%22%3A90%2C%22width%22%3A64%2C%22height%22%3A22%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82A%22%7D%2C%7B%22x%22%3A257%2C%22y%22%3A235%2C%22width%22%3A149%2C%22height%22%3A23%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BA10%22%7D%2C%7B%22x%22%3A607%2C%22y%22%3A344%2C%22width%22%3A132%2C%22height%22%3A21%2C%22text%22%3A%22%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%B8%BA20%22%7D%2C%7B%22x%22%3A299%2C%22y%22%3A469%2C%22width%22%3A81%2C%22height%22%3A21%2C%22text%22%3A%22%E5%88%A0%E9%99%A4%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A612%2C%22y%22%3A596%2C%22width%22%3A123%2C%22height%22%3A22%2C%22text%22%3A%22%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%B8%BA%E7%A9%BA%22%7D%2C%7B%22x%22%3A598%2C%22y%22%3A722%2C%22width%22%3A154%2C%22height%22%3A23%2C%22text%22%3A%22%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BA10%22%7D%2C%7B%22x%22%3A618%2C%22y%22%3A830%2C%22width%22%3A131%2C%22height%22%3A23%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98%E4%B8%BA10%22%7D%2C%7B%22x%22%3A257%2C%22y%22%3A939%2C%22width%22%3A130%2C%22height%22%3A23%2C%22text%22%3A%22%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%B8%BA10%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f7f1%22%2C%22id%22%3A%22ua4af4b69%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></li></ul><p data-lake-id="uad140530" id="uad140530"><span data-lake-id="u4d311fe8" id="u4d311fe8" style="color: rgb(28, 31, 35)">5.双删策略</span></p><p data-lake-id="u6298979b" id="u6298979b"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744364470948-b82d1ec6-eaf6-4a6e-a325-67658dcbc2e2.png%22%2C%22taskId%22%3A%22ub666648b-1e72-455c-90bb-451fd99c1eb%22%2C%22clientId%22%3A%22uf4900cc0-d4bf-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1084.6666666666667%2C%22height%22%3A719%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A620644%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1627%2C%22originHeight%22%3A1078%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%BC%93%E5%AD%98%20%E8%AF%B7%E6%B1%82A%20%E6%95%B0%E6%8D%AE%E5%BA%93%20%E8%AF%B7%E6%B1%82B%20%E5%88%A0%E9%99%A4%E7%BC%93%E5%AD%98%20%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%B8%BA%E7%A9%BA%20%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BA10%20%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BA20%20%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98%E4%B8%BA10%20%E5%88%A0%E9%99%A4%E7%BC%93%E5%AD%98%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A999%2C%22y%22%3A75%2C%22width%22%3A58%2C%22height%22%3A28%2C%22text%22%3A%22%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A128%2C%22y%22%3A76%2C%22width%22%3A80%2C%22height%22%3A29%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82A%22%7D%2C%7B%22x%22%3A1418%2C%22y%22%3A75%2C%22width%22%3A82%2C%22height%22%3A29%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E5%BA%93%22%7D%2C%7B%22x%22%3A558%2C%22y%22%3A76%2C%22width%22%3A80%2C%22height%22%3A28%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82B%22%7D%2C%7B%22x%22%3A337%2C%22y%22%3A250%2C%22width%22%3A99%2C%22height%22%3A28%2C%22text%22%3A%22%E5%88%A0%E9%99%A4%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A723%2C%22y%22%3A379%2C%22width%22%3A146%2C%22height%22%3A26%2C%22text%22%3A%22%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%B8%BA%E7%A9%BA%22%7D%2C%7B%22x%22%3A724%2C%22y%22%3A510%2C%22width%22%3A179%2C%22height%22%3A25%2C%22text%22%3A%22%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BA10%22%7D%2C%7B%22x%22%3A321%2C%22y%22%3A681%2C%22width%22%3A177%2C%22height%22%3A26%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BA20%22%7D%2C%7B%22x%22%3A735%2C%22y%22%3A808%2C%22width%22%3A156%2C%22height%22%3A26%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98%E4%B8%BA10%22%7D%2C%7B%22x%22%3A337%2C%22y%22%3A980%2C%22width%22%3A99%2C%22height%22%3A29%2C%22text%22%3A%22%E5%88%A0%E9%99%A4%E7%BC%93%E5%AD%98%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f6ef%22%2C%22id%22%3A%22u3e41155c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u392ac18e" id="u392ac18e"><span data-lake-id="u3919b526" id="u3919b526">6.</span><span data-lake-id="uc4b56fa0" id="uc4b56fa0" style="color: rgb(28, 31, 35)">使用 binlog 异步更新缓存，通过监听 binlog 变化异步更新缓存。</span></p><p data-lake-id="u145c7f5f" id="u145c7f5f"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744364594873-781e5a33-c67d-4d1c-9627-71e9a0954ab6.png%22%2C%22taskId%22%3A%22uc5a481e6-ff73-466b-8d8c-56efadd3ca7%22%2C%22clientId%22%3A%22uf4900cc0-d4bf-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1274%2C%22height%22%3A582%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A627011%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1911%2C%22originHeight%22%3A873%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%20%E8%AF%B7%E6%B1%82A%20%E7%BC%93%E5%AD%98%20%E6%95%B0%E6%8D%AE%E5%BA%93%20CANAL%20%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BA10%20%E7%9B%91%E5%90%ACBINLOG%20%E6%9B%B4%E6%96%B0%E8%AF%B7%E6%B1%82%E8%BF%9B%E5%85%A5%E9%98%9F%E5%88%97%20%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9%2F%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6%20%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1318%2C%22y%22%3A86%2C%22width%22%3A103%2C%22height%22%3A30%2C%22text%22%3A%22%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%22%7D%2C%7B%22x%22%3A121%2C%22y%22%3A87%2C%22width%22%3A77%2C%22height%22%3A30%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82A%22%7D%2C%7B%22x%22%3A1723%2C%22y%22%3A87%2C%22width%22%3A54%2C%22height%22%3A28%2C%22text%22%3A%22%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A524%2C%22y%22%3A87%2C%22width%22%3A77%2C%22height%22%3A30%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E5%BA%93%22%7D%2C%7B%22x%22%3A929%2C%22y%22%3A88%2C%22width%22%3A73%2C%22height%22%3A26%2C%22text%22%3A%22CANAL%22%7D%2C%7B%22x%22%3A258%2C%22y%22%3A251%2C%22width%22%3A168%2C%22height%22%3A24%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BA10%22%7D%2C%7B%22x%22%3A686%2C%22y%22%3A372%2C%22width%22%3A124%2C%22height%22%3A27%2C%22text%22%3A%22%E7%9B%91%E5%90%ACBINLOG%22%7D%2C%7B%22x%22%3A1059%2C%22y%22%3A514%2C%22width%22%3A181%2C%22height%22%3A25%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E8%AF%B7%E6%B1%82%E8%BF%9B%E5%85%A5%E9%98%9F%E5%88%97%22%7D%2C%7B%22x%22%3A1443%2C%22y%22%3A620%2C%22width%22%3A200%2C%22height%22%3A27%2C%22text%22%3A%22%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9%2F%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6%22%7D%2C%7B%22x%22%3A1494%2C%22y%22%3A651%2C%22width%22%3A94%2C%22height%22%3A23%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f3ec%22%2C%22id%22%3A%22u8cc53d27%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h2 data-lake-id="Y4CNT" id="Y4CNT"><span data-lake-id="ua2b74393" id="ua2b74393" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">8.Redis 中的缓存击穿、缓存穿透和缓存雪崩是什么？</span></h2><h3 data-lake-id="icJP3" id="icJP3"><span data-lake-id="u914685c8" id="u914685c8">回答重点</span></h3><ul list="u03f2feae"><li fid="u415163bb" data-lake-id="ucfec0ae6" id="ucfec0ae6"><strong><span data-lake-id="u13da74c8" id="u13da74c8">缓存击穿</span></strong><span data-lake-id="uc3a33ec3" id="uc3a33ec3">：指某个热点数据在缓存中失效，导致大量请求直接访问数据库。此时，由于瞬间的高并发，可能导致数据库崩溃。</span></li><li fid="u415163bb" data-lake-id="u54dc972f" id="u54dc972f"><strong><span data-lake-id="u4355abff" id="u4355abff">缓存穿透</span></strong><span data-lake-id="u75cfabd9" id="u75cfabd9">：指查询一个不存在的数据，缓存中没有相应的记录，每次请求都会去数据库查询，造成数据库负担加重。 </span></li><li fid="u415163bb" data-lake-id="u015ac6d5" id="u015ac6d5"><strong><span data-lake-id="u8ef83cf5" id="u8ef83cf5">缓存雪崩</span></strong><span data-lake-id="ud879d37c" id="ud879d37c">：指多个缓存数据在同一时间过期，导致大量请求同时访问数据库，从而造成数据库瞬间负载激增。</span></li></ul><h3 data-lake-id="Rf8bC" id="Rf8bC"><span data-lake-id="u23de8b5d" id="u23de8b5d">解决方案</span></h3><h4 data-lake-id="gbR80" id="gbR80"><span data-lake-id="ud198cc91" id="ud198cc91">缓存击穿：</span></h4><ul list="ud3131670"><li fid="u3a8e8182" data-lake-id="u784f2878" id="u784f2878"><span data-lake-id="u4a850613" id="u4a850613">使用互斥锁，确保同一时间只有一个请求可以去数据库查询并更新缓存。</span></li><li fid="u3a8e8182" data-lake-id="u53c982c5" id="u53c982c5"><span data-lake-id="ud281b1b8" id="ud281b1b8">热点数据永不过期。</span></li></ul><h4 data-lake-id="uZznq" id="uZznq"><span data-lake-id="ua8062501" id="ua8062501">缓存穿透：</span></h4><ul list="u3f453e2f"><li fid="ud80fd569" data-lake-id="u2bb4183b" id="u2bb4183b"><span data-lake-id="u5e9b76d1" id="u5e9b76d1">使用布隆过滤器，过滤掉不存在的请求，避免直接访问数据库。</span></li><li fid="ud80fd569" data-lake-id="u90b12b6a" id="u90b12b6a"><span data-lake-id="u95ef8da1" id="u95ef8da1">对查询结果进行缓存，即使是不存在的数据，也可以缓存一个标识，以减少对数据库的请求。</span></li></ul><h4 data-lake-id="Q6bKE" id="Q6bKE"><span data-lake-id="u45561823" id="u45561823">缓存雪崩：</span></h4><ul list="u0d484784"><li fid="ub9cd5432" data-lake-id="u15f6a756" id="u15f6a756"><span data-lake-id="u92cda62b" id="u92cda62b">采用随机过期时间策略，避免多个数据同时过期。</span></li><li fid="ub9cd5432" data-lake-id="u82f5d1db" id="u82f5d1db"><span data-lake-id="u08024ed6" id="u08024ed6">使用双缓存策略，将数据同时存储在两层缓存中，减少数据库直接请求。</span></li></ul><h2 data-lake-id="uStON" id="uStON"><span data-lake-id="ua1259b0b" id="ua1259b0b">9.</span><span data-lake-id="u42219211" id="u42219211" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis String 类型的底层实现是什么？（SDS）</span></h2><h3 data-lake-id="NRBLG" id="NRBLG"><span data-lake-id="u360b8fcf" id="u360b8fcf" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">回答重点</span></h3><p data-lake-id="u1138fb96" id="u1138fb96"><span data-lake-id="ube99b5fe" id="ube99b5fe" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 中的 String 类型底层实现主要基于 SDS（Simple Dynamic String 简单动态字符串）结构，并结合 int、embstr、raw 等不同的编码方式进行优化存储。</span></p><ol list="u803cf059"><li fid="u775da3c9" data-lake-id="ua025c0a4" id="ua025c0a4"><span data-lake-id="u9375531c" id="u9375531c" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">int：适合于整数的字符串，占用内存少，</span></li><li fid="u775da3c9" data-lake-id="u70a11cb7" id="u70a11cb7"><span data-lake-id="u72a9820a" id="u72a9820a" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">embstr：适用于较短的字符串，key和value可以保存在一块内存里，适合读多写少场景</span></li><li fid="u775da3c9" data-lake-id="u98df5024" id="u98df5024"><span data-lake-id="u2c1096ce" id="u2c1096ce" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">raw：适用于较长的字符串，key和value分开保存，适合经常操作大字符串场景</span></li></ol><p data-lake-id="u1d8e369f" id="u1d8e369f"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744367053269-c0ab2ca7-4c75-4ea4-ad03-b39485690a69.png%22%2C%22taskId%22%3A%22u82aa1951-5064-4cc2-acaf-cd506fd3075%22%2C%22clientId%22%3A%22uf4900cc0-d4bf-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A768%2C%22height%22%3A741%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A368785%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1152%2C%22originHeight%22%3A1112%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22REDIS%20STRING%E7%B1%BB%E5%9E%8B%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%20SDS%20%E4%B8%8D%E4%BD%BF%E7%94%A8C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E6%8F%90%E4%BE%9B%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E4%B8%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9E%84(SDS)%2C%E7%BB%93%E5%90%88%E4%B8%89%20%E5%8E%9F%E5%9B%A0(SDS%E5%92%8CC%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%BA%E5%88%AB)%20%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%E5%AD%98%E5%82%A8%2CREDIS%204.X%E4%BB%A5%E4%B8%8A%20%E5%BC%95%E5%85%A5%E4%BA%86SDSHDR%E5%8F%98%E7%A7%8D%2C%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E5%8A%A8%E6%80%81%E9%80%89%E6%8B%A9%E4%B8%8D%20%E5%90%8C%E5%AE%9E%E7%8E%B0%2C%E4%BC%98%E5%8C%96%E5%86%85%E5%AD%98%20SDS%20%E5%BA%95%E5%B1%82%E4%BB%A3%E7%A0%81%3A%20%E4%BB%A5%5C%5C0%E7%BB%93%E5%B0%BE%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%2C%E5%8C%85%E5%90%AB%E9%95%BF%E5%BA%A6%2C%E5%88%86%E9%85%8D%E7%AD%89%E7%A9%BA%E9%97%B4%E4%BF%A1%E6%81%AF%20)%20SDSHDR64%20STRUCT%20_ATTRIBUTE%20((_PACKED_))%20S%20UINT64_T%20LEN%3B%2F%20%2F*USED%20*%20%E7%8B%AC%E7%AB%8B%E8%AE%B0%E5%BD%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%2COO)%20%E9%81%8D%E5%8E%86%E8%8E%B7%E5%BE%97%2CO(N)%20UINT64.T%20ALLOC%3B%2F*%20EXCLUDING%20THE%20HEADER%20AND%20NUTL%20TERMINATOR%20*%2F%20UNSIGNED%20CHAR%20FLAGS%3B%2F*%203%20LSB%20OF%20TYPE%2C%205%20UNUSED%20BITS%20*%2F%20CHAR%20BUF%5B%5D%3B%20%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BB%BB%E6%84%8F%E4%BA%8C%E8%BF%9B%E5%88%B6%2C%2F0%E6%84%8F%E5%91%B3%E7%9D%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9D%9F%20%E6%94%AF%E6%8C%81%E4%BB%BB%E6%84%8F%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%AC%20%E6%94%AF%E6%8C%81%E5%AD%98%E5%82%A8%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%2C%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E6%88%96%E5%85%B6%E4%BB%96%E8%87%AA%E5%AE%9A%E4%B9%89%20%E4%BB%85%E6%94%AF%E6%8C%81%E6%98%93%2F0%E4%B8%BA%E7%BB%93%E5%B0%BE%E7%9A%84%E5%AD%97%E7%AC%A6%E5%BA%8F%E5%88%97%20%E7%BB%93%E6%9E%84%20LEN%3A%E8%AE%B0%E5%BD%95SDS%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6%20ALLOC%3A%E6%8C%87%E6%98%8E%E5%88%86%E9%85%8D%E7%BB%99%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8%E7%9A%84%E7%A9%BA%E9%97%B4%E9%95%BF%E5%BA%A6%2C%E8%AE%A1%20%E7%AE%97%E5%89%A9%E4%BD%99%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F%E4%B8%BAALLOC-LEN%2C%E8%A7%A3%E5%86%B3%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E9%97%AE%20%E4%B8%8D%E8%83%BD%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%2C%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%20%E8%87%AA%E5%8A%A8%E6%89%A9%E5%B1%95%E7%BC%A9%E5%87%8F%E5%86%85%E5%AD%98%20%E9%A2%98%20FLAGS%3A%E8%A1%A8%E7%A4%BASDS%E7%9A%84%E7%B1%BB%E5%9E%8B%2C%E4%B8%80%E5%85%B1%E4%BA%94%E4%B8%ADSDS%E7%B1%BB%E5%9E%8B%2C%20SDSHDR5%2CSDSHDR8%2CSDSHDR16%2CSDSHDR32%2C%20%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E8%A6%81%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%20%E4%BD%BF%E7%94%A8%E9%A2%84%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5%2C%E9%A2%84%E7%95%99%E9%A2%9D%E5%A4%96%E7%A9%BA%E9%97%B4%E5%87%8F%E5%B0%91%E6%89%A9%E5%B1%95%E6%97%B6%E5%86%85%E5%AD%98%20SDSHDR64(%E4%B8%8D%E5%90%8C%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B%E7%BB%93%E6%9E%84%E4%BD%93)%20%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E6%AC%A1%E6%95%B0%20BUF%3A%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%2C%E4%BF%9D%E6%8A%A4%E6%95%B0%E6%8D%AE%20%E6%89%8B%E5%8A%A8%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%2C%E6%98%93%E6%9C%89%E7%A2%8E%E7%89%87%20%E9%A2%84%E7%95%99%E7%A9%BA%E9%97%B4%E5%87%8F%E5%B0%91%E7%A2%8E%E7%89%87%2C%E7%BC%A9%E5%87%8F%E9%87%8A%E6%94%BE%E5%A4%9A%E4%BD%99%E5%86%85%E5%AD%98%20%E6%B2%A1%E6%9C%89%E9%A2%84%E5%88%86%E9%85%8D%2C%E5%8F%AF%E8%83%BD%E8%8A%82%E7%9C%81%E5%86%85%E5%AD%98%20%E5%B0%91%E9%87%8F%E6%B5%AA%E8%B4%B9%E9%A2%84%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%20%E6%98%93%E8%B6%8A%E7%95%8C%E6%88%96%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%20%E6%8F%90%E4%BE%9B%E4%B8%B0%E5%AF%8C%E5%AE%89%E5%85%A8%E7%9A%84API%E6%93%8D%E4%BD%9C%E6%8E%A5%E5%8F%A3%20%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%20EMBSTR%E7%BC%96%E7%A0%81%20RAW%E7%BC%96%E7%A0%81%20INT%E7%BC%96%E7%A0%81%20%E6%9D%A1%E4%BB%B6%3A%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E6%AF%94%E8%BE%83%E7%9F%AD%2C%E5%B0%8F%E4%BA%8E44B%20%E6%9D%A1%E4%BB%B6%3A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%AF%E4%BB%A5%E8%A2%AB%E8%A7%A3%E6%9E%90%E4%B8%BA%E6%95%B4%E6%95%B0%2C%E4%B8%94%20%E6%9D%A1%E4%BB%B6%3A%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E8%B6%85%E8%BF%8744B%20%E6%95%B4%E6%95%B0%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%B0%8F%2CREDIS%E4%BC%9A%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E8%AF%A5%20%E8%AF%A5%E7%BC%96%E7%A0%81%E5%B0%86%E6%89%80%E6%9C%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E5%AD%97%20%E8%AF%A5%E7%BC%96%E7%A0%81%E5%B0%86%E6%89%80%E6%9C%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E5%AD%97%20%E7%AC%A6%E6%95%B0%E6%8D%AE%E6%94%BE%E5%9C%A8%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%9D%97%E4%B8%AD%2C%E5%8F%AA%E5%88%86%E9%85%8D%E4%B8%80%20%E7%BC%96%E7%A0%81%20%E7%AC%A6%E6%95%B0%E6%8D%AE%E5%88%86%E5%BC%80%E5%AD%98%E5%82%A8%20%E6%AC%A1%E5%86%85%E5%AD%98%20%E4%BC%98%E5%8A%BF%3A%E5%86%85%E5%AD%98%E6%B6%88%E8%80%97%E6%9C%80%E5%B0%8F%2C%E9%80%82%E5%90%88%E6%95%B0%E5%AD%97%E5%80%BC%20%E4%BC%98%E5%8A%BF%3A%E5%85%83%E6%95%B0%E6%8D%AE%E5%92%8C%E5%86%85%E5%AE%B9%E5%88%86%E5%BC%80%E5%AD%98%E5%82%A8%2C%E9%80%82%E5%90%88%20%E4%BC%98%E5%8A%BF%3A%E5%85%83%E6%95%B0%E6%8D%AE%E5%92%8C%E5%86%85%E5%AE%B9%E5%9C%A8%E5%90%8C%E4%B8%80%E5%9D%97%E5%86%85%E5%AD%98%E5%AD%98%20%E9%9C%80%E8%A6%81%E9%A2%91%E7%B9%81%E6%93%8D%E4%BD%9C%E7%9A%84%E5%A4%A7%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E5%82%A8%2C%E9%80%82%E5%90%88%E8%AF%BB%E5%A4%9A%E5%86%99%E5%B0%91%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A453%2C%22y%22%3A40%2C%22width%22%3A257%2C%22height%22%3A23%2C%22text%22%3A%22REDIS%20STRING%E7%B1%BB%E5%9E%8B%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%22%7D%2C%7B%22x%22%3A318%2C%22y%22%3A200%2C%22width%22%3A34%2C%22height%22%3A15%2C%22text%22%3A%22SDS%22%7D%2C%7B%22x%22%3A708%2C%22y%22%3A200%2C%22width%22%3A241%2C%22height%22%3A18%2C%22text%22%3A%22%E4%B8%8D%E4%BD%BF%E7%94%A8C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E6%8F%90%E4%BE%9B%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%22%7D%2C%7B%22x%22%3A199%2C%22y%22%3A267%2C%22width%22%3A267%2C%22height%22%3A17%2C%22text%22%3A%22%E4%B8%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9E%84(SDS)%2C%E7%BB%93%E5%90%88%E4%B8%89%22%7D%2C%7B%22x%22%3A736%2C%22y%22%3A269%2C%22width%22%3A178%2C%22height%22%3A15%2C%22text%22%3A%22%E5%8E%9F%E5%9B%A0(SDS%E5%92%8CC%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%BA%E5%88%AB)%22%7D%2C%7B%22x%22%3A199%2C%22y%22%3A283%2C%22width%22%3A268%2C%22height%22%3A16%2C%22text%22%3A%22%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%E5%AD%98%E5%82%A8%2CREDIS%204.X%E4%BB%A5%E4%B8%8A%22%7D%2C%7B%22x%22%3A201%2C%22y%22%3A300%2C%22width%22%3A271%2C%22height%22%3A17%2C%22text%22%3A%22%E5%BC%95%E5%85%A5%E4%BA%86SDSHDR%E5%8F%98%E7%A7%8D%2C%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E5%8A%A8%E6%80%81%E9%80%89%E6%8B%A9%E4%B8%8D%22%7D%2C%7B%22x%22%3A202%2C%22y%22%3A320%2C%22width%22%3A103%2C%22height%22%3A14%2C%22text%22%3A%22%E5%90%8C%E5%AE%9E%E7%8E%B0%2C%E4%BC%98%E5%8C%96%E5%86%85%E5%AD%98%22%7D%2C%7B%22x%22%3A681%2C%22y%22%3A323%2C%22width%22%3A29%2C%22height%22%3A14%2C%22text%22%3A%22SDS%22%7D%2C%7B%22x%22%3A152%2C%22y%22%3A373%2C%22width%22%3A56%2C%22height%22%3A15%2C%22text%22%3A%22%E5%BA%95%E5%B1%82%E4%BB%A3%E7%A0%81%3A%22%7D%2C%7B%22x%22%3A899%2C%22y%22%3A378%2C%22width%22%3A128%2C%22height%22%3A17%2C%22text%22%3A%22%E4%BB%A5%5C%5C0%E7%BB%93%E5%B0%BE%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%22%7D%2C%7B%22x%22%3A582%2C%22y%22%3A379%2C%22width%22%3A227%2C%22height%22%3A15%2C%22text%22%3A%22%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%2C%E5%8C%85%E5%90%AB%E9%95%BF%E5%BA%A6%2C%E5%88%86%E9%85%8D%E7%AD%89%E7%A9%BA%E9%97%B4%E4%BF%A1%E6%81%AF%22%7D%2C%7B%22x%22%3A344%2C%22y%22%3A400%2C%22width%22%3A60%2C%22height%22%3A10%2C%22text%22%3A%22)%20SDSHDR64%22%7D%2C%7B%22x%22%3A159%2C%22y%22%3A401%2C%22width%22%3A33%2C%22height%22%3A11%2C%22text%22%3A%22STRUCT%22%7D%2C%7B%22x%22%3A199%2C%22y%22%3A401%2C%22width%22%3A62%2C%22height%22%3A11%2C%22text%22%3A%22_ATTRIBUTE%22%7D%2C%7B%22x%22%3A269%2C%22y%22%3A402%2C%22width%22%3A86%2C%22height%22%3A11%2C%22text%22%3A%22((_PACKED_))%20S%22%7D%2C%7B%22x%22%3A178%2C%22y%22%3A418%2C%22width%22%3A85%2C%22height%22%3A11%2C%22text%22%3A%22UINT64_T%20LEN%3B%2F%22%7D%2C%7B%22x%22%3A257%2C%22y%22%3A418%2C%22width%22%3A47%2C%22height%22%3A9%2C%22text%22%3A%22%2F*USED%20*%22%7D%2C%7B%22x%22%3A620%2C%22y%22%3A433%2C%22width%22%3A150%2C%22height%22%3A15%2C%22text%22%3A%22%E7%8B%AC%E7%AB%8B%E8%AE%B0%E5%BD%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%2COO)%22%7D%2C%7B%22x%22%3A917%2C%22y%22%3A433%2C%22width%22%3A91%2C%22height%22%3A16%2C%22text%22%3A%22%E9%81%8D%E5%8E%86%E8%8E%B7%E5%BE%97%2CO(N)%22%7D%2C%7B%22x%22%3A181%2C%22y%22%3A433%2C%22width%22%3A331%2C%22height%22%3A14%2C%22text%22%3A%22UINT64.T%20ALLOC%3B%2F*%20EXCLUDING%20THE%20HEADER%20AND%20NUTL%20TERMINATOR%20*%2F%22%7D%2C%7B%22x%22%3A179%2C%22y%22%3A451%2C%22width%22%3A289%2C%22height%22%3A11%2C%22text%22%3A%22UNSIGNED%20CHAR%20FLAGS%3B%2F*%203%20LSB%20OF%20TYPE%2C%205%20UNUSED%20BITS%20*%2F%22%7D%2C%7B%22x%22%3A181%2C%22y%22%3A467%2C%22width%22%3A55%2C%22height%22%3A12%2C%22text%22%3A%22CHAR%20BUF%5B%5D%3B%22%7D%2C%7B%22x%22%3A848%2C%22y%22%3A487%2C%22width%22%3A228%2C%22height%22%3A16%2C%22text%22%3A%22%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BB%BB%E6%84%8F%E4%BA%8C%E8%BF%9B%E5%88%B6%2C%2F0%E6%84%8F%E5%91%B3%E7%9D%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9D%9F%22%7D%2C%7B%22x%22%3A563%2C%22y%22%3A488%2C%22width%22%3A155%2C%22height%22%3A15%2C%22text%22%3A%22%E6%94%AF%E6%8C%81%E4%BB%BB%E6%84%8F%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%AC%22%7D%2C%7B%22x%22%3A562%2C%22y%22%3A505%2C%22width%22%3A267%2C%22height%22%3A15%2C%22text%22%3A%22%E6%94%AF%E6%8C%81%E5%AD%98%E5%82%A8%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%2C%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E6%88%96%E5%85%B6%E4%BB%96%E8%87%AA%E5%AE%9A%E4%B9%89%22%7D%2C%7B%22x%22%3A848%2C%22y%22%3A506%2C%22width%22%3A167%2C%22height%22%3A15%2C%22text%22%3A%22%E4%BB%85%E6%94%AF%E6%8C%81%E6%98%93%2F0%E4%B8%BA%E7%BB%93%E5%B0%BE%E7%9A%84%E5%AD%97%E7%AC%A6%E5%BA%8F%E5%88%97%22%7D%2C%7B%22x%22%3A561%2C%22y%22%3A524%2C%22width%22%3A26%2C%22height%22%3A12%2C%22text%22%3A%22%E7%BB%93%E6%9E%84%22%7D%2C%7B%22x%22%3A200%2C%22y%22%3A538%2C%22width%22%3A175%2C%22height%22%3A15%2C%22text%22%3A%22LEN%3A%E8%AE%B0%E5%BD%95SDS%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6%22%7D%2C%7B%22x%22%3A199%2C%22y%22%3A556%2C%22width%22%3A273%2C%22height%22%3A16%2C%22text%22%3A%22ALLOC%3A%E6%8C%87%E6%98%8E%E5%88%86%E9%85%8D%E7%BB%99%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8%E7%9A%84%E7%A9%BA%E9%97%B4%E9%95%BF%E5%BA%A6%2C%E8%AE%A1%22%7D%2C%7B%22x%22%3A200%2C%22y%22%3A573%2C%22width%22%3A269%2C%22height%22%3A15%2C%22text%22%3A%22%E7%AE%97%E5%89%A9%E4%BD%99%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F%E4%B8%BAALLOC-LEN%2C%E8%A7%A3%E5%86%B3%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E9%97%AE%22%7D%2C%7B%22x%22%3A880%2C%22y%22%3A575%2C%22width%22%3A166%2C%22height%22%3A16%2C%22text%22%3A%22%E4%B8%8D%E8%83%BD%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%2C%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%22%7D%2C%7B%22x%22%3A645%2C%22y%22%3A578%2C%22width%22%3A100%2C%22height%22%3A13%2C%22text%22%3A%22%E8%87%AA%E5%8A%A8%E6%89%A9%E5%B1%95%E7%BC%A9%E5%87%8F%E5%86%85%E5%AD%98%22%7D%2C%7B%22x%22%3A200%2C%22y%22%3A592%2C%22width%22%3A27%2C%22height%22%3A12%2C%22text%22%3A%22%E9%A2%98%22%7D%2C%7B%22x%22%3A199%2C%22y%22%3A607%2C%22width%22%3A249%2C%22height%22%3A15%2C%22text%22%3A%22FLAGS%3A%E8%A1%A8%E7%A4%BASDS%E7%9A%84%E7%B1%BB%E5%9E%8B%2C%E4%B8%80%E5%85%B1%E4%BA%94%E4%B8%ADSDS%E7%B1%BB%E5%9E%8B%2C%22%7D%2C%7B%22x%22%3A200%2C%22y%22%3A626%2C%22width%22%3A254%2C%22height%22%3A14%2C%22text%22%3A%22SDSHDR5%2CSDSHDR8%2CSDSHDR16%2CSDSHDR32%2C%22%7D%2C%7B%22x%22%3A906%2C%22y%22%3A630%2C%22width%22%3A115%2C%22height%22%3A15%2C%22text%22%3A%22%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E8%A6%81%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A564%2C%22y%22%3A632%2C%22width%22%3A265%2C%22height%22%3A15%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%A2%84%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5%2C%E9%A2%84%E7%95%99%E9%A2%9D%E5%A4%96%E7%A9%BA%E9%97%B4%E5%87%8F%E5%B0%91%E6%89%A9%E5%B1%95%E6%97%B6%E5%86%85%E5%AD%98%22%7D%2C%7B%22x%22%3A199%2C%22y%22%3A643%2C%22width%22%3A192%2C%22height%22%3A14%2C%22text%22%3A%22SDSHDR64(%E4%B8%8D%E5%90%8C%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B%E7%BB%93%E6%9E%84%E4%BD%93)%22%7D%2C%7B%22x%22%3A564%2C%22y%22%3A651%2C%22width%22%3A77%2C%22height%22%3A12%2C%22text%22%3A%22%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E6%AC%A1%E6%95%B0%22%7D%2C%7B%22x%22%3A201%2C%22y%22%3A659%2C%22width%22%3A211%2C%22height%22%3A15%2C%22text%22%3A%22BUF%3A%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%2C%E4%BF%9D%E6%8A%A4%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A885%2C%22y%22%3A702%2C%22width%22%3A143%2C%22height%22%3A13%2C%22text%22%3A%22%E6%89%8B%E5%8A%A8%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%2C%E6%98%93%E6%9C%89%E7%A2%8E%E7%89%87%22%7D%2C%7B%22x%22%3A587%2C%22y%22%3A704%2C%22width%22%3A216%2C%22height%22%3A15%2C%22text%22%3A%22%E9%A2%84%E7%95%99%E7%A9%BA%E9%97%B4%E5%87%8F%E5%B0%91%E7%A2%8E%E7%89%87%2C%E7%BC%A9%E5%87%8F%E9%87%8A%E6%94%BE%E5%A4%9A%E4%BD%99%E5%86%85%E5%AD%98%22%7D%2C%7B%22x%22%3A886%2C%22y%22%3A719%2C%22width%22%3A153%2C%22height%22%3A15%2C%22text%22%3A%22%E6%B2%A1%E6%9C%89%E9%A2%84%E5%88%86%E9%85%8D%2C%E5%8F%AF%E8%83%BD%E8%8A%82%E7%9C%81%E5%86%85%E5%AD%98%22%7D%2C%7B%22x%22%3A587%2C%22y%22%3A720%2C%22width%22%3A119%2C%22height%22%3A16%2C%22text%22%3A%22%E5%B0%91%E9%87%8F%E6%B5%AA%E8%B4%B9%E9%A2%84%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%22%7D%2C%7B%22x%22%3A912%2C%22y%22%3A774%2C%22width%22%3A101%2C%22height%22%3A13%2C%22text%22%3A%22%E6%98%93%E8%B6%8A%E7%95%8C%E6%88%96%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%22%7D%2C%7B%22x%22%3A615%2C%22y%22%3A775%2C%22width%22%3A160%2C%22height%22%3A16%2C%22text%22%3A%22%E6%8F%90%E4%BE%9B%E4%B8%B0%E5%AF%8C%E5%AE%89%E5%85%A8%E7%9A%84API%E6%93%8D%E4%BD%9C%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A525%2C%22y%22%3A806%2C%22width%22%3A67%2C%22height%22%3A20%2C%22text%22%3A%22%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%22%7D%2C%7B%22x%22%3A544%2C%22y%22%3A895%2C%22width%22%3A91%2C%22height%22%3A18%2C%22text%22%3A%22EMBSTR%E7%BC%96%E7%A0%81%22%7D%2C%7B%22x%22%3A894%2C%22y%22%3A897%2C%22width%22%3A62%2C%22height%22%3A18%2C%22text%22%3A%22RAW%E7%BC%96%E7%A0%81%22%7D%2C%7B%22x%22%3A240%2C%22y%22%3A898%2C%22width%22%3A56%2C%22height%22%3A19%2C%22text%22%3A%22INT%E7%BC%96%E7%A0%81%22%7D%2C%7B%22x%22%3A483%2C%22y%22%3A976%2C%22width%22%3A259%2C%22height%22%3A18%2C%22text%22%3A%22%E6%9D%A1%E4%BB%B6%3A%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E6%AF%94%E8%BE%83%E7%9F%AD%2C%E5%B0%8F%E4%BA%8E44B%22%7D%2C%7B%22x%22%3A148%2C%22y%22%3A976%2C%22width%22%3A260%2C%22height%22%3A19%2C%22text%22%3A%22%E6%9D%A1%E4%BB%B6%3A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%AF%E4%BB%A5%E8%A2%AB%E8%A7%A3%E6%9E%90%E4%B8%BA%E6%95%B4%E6%95%B0%2C%E4%B8%94%22%7D%2C%7B%22x%22%3A805%2C%22y%22%3A981%2C%22width%22%3A194%2C%22height%22%3A19%2C%22text%22%3A%22%E6%9D%A1%E4%BB%B6%3A%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E8%B6%85%E8%BF%8744B%22%7D%2C%7B%22x%22%3A147%2C%22y%22%3A998%2C%22width%22%3A267%2C%22height%22%3A19%2C%22text%22%3A%22%E6%95%B4%E6%95%B0%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%B0%8F%2CREDIS%E4%BC%9A%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E8%AF%A5%22%7D%2C%7B%22x%22%3A483%2C%22y%22%3A998%2C%22width%22%3A262%2C%22height%22%3A17%2C%22text%22%3A%22%E8%AF%A5%E7%BC%96%E7%A0%81%E5%B0%86%E6%89%80%E6%9C%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E5%AD%97%22%7D%2C%7B%22x%22%3A805%2C%22y%22%3A1001%2C%22width%22%3A261%2C%22height%22%3A19%2C%22text%22%3A%22%E8%AF%A5%E7%BC%96%E7%A0%81%E5%B0%86%E6%89%80%E6%9C%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E5%AD%97%22%7D%2C%7B%22x%22%3A483%2C%22y%22%3A1019%2C%22width%22%3A257%2C%22height%22%3A18%2C%22text%22%3A%22%E7%AC%A6%E6%95%B0%E6%8D%AE%E6%94%BE%E5%9C%A8%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%9D%97%E4%B8%AD%2C%E5%8F%AA%E5%88%86%E9%85%8D%E4%B8%80%22%7D%2C%7B%22x%22%3A147%2C%22y%22%3A1021%2C%22width%22%3A33%2C%22height%22%3A16%2C%22text%22%3A%22%E7%BC%96%E7%A0%81%22%7D%2C%7B%22x%22%3A804%2C%22y%22%3A1024%2C%22width%22%3A119%2C%22height%22%3A19%2C%22text%22%3A%22%E7%AC%A6%E6%95%B0%E6%8D%AE%E5%88%86%E5%BC%80%E5%AD%98%E5%82%A8%22%7D%2C%7B%22x%22%3A482%2C%22y%22%3A1040%2C%22width%22%3A52%2C%22height%22%3A18%2C%22text%22%3A%22%E6%AC%A1%E5%86%85%E5%AD%98%22%7D%2C%7B%22x%22%3A148%2C%22y%22%3A1041%2C%22width%22%3A245%2C%22height%22%3A18%2C%22text%22%3A%22%E4%BC%98%E5%8A%BF%3A%E5%86%85%E5%AD%98%E6%B6%88%E8%80%97%E6%9C%80%E5%B0%8F%2C%E9%80%82%E5%90%88%E6%95%B0%E5%AD%97%E5%80%BC%22%7D%2C%7B%22x%22%3A804%2C%22y%22%3A1045%2C%22width%22%3A261%2C%22height%22%3A20%2C%22text%22%3A%22%E4%BC%98%E5%8A%BF%3A%E5%85%83%E6%95%B0%E6%8D%AE%E5%92%8C%E5%86%85%E5%AE%B9%E5%88%86%E5%BC%80%E5%AD%98%E5%82%A8%2C%E9%80%82%E5%90%88%22%7D%2C%7B%22x%22%3A483%2C%22y%22%3A1061%2C%22width%22%3A260%2C%22height%22%3A18%2C%22text%22%3A%22%E4%BC%98%E5%8A%BF%3A%E5%85%83%E6%95%B0%E6%8D%AE%E5%92%8C%E5%86%85%E5%AE%B9%E5%9C%A8%E5%90%8C%E4%B8%80%E5%9D%97%E5%86%85%E5%AD%98%E5%AD%98%22%7D%2C%7B%22x%22%3A805%2C%22y%22%3A1067%2C%22width%22%3A181%2C%22height%22%3A19%2C%22text%22%3A%22%E9%9C%80%E8%A6%81%E9%A2%91%E7%B9%81%E6%93%8D%E4%BD%9C%E7%9A%84%E5%A4%A7%E5%AD%97%E7%AC%A6%E4%B8%B2%22%7D%2C%7B%22x%22%3A482%2C%22y%22%3A1084%2C%22width%22%3A133%2C%22height%22%3A18%2C%22text%22%3A%22%E5%82%A8%2C%E9%80%82%E5%90%88%E8%AF%BB%E5%A4%9A%E5%86%99%E5%B0%91%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23faf6f2%22%2C%22id%22%3A%22u8bcad886%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h2 data-lake-id="UFd1i" id="UFd1i"><span data-lake-id="u99e67e19" id="u99e67e19">10.</span><span data-lake-id="ua5eaec68" id="ua5eaec68" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 中如何实现分布式锁？</span><span data-lake-id="uea339dc4" id="uea339dc4"><br /><br /></span></h2><p data-lake-id="u2f0229fb" id="u2f0229fb"><span data-lake-id="u302b219e" id="u302b219e">Redis中通常使用 set ex nx 命令 + lua 脚本的方式实现的，确保多个客户端不会获取同一个资源锁的同时也确保了安全解锁（锁不会被其他客户端释放）和异常状况下锁的自动释放。</span></p><p data-lake-id="ub009fcc2" id="ub009fcc2"><span data-lake-id="u574a0d49" id="u574a0d49" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">扩展知识<br /></span><span data-lake-id="ua4f7ecc0" id="ua4f7ecc0" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">如果基于 Redis 来实现分布锁，需要利用 set ex nx 命令 + lua 脚本。</span></p><ol list="udfa8f988"><li fid="u04062ae8" data-lake-id="u17b8d958" id="u17b8d958"><span data-lake-id="uf01c12ba" id="uf01c12ba" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">加锁: SET lock_key uniqueValue EX expire_time NX</span></li><li fid="u04062ae8" data-lake-id="u5aa2bf37" id="u5aa2bf37"><span data-lake-id="ud6afde1e" id="ud6afde1e" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">解锁: 使用 lua 脚本，先通过 get 获取 key 的 value 判断锁是否是自己加的，如果是则 del。<br /></span><span data-lake-id="uc7a20fae" id="uc7a20fae" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">lua脚本</span></li></ol><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22plain%22%2C%22code%22%3A%22if%20redis.call(%5C%22GET%5C%22%2CKEYS%5B1%5D)%20%3D%3D%20ARGV%5B1%5D%5Cnthen%5Cn%20%20%20%20return%20redis.call(%5C%22DEL%5C%22%2CKEYS%5B1%5D)%5Cnelse%5Cn%20%20%20%20return%200%5Cnend%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Atrue%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22aJlWq%22%7D"></card><p data-lake-id="u28582702" id="u28582702"><span data-lake-id="udd7118ee" id="udd7118ee" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">复制代码</span></p><h2 data-lake-id="nL2RM" id="nL2RM"><span data-lake-id="ua67b7e13" id="ua67b7e13" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">为什么锁需要设置唯一值?</span></h2><p data-lake-id="ub7a9ee8c" id="ub7a9ee8c"><span data-lake-id="ud83bb272" id="ud83bb272" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)"><br /></span><span data-lake-id="u8c692a40" id="u8c692a40" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">为了防止锁被其他客户端误释放。<br /></span><span data-lake-id="ua83eb6f0" id="ua83eb6f0" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">例如有以下场景:</span></p><ol list="ue16430cf"><li fid="ue3467fa1" data-lake-id="ue0ad9ea1" id="ue0ad9ea1"><span data-lake-id="u7b6b635e" id="u7b6b635e" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">客户端 1 加锁成功，然后执行业务逻辑，但执行的时间超过了锁的过期时间</span></li><li fid="ue3467fa1" data-lake-id="u2b622845" id="u2b622845"><span data-lake-id="ua14c2ad4" id="ua14c2ad4" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">此时锁已经过期被释放了，客户端 2 加锁成功</span></li><li fid="ue3467fa1" data-lake-id="u4f051570" id="u4f051570"><span data-lake-id="ub9fee3c7" id="ub9fee3c7" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">客户端 2 执行业务逻辑</span></li><li fid="ue3467fa1" data-lake-id="uaec37b83" id="uaec37b83"><span data-lake-id="u8146d718" id="u8146d718" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">客户端 1 执行完了，执行释放锁的逻辑，即删除锁。</span><span data-lake-id="uaf7ff6bb" id="uaf7ff6bb">客户端 2 表示很淦，执行的好好的锁没了。<br /></span><span data-lake-id="u4f3819a2" id="u4f3819a2">所以每个客户端加锁（客户端可能是每个线程），需要是设置一个唯一标识，比如一个 uuid，防止锁被别的客户端误释放了。</span></li></ol><h3 data-lake-id="aeFC0" id="aeFC0"><span data-lake-id="u6857808c" id="u6857808c" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">为什么释放锁需要 lua 脚本呢?</span></h3><p data-lake-id="ufeb329dd" id="ufeb329dd"><span data-lake-id="u76fc461c" id="u76fc461c" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">因为释放的过程需要判断该锁是否是自己加的，这是一次查询操作，如果是就删，不是就不删。如果直接使用 redis 命令，由于 redis 中这两个操作组合是不具备原子性的，会有问题。而 lua 脚本是具有原子性的。</span></p><h3 data-lake-id="Ttvyt" id="Ttvyt"><span data-lake-id="u58e96102" id="u58e96102" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">为什么锁需要设置过期时间?</span></h3><p data-lake-id="u8405ea2a" id="u8405ea2a"><span data-lake-id="udd233472" id="udd233472" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">假设某个客户端加了锁之后宕机了，锁没有设置过期机制，会使得其他客户端都无法抢到锁。也就是永远锁住了。</span></p><h3 data-lake-id="TfOVw" id="TfOVw"><span data-lake-id="u1be7b15e" id="u1be7b15e" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">单点故障问题</span></h3><p data-lake-id="u374d13be" id="u374d13be"><span data-lake-id="u8cb2916f" id="u8cb2916f" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">单台 Redis 实现分布式锁存在单点故障问题，如采用主从读写分离架构，如果一个客户端在主节点上锁成功，但是主节点突然宕机，由于主从延迟导致从节点还未同步到这个锁，此时可能有另一个客户端抢到新晋升的主节点，此时会导致两个客户端抢到锁，产生了数据不一致。<br /></span><span data-lake-id="uf9faab79" id="uf9faab79" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">基于这个情况，Redis 推出了 Redlock。<br /></span><span data-lake-id="ub2cdd0ba" id="ub2cdd0ba" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">关于 Redlock 可以移步:</span></p><h2 data-lake-id="dZkWy" id="dZkWy"><span data-lake-id="uee9fefb5" id="uee9fefb5">11.</span><span data-lake-id="u6d417907" id="u6d417907" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 的 Red Lock 是什么？你了解吗？</span></h2><h3 data-lake-id="iLro3" id="iLro3"><span data-lake-id="u9390fba8" id="u9390fba8" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">回答重点</span></h3><p data-lake-id="u7f3ecc67" id="u7f3ecc67"><span data-lake-id="u589a5301" id="u589a5301" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Red Lock，又称为红锁，是一种分布式锁的实现方案，旨在解决在分布式环境中使用 Redis 实现分布式锁时的安全性问题。<br /></span><span data-lake-id="u1e6766b3" id="u1e6766b3" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">一般情况下，我们在生产环境会使用主从 + 哨兵方式来部署 Redis。<br /></span><span data-lake-id="u9d78d3d3" id="u9d78d3d3" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">如果我们正在使用 redis 分布式锁，此时发生了主从切换，但从节点上不一定已经同步了主节点的锁信息。<br /></span><span data-lake-id="uc6d9f38c" id="uc6d9f38c" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">所以新的主节点上可能没有锁的信息。此时另一个业务去加锁，一看锁还没被占，于是抢到了锁开始执行业务逻辑。<br /></span><span data-lake-id="u3f3cfa1b" id="u3f3cfa1b" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">此时就发生了两个竞争者同时进入临界区操作临界资源的情况，可能就会发生数据不一致的问题。<br /></span><span data-lake-id="ue3070ae6" id="ue3070ae6" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">所以 Redis 官方推出了红锁，避免这种状况产生。它主要解决的问题就是当部分节点发生故障也不会影响锁的使用和数据问题的产生。</span></p><h3 data-lake-id="SA6Oo" id="SA6Oo"><span data-lake-id="u78649a76" id="u78649a76" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">扩展知识</span></h3><h4 data-lake-id="H5HyI" id="H5HyI"><span data-lake-id="uf40750ed" id="uf40750ed" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">红锁实现原理</span></h4><p data-lake-id="u7fe8f37c" id="u7fe8f37c"><span data-lake-id="ue4c23734" id="ue4c23734" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">首先要使用红锁需要集群部署 redis，官方推荐至少 5 个实例，不需要部署从库和哨兵，仅需主库。<br /></span><span data-lake-id="u78a76418" id="u78a76418" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">这 5 个实例（可以更多，我们按 5 个来讲述）之间没有任何关系（不同于 redis cluster），它们之间不需要任何信息交互。<br /></span><span data-lake-id="u11993c06" id="u11993c06" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">客户端会对这 5 个实例依次申请锁，如果最终申请成功的数量超过半数（&gt;=3），则表明红锁申请成功，反之失败。<br /></span><span data-lake-id="u3834dc63" id="u3834dc63" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">再来看下异常情况。假设有一台实例宕机了怎么办？实际上没任何影响，因为理论上能申请成功的数量可以达到 4，超过了半数。<br /></span><span data-lake-id="u9e2a5c83" id="u9e2a5c83" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">也因为没有主从机制，不会有同步丢失锁的问题。</span></p><h2 data-lake-id="rnJCW" id="rnJCW"><span data-lake-id="u0807f1ab" id="u0807f1ab" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">12.Redis 实现分布式锁时可能遇到的问题有哪些？</span></h2><h3 data-lake-id="rGSEN" id="rGSEN"><span data-lake-id="ub6441320" id="ub6441320" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">回答重点</span></h3><ol list="u8634c575"><li fid="udde6fd35" data-lake-id="u103db6f3" id="u103db6f3"><span data-lake-id="u33c834c6" id="u33c834c6" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">业务未执行完，锁已到期</span></li><li fid="udde6fd35" data-lake-id="u09c5d625" id="u09c5d625"><span data-lake-id="uc9d60d8a" id="uc9d60d8a" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">单点故障问题</span></li><li fid="udde6fd35" data-lake-id="u407f77cd" id="u407f77cd"><span data-lake-id="u3caf51cb" id="u3caf51cb" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">主从问题不同步问题</span></li><li fid="udde6fd35" data-lake-id="u4867a3aa" id="u4867a3aa"><span data-lake-id="uf3d3d8d9" id="uf3d3d8d9" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">网络分区问题</span></li><li fid="udde6fd35" data-lake-id="u955b44e4" id="u955b44e4"><span data-lake-id="u20a764cc" id="u20a764cc" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">时钟漂移问题</span></li><li fid="udde6fd35" data-lake-id="ufdcc67d5" id="ufdcc67d5"><span data-lake-id="ue5cc7a53" id="ue5cc7a53" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">锁的可重入性问题</span></li><li fid="udde6fd35" data-lake-id="uc45db4ee" id="uc45db4ee"><span data-lake-id="ubaa1618a" id="ubaa1618a" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">误释放锁问题</span></li></ol><h3 data-lake-id="J0Hmf" id="J0Hmf"><span data-lake-id="u48b8524a" id="u48b8524a" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">扩展知识</span></h3><h4 data-lake-id="PMgCe" id="PMgCe"><span data-lake-id="ufb936baf" id="ufb936baf" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">业务未执行完，锁已到期</span></h4><p data-lake-id="u03b2c4c4" id="u03b2c4c4"><span data-lake-id="u1ff241e6" id="u1ff241e6" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">为了避免持有锁的客户端崩溃或因网络问题断开连接时，锁无法被正常释放，需要给锁设置过期时间。<br /></span><span data-lake-id="ue1a6bea9" id="ue1a6bea9" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">那么就有可能出现业务还在执行，锁已到期的情况。<br /></span><span data-lake-id="u96651cd4" id="u96651cd4" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">可以设置一种续约机制（Redisson 中的看门狗机制），线程 a 在执行的时候，设置一个超时时间，并且启动一个守护线程，守护线程每隔一段时间就去判断线程 a 的执行情况，如果 a 还没有执行完毕并且 a 的时间快过期了，就重新设置一下超时时间，即继续续约。<br /></span><span data-lake-id="u7b62aa08" id="u7b62aa08" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">锁的过期时间的设置也需要好好评估一下。<br /></span><span data-lake-id="u7d47695f" id="u7d47695f" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">如果设置太长，业务结束了它还在阻塞的话，会影响 Redis 的性能。如果设置太短，就出现刚说的问题，因此要保证是设置一个合理的时间使得在大多数情况下任务能够在锁过期之前完成。</span></p><h3 data-lake-id="X4S85" id="X4S85"><span data-lake-id="ubc1455fc" id="ubc1455fc" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">单点故障问题</span></h3><p data-lake-id="ucc6b48cb" id="ucc6b48cb"><span data-lake-id="ucf37df81" id="ucf37df81" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">如果 Redis 单机部署，当实例宕机或不可用，整个分布式锁服务将无法正常工作，阻塞业务的正常执行。</span></p><h3 data-lake-id="NjCwU" id="NjCwU"><span data-lake-id="u4e1c6aaa" id="u4e1c6aaa" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">主从问题</span></h3><p data-lake-id="u36dfb6b4" id="u36dfb6b4"><span data-lake-id="u82c85dad" id="u82c85dad" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">如果线上 Redis 是主从 + 哨兵部署的，则分布式锁可能会有问题。<br /></span><span data-lake-id="ue4a4d044" id="ue4a4d044" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">因为 Redis 的主从复制过程是异步实现的，如果 Redis 主节点获取到锁之后，还没同步到其他的从节点，此时 Redis 主节点发生宕机了，这个时候新的主节点上没锁的数据，因此其他客户端可以获取锁，就会导致多个应用服务同时获取锁。</span></p><h3 data-lake-id="DeZ3P" id="DeZ3P"><span data-lake-id="ubf436d02" id="ubf436d02" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">网络分区</span></h3><p data-lake-id="u08544ca3" id="u08544ca3"><span data-lake-id="u88d9b0fb" id="u88d9b0fb" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">在网络不稳定的情况下，客户端与 Redis 之间的连接可能中断，如果未设置锁的过期时间，可能会导致锁无法正常释放。如果有多个锁，还可能引发锁的死锁情况。</span></p><h3 data-lake-id="MOwWb" id="MOwWb"><span data-lake-id="u515c1bac" id="u515c1bac" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">时钟漂移</span></h3><p data-lake-id="uc597032e" id="uc597032e"><span data-lake-id="ub6dce663" id="ub6dce663" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">因为 Redis 分布式锁依赖于实例的时间来判断是否过期，如果时钟出现漂移，很可能导致锁直接失效。<br /></span><span data-lake-id="u4b309831" id="u4b309831" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">可以让所有节点的系统时钟通过 NTP 服务进行同步，减少时钟漂移的影响。</span></p><h2 data-lake-id="HECBI" id="HECBI"><span data-lake-id="u11084b57" id="u11084b57" style="color: rgba(0, 0, 0, 0.88)">13.</span><span data-lake-id="u28c24f25" id="u28c24f25" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 的持久化机制有哪些？</span><span data-lake-id="ucb645c06" id="ucb645c06">Redis 提供两种主要的持久化机制：</span></h2><p data-lake-id="u8b326c89" id="u8b326c89"><span data-lake-id="ub9c8f35b" id="ub9c8f35b" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">RDB (Redis Database) 快照：</span></p><ul list="ub7c15450"><li fid="u1b04dc02" data-lake-id="u1a581f60" id="u1a581f60"><span data-lake-id="ue5ff5f24" id="ue5ff5f24" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">RDB 是通过生成某一时刻的数据快照来实现持久化的，可以在特定时间间隔内保存数据的快照。</span></li><li fid="u1b04dc02" data-lake-id="u5f28f16f" id="u5f28f16f"><span data-lake-id="u8b10bd84" id="u8b10bd84" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">适合灾难恢复和备份，能生成紧凑的二进制文件，但可能会在崩溃时丢失最后一次快照之后的数据。</span></li></ul><p data-lake-id="u47bf4201" id="u47bf4201"><span data-lake-id="u7ccb6cb8" id="u7ccb6cb8" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">AOF (Append Only File) 日志：</span></p><ul list="u4f3b13b8"><li fid="ue4aa8250" data-lake-id="u5b3dd04f" id="u5b3dd04f"><span data-lake-id="u570e2b53" id="u570e2b53" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">AOF 通过将每个写操作追加到日志文件中实现持久化，支持将所有写操作记录下来以便恢复。 </span></li><li fid="ue4aa8250" data-lake-id="u0bd284e0" id="u0bd284e0"><span data-lake-id="u417510ee" id="u417510ee" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">数据恢复更为精确，但文件体积较大，重写时可能会消耗更多资源。</span></li></ul><p data-lake-id="u11a8fc5d" id="u11a8fc5d"><span data-lake-id="ubcb28292" id="ubcb28292" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 4.0 新增了 RDB 和 AOF 的混合持久化机制。</span></p><h3 data-lake-id="l0dMn" id="l0dMn"><span data-lake-id="u00810d80" id="u00810d80">混合持久化</span></h3><p data-lake-id="uafa8dc81" id="uafa8dc81"><span data-lake-id="u573aede6" id="u573aede6">RDB 和 AOF 都有各自的缺点。<br /></span><span data-lake-id="u02c461a1" id="u02c461a1">如果 RDB 备份的频率低，那么丢的数据多。备份的频率高，性能影响大。<br /></span><span data-lake-id="u65cdf76b" id="u65cdf76b">AOF 文件虽然丢数据比较少，但是恢复起来又比较耗时。<br /></span><span data-lake-id="u33924c3a" id="u33924c3a">因此 Redis 4.0 以后引入了混合持久化，通过 aof - use - rdb - preamble 配置开启混合持久化。<br /></span><span data-lake-id="u886f9fd1" id="u886f9fd1">当 AOF 重写的时候（注意混合持久化是在 aof 重写时触发的）。它会先生成当前时间的 RDB 快照，将其写入新的 AOF 文件头部位置。<br /></span><span data-lake-id="u7811d58b" id="u7811d58b">这段时间主线程处理的操作命令会记录在重写缓冲区中，RDB 写入完毕后将这里的增量数据追加到这个新 AOF 文件中，最后再用新 AOF 文件替换旧 AOF 文件。<br /></span><span data-lake-id="u58826b1f" id="u58826b1f">如此一来，当 Redis 通过 AOF 文件恢复数据时，会先加载 RDB，然后再重新执行指令恢复后半部分的增量数据，这样就可以大幅度提高数据恢复的速度！</span></p><h2 data-lake-id="eQ7uK" id="eQ7uK"><span data-lake-id="u68f42cc2" id="u68f42cc2" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">14.Redis 主从复制的实现原理是什么</span><span data-lake-id="udbc5ec73" id="udbc5ec73">Redis 的主从复制是指一个 Redis 实例（主节点）可以将数据复制到一个或多个从节点（从节点），从节点从主节点获取数据并保持同步。</span></h2><p data-lake-id="u1665f4f9" id="u1665f4f9"><span data-lake-id="ue1230b4e" id="ue1230b4e" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">复制流程：</span></p><ul list="ueff59830"><li fid="u9e2e24a4" data-lake-id="u0dcebae6" id="u0dcebae6"><strong><span data-lake-id="ud49f2699" id="ud49f2699">开始同步</span></strong><span data-lake-id="u7e930d68" id="u7e930d68" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：从节点通过向主节点发送 PSYNC 命令发起同步。</span></li><li fid="u9e2e24a4" data-lake-id="u8532d544" id="u8532d544"><strong><span data-lake-id="u0e2b916a" id="u0e2b916a">全量复制</span></strong><span data-lake-id="ua9d9f961" id="ua9d9f961" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：如果是第一次连接或之前的连接失效，从节点会请求全量复制，主节点将当前数据快照（RDB文件）发送给从节点。 </span></li><li fid="u9e2e24a4" data-lake-id="u3cc864f8" id="u3cc864f8"><strong><span data-lake-id="u8f1d27d4" id="u8f1d27d4">增量复制</span></strong><span data-lake-id="ucb71f4d8" id="ucb71f4d8" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：全量复制完毕后，主从之间会保持一个长连接，主节点会通过这个连接将后续的写操作传递给从节点执行，来保证数据的一致。</span></li><li fid="u9e2e24a4" data-lake-id="u10ad05ba" id="u10ad05ba"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744598015074-4450daf1-9d72-450f-b1d9-9779da942f61.png%22%2C%22taskId%22%3A%22uae80e09a-910c-4126-a63d-193060fea06%22%2C%22clientId%22%3A%22u5d6fa168-11be-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A768.6666666666666%2C%22height%22%3A743%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A243641%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1153%2C%22originHeight%22%3A1114%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%AE%A2%E6%88%B7%E7%AB%AF%20%E5%86%99%E8%AF%B7%E6%B1%82%20%E8%AF%BB%E8%AF%B7%E6%B1%82%20%E8%AF%BB%E8%AF%B7%E6%B1%82%20REDIS%E4%B8%BB%20%E5%A4%8D%E5%88%B6%20%E5%A4%8D%E5%88%B6%20REDIS%E4%BB%8E%20REDIS%E4%BB%8E%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A498%2C%22y%22%3A107%2C%22width%22%3A148%2C%22height%22%3A50%2C%22text%22%3A%22%E5%AE%A2%E6%88%B7%E7%AB%AF%22%7D%2C%7B%22x%22%3A595%2C%22y%22%3A363%2C%22width%22%3A143%2C%22height%22%3A50%2C%22text%22%3A%22%E5%86%99%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A899%2C%22y%22%3A417%2C%22width%22%3A149%2C%22height%22%3A50%2C%22text%22%3A%22%E8%AF%BB%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A106%2C%22y%22%3A417%2C%22width%22%3A152%2C%22height%22%3A50%2C%22text%22%3A%22%E8%AF%BB%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A500%2C%22y%22%3A580%2C%22width%22%3A161%2C%22height%22%3A47%2C%22text%22%3A%22REDIS%E4%B8%BB%22%7D%2C%7B%22x%22%3A813%2C%22y%22%3A724%2C%22width%22%3A95%2C%22height%22%3A48%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%22%7D%2C%7B%22x%22%3A247%2C%22y%22%3A742%2C%22width%22%3A94%2C%22height%22%3A46%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%22%7D%2C%7B%22x%22%3A138%2C%22y%22%3A964%2C%22width%22%3A166%2C%22height%22%3A55%2C%22text%22%3A%22REDIS%E4%BB%8E%22%7D%2C%7B%22x%22%3A873%2C%22y%22%3A974%2C%22width%22%3A168%2C%22height%22%3A57%2C%22text%22%3A%22REDIS%E4%BB%8E%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f7f2%22%2C%22id%22%3A%22u6534b4db%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></li><li fid="u9e2e24a4" data-lake-id="u9919162c" id="u9919162c"><span data-lake-id="u4b0bd4e8" id="u4b0bd4e8" style="color: rgb(28, 31, 35)">整个主从集群仅主节点可以写入，其它从节点都通过复制来同步数据，这样就能保证数据的一致性。并且对读请求分散到多个节点，提高了 Redis 的吞吐量，从一定程度上也提高了 Redis 的可用性。 </span></li></ul><h3 data-lake-id="gDTnP" id="gDTnP"><span data-lake-id="u2f7a0cfd" id="u2f7a0cfd">全量同步</span></h3><p data-lake-id="u3dbfdc9b" id="u3dbfdc9b"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744598155607-1b6a6ca7-6c0c-4347-8ae8-ba6c222ec4e6.png%22%2C%22taskId%22%3A%22u9b314863-87b0-4d8b-92a1-f6ab4514471%22%2C%22clientId%22%3A%22u5d6fa168-11be-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1032.6666666666667%2C%22height%22%3A758%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A470013%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1549%2C%22originHeight%22%3A1137%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22searchocrLocations%22%3A%5B%7B%22x%22%3A177%2C%22y%22%3A44%2C%22width%22%3A148%2C%22height%22%3A52%2C%22text%22%3A%22%E4%B8%BB%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A1178%2C%22y%22%3A57%2C%22width%22%3A142%2C%22height%22%3A48%2C%22text%22%3A%22%E4%BB%8E%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A570%2C%22y%22%3A117%2C%22width%22%3A225%2C%22height%22%3A47%2C%22text%22%3A%22PSYNC%3F-1%22%7D%2C%7B%22x%22%3A1103%2C%22y%22%3A281%2C%22width%22%3A269%2C%22height%22%3A50%2C%22text%22%3A%22%E5%AD%98%E5%82%A8RUNID%22%7D%2C%7B%22x%22%3A439%2C%22y%22%3A288%2C%22width%22%3A429%2C%22height%22%3A50%2C%22text%22%3A%22FULLRESYNC%20RUNID%22%7D%2C%7B%22x%22%3A890%2C%22y%22%3A291%2C%22width%22%3A158%2C%22height%22%3A39%2C%22text%22%3A%22OFFSET%22%7D%2C%7B%22x%22%3A1130%2C%22y%22%3A347%2C%22width%22%3A157%2C%22height%22%3A42%2C%22text%22%3A%22OFFSET%22%7D%2C%7B%22x%22%3A108%2C%22y%22%3A437%2C%22width%22%3A283%2C%22height%22%3A56%2C%22text%22%3A%22%E6%89%A7%E8%A1%8CBGSAVE%22%7D%2C%7B%22x%22%3A597%2C%22y%22%3A624%2C%22width%22%3A194%2C%22height%22%3A55%2C%22text%22%3A%22%E4%BC%A0%E8%BE%93RDB%22%7D%2C%7B%22x%22%3A1094%2C%22y%22%3A668%2C%22width%22%3A294%2C%22height%22%3A57%2C%22text%22%3A%22%E6%B8%85%E7%A9%BA%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A1093%2C%22y%22%3A734%2C%22width%22%3A206%2C%22height%22%3A52%2C%22text%22%3A%22%E5%8A%A0%E8%BD%BDRDB%22%7D%2C%7B%22x%22%3A158%2C%22y%22%3A774%2C%22width%22%3A191%2C%22height%22%3A50%2C%22text%22%3A%22%E7%BC%93%E5%AD%98%E7%9A%84%E6%96%B0%22%7D%2C%7B%22x%22%3A654%2C%22y%22%3A780%2C%22width%22%3A199%2C%22height%22%3A51%2C%22text%22%3A%22%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%AF%95%22%7D%2C%7B%22x%22%3A156%2C%22y%22%3A831%2C%22width%22%3A193%2C%22height%22%3A52%2C%22text%22%3A%22%E5%86%99%E5%85%A5%E5%91%BD%E4%BB%A4%22%7D%2C%7B%22x%22%3A143%2C%22y%22%3A897%2C%22width%22%3A219%2C%22height%22%3A54%2C%22text%22%3A%22REPLICAT%22%7D%2C%7B%22x%22%3A502%2C%22y%22%3A961%2C%22width%22%3A482%2C%22height%22%3A47%2C%22text%22%3A%22%E5%90%8C%E6%AD%A5%E7%BC%93%E5%AD%98%E7%9A%84%E6%96%B0%E7%9A%84%E5%86%99%E6%93%8D%E4%BD%9C%22%7D%2C%7B%22x%22%3A200%2C%22y%22%3A963%2C%22width%22%3A81%2C%22height%22%3A39%2C%22text%22%3A%22ION%22%7D%2C%7B%22x%22%3A1085%2C%22y%22%3A987%2C%22width%22%3A294%2C%22height%22%3A50%2C%22text%22%3A%22%E6%89%A7%E8%A1%8C%E5%86%99%E5%85%A5%E5%91%BD%E4%BB%A4%22%7D%2C%7B%22x%22%3A170%2C%22y%22%3A1019%2C%22width%22%3A161%2C%22height%22%3A45%2C%22text%22%3A%22BUFFER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2382807b%22%2C%22id%22%3A%22uedfc82a8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><ul list="u563e1654"><li fid="u2c62999f" data-lake-id="u66dccc70" id="u66dccc70"><span data-lake-id="u24fb7732" id="u24fb7732">runid 指的是主服务器的 run ID，从节点第一次同步不知道主节点 ID，于是传递 &quot;?&quot;。</span></li><li fid="u2c62999f" data-lake-id="u659a423c" id="u659a423c"><span data-lake-id="uca09cad9" id="uca09cad9">offset 为复制进度，第一次同步值为 -1。</span></li></ul><p data-lake-id="u9df1b6f7" id="u9df1b6f7"><span data-lake-id="u2b918fd4" id="u2b918fd4">文字版本的流程：</span></p><ul list="ua137ddf2"><li fid="u397306e6" data-lake-id="u07107c23" id="u07107c23"><span data-lake-id="u051052b8" id="u051052b8">从节点发送 psync ？ -1 ，触发同步。</span></li><li fid="u397306e6" data-lake-id="u55943878" id="u55943878"><span data-lake-id="ud9a38fd1" id="ud9a38fd1">主节点收到从节点的 psync 命令之后，发现 runid 没值，判断是全量同步，返回 fullresync 并带上主服务器的 runid 和当前复制进度，从服务器会存储这两个值。 </span></li><li fid="u397306e6" data-lake-id="u2ca8778e" id="u2ca8778e"><span data-lake-id="ueecb7a24" id="ueecb7a24">主节点执行 bgsave 生成 RDB 文件，在 RDB 文件生成过程中，主节点新接收到的写入数据的命令会存储到 replication buffer 中。 </span></li><li fid="u397306e6" data-lake-id="u2217b9b1" id="u2217b9b1"><span data-lake-id="udc87f4c3" id="udc87f4c3">RDB 文件生成完毕后，主节点将其发送给从节点，从节点清空旧数据，加载 RDB 的数据。 </span></li><li fid="u397306e6" data-lake-id="u6efe16de" id="u6efe16de"><span data-lake-id="u6b350c98" id="u6b350c98">等到从节点中 RDB 文件加载完成之后，主节点将 replication buffer 缓存的数据发送给从节点，从节点执行命令，保证数据的一致性。</span></li></ul><p data-lake-id="uf9fc9d33" id="uf9fc9d33"><span data-lake-id="u80484a7e" id="u80484a7e">待同步完毕后，主从之间会保持一个长连接，主节点会通过这个连接将后续的写操作传递给从节点执行，来保证数据的一致。</span></p><h3 data-lake-id="wFMl8" id="wFMl8"><span data-lake-id="u028edd31" id="u028edd31">增量同步</span></h3><p data-lake-id="uac80c8d7" id="uac80c8d7"><span data-lake-id="u99b2f461" id="u99b2f461">主从之间的网络可能不稳定，如果连接断开，主节点部分写操作未传递给从节点执行，主从数据就不一致了。</span></p><p data-lake-id="ue99ee34d" id="ue99ee34d"><span data-lake-id="ud3b2de4c" id="ud3b2de4c">此时有一种选择是再次发起全量同步，但是全量同步数据量比较大，非常耗时。因此 Redis 在 2.8 版本引入了增量同步（psync 其实就是 2.8 引入的命令），仅需把连接断开其间的数据同步给从节点就好了。</span></p><p data-lake-id="u7090a0e3" id="u7090a0e3"><span data-lake-id="udf2cc6b2" id="udf2cc6b2">此时需要介绍下 repl_backlog_buffer 。</span></p><p data-lake-id="u4facb913" id="u4facb913"><span data-lake-id="u8835ecd4" id="u8835ecd4">repl_backlog_buffer 是一个环形缓冲区，默认大小为 1m。主节点会将写入命令存到这个缓冲区中，但是大小有限，待写入的命令超过 1m 后，会覆盖之前的数据，因为是环形写入。</span></p><p data-lake-id="uf1213755" id="uf1213755"><span data-lake-id="ub6486e55" id="ub6486e55">增量同步也是 psync 命令，如果主节点判断从节点传递的 runid 和主节点一致，且根据 offset 判断数据还在 repl_backlog_buffer 中，则说明可以进行增量同步。</span></p><p data-lake-id="u6f689efa" id="u6f689efa"><span data-lake-id="udf289f96" id="udf289f96">于是就去 repl_backlog_buffer 查找对应 offset 之后的命令数据，写入到 replication buffer 中，最终将其发送给 slave 节点。slave 节点收到指令之后执行对应的命令，一次增量同步的过程就完成了。</span></p><p data-lake-id="u5d19d111" id="u5d19d111"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744598313811-35196d78-3b15-481e-ae0e-96f2af64f39a.png%22%2C%22taskId%22%3A%22u756a3a41-d82a-4f89-beed-ebc35b6d6fe%22%2C%22clientId%22%3A%22u5d6fa168-11be-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1052.6666666666667%2C%22height%22%3A766%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A356443%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1579%2C%22originHeight%22%3A1149%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%BB%E8%8A%82%E7%82%B9%20%E4%BB%8E%E8%8A%82%E7%82%B9%20PSYNCRUNID(%E4%B8%BB%E8%8A%82%E7%82%B9%E7%9A%84%20RUNID)233%20ID%20%E4%B8%80%E8%87%B4%20RUN%20%E5%8C%85%E5%90%AB%20OFFSET%20CONTINUE%20REPL_BAC%20KLOG-BUF%20FER%20%E9%80%9A%E8%BF%87OFFSET%E5%AE%9A%E4%BD%8D%2C%E4%BC%A0%E9%80%92%E5%86%99%E5%91%BD%E4%BB%A4%20REPLICAT%20%E5%90%8C%E6%AD%A5%E7%BC%93%E5%AD%98%E7%9A%84%E6%96%B0%E7%9A%84%E5%86%99%E6%93%8D%E4%BD%9C%20ION%20%E6%89%A7%E8%A1%8C%E5%86%99%E5%85%A5%E5%91%BD%E4%BB%A4%20BUFFER%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A294%2C%22y%22%3A18%2C%22width%22%3A124%2C%22height%22%3A44%2C%22text%22%3A%22%E4%B8%BB%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A1243%2C%22y%22%3A30%2C%22width%22%3A121%2C%22height%22%3A40%2C%22text%22%3A%22%E4%BB%8E%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A523%2C%22y%22%3A84%2C%22width%22%3A399%2C%22height%22%3A45%2C%22text%22%3A%22PSYNCRUNID(%E4%B8%BB%E8%8A%82%E7%82%B9%E7%9A%84%22%7D%2C%7B%22x%22%3A939%2C%22y%22%3A89%2C%22width%22%3A185%2C%22height%22%3A31%2C%22text%22%3A%22RUNID)233%22%7D%2C%7B%22x%22%3A329%2C%22y%22%3A193%2C%22width%22%3A156%2C%22height%22%3A42%2C%22text%22%3A%22ID%20%E4%B8%80%E8%87%B4%22%7D%2C%7B%22x%22%3A240%2C%22y%22%3A206%2C%22width%22%3A67%2C%22height%22%3A26%2C%22text%22%3A%22RUN%22%7D%2C%7B%22x%22%3A403%2C%22y%22%3A245%2C%22width%22%3A77%2C%22height%22%3A42%2C%22text%22%3A%22%E5%8C%85%E5%90%AB%22%7D%2C%7B%22x%22%3A239%2C%22y%22%3A250%2C%22width%22%3A141%2C%22height%22%3A35%2C%22text%22%3A%22OFFSET%22%7D%2C%7B%22x%22%3A682%2C%22y%22%3A274%2C%22width%22%3A187%2C%22height%22%3A35%2C%22text%22%3A%22CONTINUE%22%7D%2C%7B%22x%22%3A263%2C%22y%22%3A417%2C%22width%22%3A186%2C%22height%22%3A40%2C%22text%22%3A%22REPL_BAC%22%7D%2C%7B%22x%22%3A262%2C%22y%22%3A466%2C%22width%22%3A187%2C%22height%22%3A43%2C%22text%22%3A%22KLOG-BUF%22%7D%2C%7B%22x%22%3A321%2C%22y%22%3A522%2C%22width%22%3A68%2C%22height%22%3A34%2C%22text%22%3A%22FER%22%7D%2C%7B%22x%22%3A24%2C%22y%22%3A699%2C%22width%22%3A531%2C%22height%22%3A45%2C%22text%22%3A%22%E9%80%9A%E8%BF%87OFFSET%E5%AE%9A%E4%BD%8D%2C%E4%BC%A0%E9%80%92%E5%86%99%E5%91%BD%E4%BB%A4%22%7D%2C%7B%22x%22%3A266%2C%22y%22%3A900%2C%22width%22%3A187%2C%22height%22%3A49%2C%22text%22%3A%22REPLICAT%22%7D%2C%7B%22x%22%3A597%2C%22y%22%3A945%2C%22width%22%3A416%2C%22height%22%3A43%2C%22text%22%3A%22%E5%90%8C%E6%AD%A5%E7%BC%93%E5%AD%98%E7%9A%84%E6%96%B0%E7%9A%84%E5%86%99%E6%93%8D%E4%BD%9C%22%7D%2C%7B%22x%22%3A314%2C%22y%22%3A959%2C%22width%22%3A71%2C%22height%22%3A32%2C%22text%22%3A%22ION%22%7D%2C%7B%22x%22%3A1165%2C%22y%22%3A991%2C%22width%22%3A251%2C%22height%22%3A43%2C%22text%22%3A%22%E6%89%A7%E8%A1%8C%E5%86%99%E5%85%A5%E5%91%BD%E4%BB%A4%22%7D%2C%7B%22x%22%3A290%2C%22y%22%3A1010%2C%22width%22%3A138%2C%22height%22%3A34%2C%22text%22%3A%22BUFFER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23decf8b%22%2C%22id%22%3A%22u5def6f2b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u8644329f" id="u8644329f"><span data-lake-id="u13ea7e06" id="u13ea7e06" style="color: rgb(31, 35, 41)">如果根据 offset 判断数据已经被覆盖了，此时只能触发全量同步！ 因此可以调整 repl_backlog_buffer 大小，尽量避免出现全量同步。</span></p><h3 data-lake-id="xFbqR" id="xFbqR"><span data-lake-id="u800ba39c" id="u800ba39c" style="color: rgb(31, 35, 41)">replication buffer 和 repl_backlog_buffer 的区别</span></h3><p data-lake-id="u7fcd3759" id="u7fcd3759"><span data-lake-id="ue72550c9" id="ue72550c9" style="color: rgb(31, 35, 41)"> replication buffer 因为不同的从节点同步速度不一样，主节点会为每个从节点都创建一个 replication buffer，它用于实时传输写命令，且大小是动态的，因为对于同步速度较慢的从服务器，需要更多的内存来缓存数据。 虽说 replication buffer 没有明确的大小限制，但是可以通过 client-output-buffer-limit 间接控制，该参数可以设置不同类型客户端（普通、从服务器、发布订阅）的输出缓冲区限制。当缓冲区大小超过限制时，Redis 会断开与客户端（从节点其实就是一个客户端）的连接。</span></p><p data-lake-id="u2653b708" id="u2653b708"><span data-lake-id="u5d48f896" id="u5d48f896" style="color: rgb(31, 35, 41)"> client-output-buffer-limit slave 256mb 64mb 60 </span></p><p data-lake-id="u00758ada" id="u00758ada"><span data-lake-id="u04d80bb2" id="u04d80bb2" style="color: rgb(31, 35, 41)">上述配置表示，如果从服务器的输出缓冲区大小超过 256 MB 或超过 64 MB 的时间达到 60s，Redis 将断开与从服务器的连接。 </span></p><p data-lake-id="ub1f84fff" id="ub1f84fff"><span data-lake-id="u48821215" id="u48821215" style="color: rgb(31, 35, 41)">repl_backlog_buffer repl_backlog_buffer 在主节点上只有一个，存储最近的写命令，用于从服务器重新连接时进行部分重同步。 </span></p><p data-lake-id="u909028a1" id="u909028a1"><span data-lake-id="u8da498ca" id="u8da498ca">​</span><br></p><h2 data-lake-id="fmEOP" id="fmEOP"><span data-lake-id="u0304e2d5" id="u0304e2d5" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">15.Redis 数据过期后的删除策略是什么？</span></h2><h3 data-lake-id="zaMXC" id="zaMXC"><span data-lake-id="u96c5cf3a" id="u96c5cf3a" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">回答重点</span></h3><p data-lake-id="ua54f91f0" id="ua54f91f0"><span data-lake-id="ua47a6db0" id="ua47a6db0" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 数据过期主要有两种删除策略，分别为定期删除、惰性删除两种：</span></p><ul list="u3409cc8a"><li fid="ue9f4b0a6" data-lake-id="u9dbd7218" id="u9dbd7218"><strong><span data-lake-id="u8a417ba6" id="u8a417ba6">定期删除</span></strong><span data-lake-id="u2f2a80d6" id="u2f2a80d6" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：Redis 每隔一定时间（默认是 100 毫秒）会随机检查一定数量的键，如果发现过期键，则将其删除。这种方式能够在后台持续清理过期数据，防止内存膨胀。</span></li><li fid="ue9f4b0a6" data-lake-id="u5c816685" id="u5c816685"><strong><span data-lake-id="ubd263545" id="ubd263545">惰性删除</span></strong><span data-lake-id="u53368862" id="u53368862" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：在每次访问键时，Redis 检查该键是否已过期，如果已过期，则将其删除。这种策略保证了在使用过程中只删除不再需要的数据，但在不访问过期键时不会立即清除。</span></li></ul><h3 data-lake-id="BrXz5" id="BrXz5"><span data-lake-id="ucb1f8919" id="ucb1f8919" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">扩展知识</span></h3><h4 data-lake-id="SzgEE" id="SzgEE"><span data-lake-id="ue39363c8" id="ue39363c8" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">定期删除细节</span></h4><p data-lake-id="u9b97d048" id="u9b97d048"><span data-lake-id="ubb94b5b6" id="ubb94b5b6" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">定期删除策略是 Redis 内部的一个定时任务，周期性（每 100ms）地扫描一些设置了过期时间的键。<br /></span><span data-lake-id="u01175f19" id="u01175f19" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">要注意，Redis 并不会一次性扫描所有设置了过期时间的键，因为这样会消耗大量的 CPU 资源。它会在每次扫描时限制扫描的时间和数量，以避免对性能产生过大的影响，因此可能会有部分键过期了没有被及时删除。<br /></span><span data-lake-id="u957b4698" id="u957b4698" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">每次获取 20 个 key 判断是否过期，如果发现过期的 key 占比超过 25% 则继续再拉 20 个，如果小于 25% 则停止。这里还有一个时间限制，即一次删除时间不超过 25ms，即如果发现占比超过 25% 的时候，需要判断目前是否已经花了 25ms，如果已经用了这么多长也会结束。</span></p><h4 data-lake-id="FbmTG" id="FbmTG"><span data-lake-id="u9807776a" id="u9807776a" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">惰性删除优缺点</span></h4><ul list="ua5954be7"><li fid="u647a93d0" data-lake-id="u86b35d05" id="u86b35d05"><strong><span data-lake-id="ua54bc4a1" id="ua54bc4a1">优点</span></strong><span data-lake-id="uc7adfda7" id="uc7adfda7" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：可以减少 CPU 的占用，因为只有查询到了相关的数据才执行删除操作，不需要主动去定时删除。</span></li><li fid="u647a93d0" data-lake-id="u469bef85" id="u469bef85"><strong><span data-lake-id="uc2c0db7c" id="uc2c0db7c">缺点</span></strong><span data-lake-id="ud3aa43eb" id="ud3aa43eb" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：如果一直没有查询一个 Key，就有可能不会被删除，这样就容易造成内存泄漏问题。</span></li></ul><h3 data-lake-id="tZcZX" id="tZcZX"><span data-lake-id="u7646a019" id="u7646a019">内存回收机制</span></h3><p data-lake-id="u74236d51" id="u74236d51"><span data-lake-id="u276f357d" id="u276f357d">实际上，除了这两个删除，还有一个机制也会淘汰 key，即当 Redis 内存使用达到设置的 maxmemory 限制时，会触发内存回收机制。<br /></span><span data-lake-id="u543498b7" id="u543498b7">此时会主动删除一些过期键和其他不需要的键，以释放内存。具体的删除策略有以下几种：</span></p><ul list="u0d3646e1"><li fid="ufd48ec80" data-lake-id="u67e649b8" id="u67e649b8"><span data-lake-id="u28bc4013" id="u28bc4013">volatile-lru：从设置了过期时间的键中使用 LRU（Least Recently Used，最近最少使用）算法删除键。</span></li><li fid="ufd48ec80" data-lake-id="uf2ecff33" id="uf2ecff33"><span data-lake-id="u3ac1a290" id="u3ac1a290">allkeys-lru：从所有键中使用 LRU 算法删除键。 </span></li><li fid="ufd48ec80" data-lake-id="u09494356" id="u09494356"><span data-lake-id="ud7dc882b" id="ud7dc882b">volatile-lfu：从设置了过期时间的键中使用 LFU（Least Frequently Used，最少使用频率）算法删除键。 </span></li><li fid="ufd48ec80" data-lake-id="u15ecb21a" id="u15ecb21a"><span data-lake-id="u112aa472" id="u112aa472">allkeys-lfu：从所有键中使用 LFU 算法删除键。 </span></li><li fid="ufd48ec80" data-lake-id="u91322bbc" id="u91322bbc"><span data-lake-id="uade21883" id="uade21883">volatile-random：从设置了过期时间的键中随机删除键。 </span></li><li fid="ufd48ec80" data-lake-id="uc263d63a" id="uc263d63a"><span data-lake-id="ucc17d029" id="ucc17d029">allkeys-random：从所有键中随机删除键。 </span></li><li fid="ufd48ec80" data-lake-id="u6cbc56ed" id="u6cbc56ed"><span data-lake-id="u6eca8b31" id="u6eca8b31">volatile-ttl：从设置了过期时间的键中根据 TTL（Time to Live，存活时间）删除键，优先删除存活时间短的键。 </span></li><li fid="ufd48ec80" data-lake-id="u73d61e05" id="u73d61e05"><span data-lake-id="u03b2962d" id="u03b2962d">noeviction：不删除键，只是拒绝写入新的数据。</span></li></ul><p data-lake-id="ud1318c3d" id="ud1318c3d"><span data-lake-id="uba9ab505" id="uba9ab505">Redis 在正常情况下对过期键的处理就是惰性删除 + 定期删除一起使用，主动删除（内存回收）其实属于异常的兜底处理了。</span></p><h3 data-lake-id="t1sBg" id="t1sBg"><span data-lake-id="ubf0a36cd" id="ubf0a36cd">Redis 键过期时间的设置</span></h3><ul list="u8f5415fa"><li fid="u70fb50ac" data-lake-id="u4b365946" id="u4b365946"><span data-lake-id="u8c9e225b" id="u8c9e225b">EXPIRE：设置键的过期时间（以秒为单位）。 </span></li><li fid="u70fb50ac" data-lake-id="u070c9765" id="u070c9765"><span data-lake-id="u8a307375" id="u8a307375">PEXPIRE：设置键的过期时间（以毫秒为单位）。 </span></li><li fid="u70fb50ac" data-lake-id="uc1a840a6" id="uc1a840a6"><span data-lake-id="ufa7c05e7" id="ufa7c05e7">SETEX：在设置键值的同时定义过期时间。 </span></li><li fid="u70fb50ac" data-lake-id="u4670d463" id="u4670d463"><span data-lake-id="ud5d51c89" id="ud5d51c89">PSETEX：类似于 SETEX，但支持毫秒级的过期时间。</span></li></ul><h2 data-lake-id="t7tIz" id="t7tIz"><span data-lake-id="u0a0226b5" id="u0a0226b5">16.</span><span data-lake-id="ua429e16e" id="ua429e16e" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">如何解决 Redis 中的热点 key 问题？</span></h2><p data-lake-id="u729acb1c" id="u729acb1c"><span data-lake-id="ub6c0cf76" id="ub6c0cf76">Redis 中的热点 Key 问题是指某些 Key 被频繁访问，导致 Redis 的压力过大，进而影响整体性能甚至导致集群节点故障。</span></p><p data-lake-id="uaf0050a6" id="uaf0050a6"><span data-lake-id="u2f0ac93b" id="u2f0ac93b">解决热点 Key 问题的主要方法包括：</span></p><ul list="ub062c666"><li fid="u4342a4d4" data-lake-id="ufd2a731a" id="ufd2a731a"><strong><span data-lake-id="u451a0609" id="u451a0609">热点 key 拆分</span></strong><span data-lake-id="u1dbc3d70" id="u1dbc3d70">：将热点数据分散到多个 Key 中，例如通过引入随机前缀，使不同用户请求分散到多个 Key，多个 key 分布在多实例中，避免集中访问单一 Key。</span></li><li fid="u4342a4d4" data-lake-id="u4d00a45b" id="u4d00a45b"><strong><span data-lake-id="u89f629a3" id="u89f629a3">多级缓存</span></strong><span data-lake-id="u965ebe5d" id="u965ebe5d">：在 Redis 前增加其他缓存层（如 CDN、本地缓存），以分担 Redis 的访问压力。 </span></li><li fid="u4342a4d4" data-lake-id="ua15804e9" id="ua15804e9"><strong><span data-lake-id="udb83099c" id="udb83099c">读写分离</span></strong><span data-lake-id="u73a22fc6" id="u73a22fc6">：通过 Redis 主从复制，将读请求分发到多个从节点，从而减轻单节点压力。 </span></li><li fid="u4342a4d4" data-lake-id="u2ea47189" id="u2ea47189"><strong><span data-lake-id="u8f4579fe" id="u8f4579fe">限流和降级</span></strong><span data-lake-id="u52be48ed" id="u52be48ed">：在热点 Key 访问过高时，应用限流策略，减少对 Redis 的请求，或者在必要时返回降级的数据或空值。</span></li></ul><h3 data-lake-id="NpuAN" id="NpuAN"><span data-lake-id="u4844f5fd" id="u4844f5fd">热点 key 的拆分</span></h3><p data-lake-id="ubc9ecd95" id="ubc9ecd95"><span data-lake-id="u5b4fa3a3" id="u5b4fa3a3">我们可以按照不同场景做不同的 “拆分“。有些场景可以全量拷贝，即将 mianshiya 这个 key 复制成 mianshiya_1、mianshiya_2、mianshiya_3 ，它们之间的数据是一致的，这样不同用户都访问到全量的数据。</span></p><p data-lake-id="ub9d825c3" id="ub9d825c3"><span data-lake-id="u1eb7ad18" id="u1eb7ad18">有些场景直接进行 key 的拆分，mianshiya_1、mianshiya_2、mianshiya_3 各存一部分的数据，不同用户仅需访问不同数据即可，例如一些推流信息，因为一个热点往往有很多发布者，大家看一部分，后续热度稍微降低下来，可以替换数据。</span></p><p data-lake-id="uf357ee64" id="uf357ee64"><span data-lake-id="uaa019820" id="uaa019820">不同用户可以进行 hash，将用户 id 哈希之后取余得到后缀，拼上 mianshiya_ 即可组成一个 key。</span></p><h2 data-lake-id="i5yu6" id="i5yu6"><span data-lake-id="uc0adbca7" id="uc0adbca7">17.</span><span data-lake-id="ufe142dda" id="ufe142dda" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 集群的实现原理是什么？</span></h2><h3 data-lake-id="blfCt" id="blfCt"><span data-lake-id="u446f03f2" id="u446f03f2" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">回答重点</span></h3><p data-lake-id="u98219bed" id="u98219bed"><span data-lake-id="u47aa5a3b" id="u47aa5a3b" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 集群（Redis cluster）是通过多个 Redis 实例组成的，每个实例存储部分的数据（即每个实例之间的数据是不重复的）。</span></p><p data-lake-id="u29dde338" id="u29dde338"><span data-lake-id="uaa531555" id="uaa531555" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">具体是采用哈希槽（Hash Slot）机制来分配数据，将整个键空间划分为 16384 个槽（slots）。每个 Redis 实例负责一定范围的哈希槽，数据的 key 经过哈希函数计算后对 16384 取余即可定位到对应的节点。</span></p><p data-lake-id="u3a143e2b" id="u3a143e2b"><span data-lake-id="u849398a4" id="u849398a4" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">客户端在发送请求时，会通过集群的任意节点进行连接，如果该节点存储了对应的数据则直接返回，反之该节点会根据请求的键值计算哈希槽并路由到正确的节点。</span></p><p data-lake-id="uacfecea2" id="uacfecea2"><span data-lake-id="uebeaee0e" id="uebeaee0e" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">简单来说，集群就是通过多台机器分担单台机器上的压力。</span></p><p data-lake-id="u51893b45" id="u51893b45"><span data-lake-id="u91a1d4a8" id="u91a1d4a8" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">（如果不理解集群原理，可以看下扩展知识中的两个示例）</span></p><h3 data-lake-id="qHyXL" id="qHyXL"><span data-lake-id="uc9fef0e2" id="uc9fef0e2" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">扩展知识</span></h3><h4 data-lake-id="eqHNR" id="eqHNR"><span data-lake-id="udd8460ad" id="udd8460ad" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 集群中节点之间的信息如何同步？</span></h4><p data-lake-id="ufb161197" id="ufb161197"><span data-lake-id="u68286354" id="u68286354" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 集群内每个节点都会保存集群的完整拓扑信息，包括每个节点的 ID、IP 地址、端口、负责的哈希槽范围等。<br /></span><span data-lake-id="u64606c92" id="u64606c92" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">节点之间使用 Gossip 协议进行状态交换，以保持集群的一致性和故障检测。每个节点会周期性地发送 PING 和 PONG 消息，交换集群信息，使得集群信息得以同步。</span></p><h3 data-lake-id="XPyBV" id="XPyBV"><span data-lake-id="u592ca800" id="u592ca800" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Gossip 的优点：</span></h3><ul list="uefd0b49a"><li fid="u770b1c24" data-lake-id="ub69f77ad" id="ub69f77ad"><strong><span data-lake-id="u6f7f7c80" id="u6f7f7c80">快速收敛</span></strong><span data-lake-id="u41a5cc7a" id="u41a5cc7a" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：Gossip 协议能够快速传播信息，确保集群状态的迅速更新。</span></li><li fid="u770b1c24" data-lake-id="u5f2117c2" id="u5f2117c2"><strong><span data-lake-id="u8d4642be" id="u8d4642be">降低网络负担</span></strong><span data-lake-id="u17b7355a" id="u17b7355a" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：由于信息是以随机节点间的对话方式传播，避免了集中式的状态查询，从而降低了网络流量。</span></li></ul><h3 data-lake-id="XuTQd" id="XuTQd"><span data-lake-id="ueff55bd8" id="ueff55bd8" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Gossip 协议</span></h3><h4 data-lake-id="lnSnt" id="lnSnt"><span data-lake-id="u73a84ec7" id="u73a84ec7" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Gossip 主要特点：</span></h4><ol list="ue6bb2935"><li fid="ub1889368" data-lake-id="uf0b26bea" id="uf0b26bea"><strong><span data-lake-id="u30e052c7" id="u30e052c7">分布式信息传播</span></strong><span data-lake-id="u8cdbd5f6" id="u8cdbd5f6" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：每个节点定期向其他节点发送其状态信息，确保所有节点对集群的状态有一致的视图。</span></li><li fid="ub1889368" data-lake-id="u78455184" id="u78455184"><strong><span data-lake-id="ud884434f" id="ud884434f">低延迟和高效率</span></strong><span data-lake-id="u1f470de4" id="u1f470de4" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：Gossip 协议设计为轻量级的通信方式，能够快速传播信息，减少单点故障带来的风险。 </span></li><li fid="ub1889368" data-lake-id="u9de43bec" id="u9de43bec"><strong><span data-lake-id="ud0947ab6" id="ud0947ab6">去中心化</span></strong><span data-lake-id="u0e72bd9a" id="u0e72bd9a" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：没有中心节点，所有节点平等地参与信息传播，提高了系统的鲁棒性。</span></li></ol><h4 data-lake-id="l640T" id="l640T"><span data-lake-id="u9aa1054b" id="u9aa1054b" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">工作原理：</span></h4><ol list="u85b11d8f"><li fid="uf7e370d4" data-lake-id="ua9f4e7f4" id="ua9f4e7f4"><strong><span data-lake-id="u80dd8ce7" id="u80dd8ce7">状态报告</span></strong><span data-lake-id="u6c70c672" id="u6c70c672" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：每个节点在特定的时间间隔内，向随机选择的其他节点发送其自身的状态信息，包括节点的主从关系、槽位分布等。 </span></li><li fid="uf7e370d4" data-lake-id="u3e9dabd7" id="u3e9dabd7"><strong><span data-lake-id="uaca8e1f9" id="uaca8e1f9">信息更新</span></strong><span data-lake-id="u785cd690" id="u785cd690" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：接收到状态信息的节点会根据所接收到的数据更新自己的状态，并将更新后的状态继续传播给其他节点。 </span></li><li fid="uf7e370d4" data-lake-id="uf1f1bc80" id="uf1f1bc80"><strong><span data-lake-id="u744acaa1" id="u744acaa1">节点检测</span></strong><span data-lake-id="uc758ac18" id="uc758ac18" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：通过周期性交换状态信息，节点可以检测到其他节点的存活状态。如果某个节点未能在预定时间内响应，则该节点会被标记为故障节点。 </span></li><li fid="uf7e370d4" data-lake-id="u8389f560" id="u8389f560"><strong><span data-lake-id="ub8d86cec" id="ub8d86cec">容错处理</span></strong><span data-lake-id="u010d8d06" id="u010d8d06" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">：在检测到节点故障后，集群中的其他节点可以采取措施（如重新分配槽位）以保持系统的高可用性。</span></li></ol><h3 data-lake-id="kKPDC" id="kKPDC"><span data-lake-id="uf204ed03" id="uf204ed03" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 集群分片原理图示</span></h3><p data-lake-id="ue2952b8f" id="ue2952b8f"><span data-lake-id="uebd10246" id="uebd10246" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">Redis 集群会将数据分散到 16384（2 ^ 14）个哈希槽中，集群中的每个节点负责一定范围的哈希槽，在 Redis 集群中，使用 CRC16 哈希算法计算键的哈希槽，以确定该键应存储在哪个节点。<br /></span><span data-lake-id="u5f7694ab" id="u5f7694ab" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">集群哈希槽分片如下图所示：</span></p><p data-lake-id="u45371b9c" id="u45371b9c"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1744624968452-e7336f72-bfab-440c-b5d5-68287ff7116b.png%22%2C%22taskId%22%3A%22uc6500b7c-8ffd-4a15-bb08-65a8a64f467%22%2C%22clientId%22%3A%22u88bc0eed-bb11-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1024%2C%22height%22%3A755%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A447909%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1536%2C%22originHeight%22%3A1133%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22MASTER%20MASTER%20SLAVE%20SLAVE%20SLAVE%20SLAVE%200~S460%2010923~16383%20S961%20~10922%20MASTER%20SLAVE%20SLAVE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A176%2C%22y%22%3A166%2C%22width%22%3A63%2C%22height%22%3A15%2C%22text%22%3A%22MASTER%22%7D%2C%7B%22x%22%3A1297%2C%22y%22%3A166%2C%22width%22%3A62%2C%22height%22%3A15%2C%22text%22%3A%22MASTER%22%7D%2C%7B%22x%22%3A96%2C%22y%22%3A296%2C%22width%22%3A46%2C%22height%22%3A20%2C%22text%22%3A%22SLAVE%22%7D%2C%7B%22x%22%3A1217%2C%22y%22%3A297%2C%22width%22%3A44%2C%22height%22%3A19%2C%22text%22%3A%22SLAVE%22%7D%2C%7B%22x%22%3A1403%2C%22y%22%3A298%2C%22width%22%3A45%2C%22height%22%3A19%2C%22text%22%3A%22SLAVE%22%7D%2C%7B%22x%22%3A283%2C%22y%22%3A298%2C%22width%22%3A44%2C%22height%22%3A18%2C%22text%22%3A%22SLAVE%22%7D%2C%7B%22x%22%3A981%2C%22y%22%3A366%2C%22width%22%3A117%2C%22height%22%3A29%2C%22text%22%3A%220~S460%22%7D%2C%7B%22x%22%3A363%2C%22y%22%3A451%2C%22width%22%3A171%2C%22height%22%3A25%2C%22text%22%3A%2210923~16383%22%7D%2C%7B%22x%22%3A769%2C%22y%22%3A713%2C%22width%22%3A159%2C%22height%22%3A26%2C%22text%22%3A%22S961%20~10922%22%7D%2C%7B%22x%22%3A718%2C%22y%22%3A942%2C%22width%22%3A62%2C%22height%22%3A17%2C%22text%22%3A%22MASTER%22%7D%2C%7B%22x%22%3A636%2C%22y%22%3A1076%2C%22width%22%3A47%2C%22height%22%3A20%2C%22text%22%3A%22SLAVE%22%7D%2C%7B%22x%22%3A823%2C%22y%22%3A1076%2C%22width%22%3A47%2C%22height%22%3A20%2C%22text%22%3A%22SLAVE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e5e0dc%22%2C%22id%22%3A%22ub6cbb801%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><span data-lake-id="u4b3b180d" id="u4b3b180d">每个节点会拥有一部分的槽位，然后对应的键值会根据其本身的 key，映射到一个哈希槽中，其主要流程如下：</span></p><ul list="u2cfbf0f6"><li fid="u3e84396e" data-lake-id="u35865b9e" id="u35865b9e"><span data-lake-id="ud4b2253e" id="ud4b2253e">根据键值的 key，按照 CRC 16 算法计算一个 16 bit 的值，然后将 16 bit 的值对 16384 进行取余运算，最后得到一个对应的哈希槽编号。</span></li><li fid="u3e84396e" data-lake-id="ucd5f4ce0" id="ucd5f4ce0"><span data-lake-id="u0cf510f5" id="u0cf510f5">根据每个节点分配的哈希槽区间，对应编号的数据落在对应的区间上，就能找到对应的分片实例。</span></li></ul><h3 data-lake-id="qUCUB" id="qUCUB"><span data-lake-id="u8e8a5a7e" id="u8e8a5a7e">Redis 集群中存储 key 示例</span></h3><p data-lake-id="u0dea28fd" id="u0dea28fd"><span data-lake-id="ua72baf8b" id="ua72baf8b">假设我们有一个 Redis 集群，包含三个主节点（Node1、Node2、Node3），它们分别负责以下哈希槽：</span></p><ul list="ud38a1d47"><li fid="ucc659852" data-lake-id="ueabbdff4" id="ueabbdff4"><span data-lake-id="u80bc51a1" id="u80bc51a1">Node1: 哈希槽 0-5460</span></li><li fid="ucc659852" data-lake-id="u90cb6efc" id="u90cb6efc"><span data-lake-id="uc1146b33" id="uc1146b33">Node2: 哈希槽 5461-10922</span></li><li fid="ucc659852" data-lake-id="uc2ca427a" id="uc2ca427a"><span data-lake-id="u7c851113" id="u7c851113">Node3: 哈希槽 10923-16383</span></li></ul><p data-lake-id="u1e3b832b" id="u1e3b832b"><span data-lake-id="u00ab7e79" id="u00ab7e79">现在要存储一个键为 user:1001 的数据。</span></p><h3 data-lake-id="lkOHe" id="lkOHe"><span data-lake-id="u5336ea93" id="u5336ea93">计算哈希槽</span></h3><ol list="u9dcec663"><li fid="u8a78aeaa" data-lake-id="ube07dd58" id="ube07dd58"><span data-lake-id="u3f24aa3f" id="u3f24aa3f">使用 CRC16 哈希算法计算 user:1001 的 CRC16 值。</span></li><li fid="u8a78aeaa" data-lake-id="u50768d01" id="u50768d01"><span data-lake-id="u241c143b" id="u241c143b">假设计算结果为 12345。</span></li><li fid="u8a78aeaa" data-lake-id="u232157fd" id="u232157fd"><span data-lake-id="u426b4605" id="u426b4605">然后，计算该值对应的哈希槽：</span></li></ol><ul list="u9dcec663" data-lake-indent="1"><li fid="u0af73aff" data-lake-id="u113480ab" id="u113480ab"><span data-lake-id="uff94b598" id="uff94b598">哈希槽 = 12345 % 16384 = 12345。</span></li></ul><h3 data-lake-id="TdMS3" id="TdMS3"><span data-lake-id="u0f7c8c8e" id="u0f7c8c8e">确定目标节点</span></h3><ul list="ua2178cae"><li fid="ud76627a7" data-lake-id="u1eed5501" id="u1eed5501"><span data-lake-id="ua1099b7d" id="ua1099b7d">12345 落在 Node3 的负责范围（10923-16383），因此，user:1001 会被存储在 Node3 中。</span></li></ul><h2 data-lake-id="NzELx" id="NzELx"><span data-lake-id="u0fbf62ea" id="u0fbf62ea">18.</span><span data-lake-id="ubb6ed2f9" id="ubb6ed2f9" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">Redis 中的 Big Key 问题是什么？如何解决？</span></h2><h3 data-lake-id="t8EUg" id="t8EUg"><span data-lake-id="u156b2f8a" id="u156b2f8a" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">回答重点</span></h3><p data-lake-id="u86281321" id="u86281321"><span data-lake-id="ub6a598d1" id="ub6a598d1" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">Redis 中的 “big Key” 是指一个内存空间占用比较大的键（Key），它有什么危害呢？</span></p><ul list="ufcef3261"><li fid="ua45d4917" data-lake-id="u914dfe80" id="u914dfe80"><span data-lake-id="u3389e394" id="u3389e394" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">内存分布不均。在集群模式下，不同 slot 分配到不同实例中，如果大 key 都映射到一个实例，则分布不均，查询效率也会受到影响。</span></li><li fid="ua45d4917" data-lake-id="ub8e904a9" id="ub8e904a9"><span data-lake-id="u097cc362" id="u097cc362" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">由于 Redis 单线程执行命令，操作大 Key 时耗时较长，从而导致 Redis 出现其它命令阻塞的问题。 </span></li><li fid="ua45d4917" data-lake-id="u2f8bcf5f" id="u2f8bcf5f"><span data-lake-id="u09eb724b" id="u09eb724b" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">大 Key 对资源的占用巨大，在进行网络 I/O 传输的时候，导致获取过程中产生的网络流量较大，从而产生网络传输时间延长甚至网络传输发现阻塞的现象，例如一个 key 2MB，请求个 1000 次 2000 MB。 </span></li><li fid="ua45d4917" data-lake-id="u9daca450" id="u9daca450"><span data-lake-id="u5bb63bb2" id="u5bb63bb2" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">客户端超时。因为操作大 Key 时耗时较长，可能导致客户端等待超时。</span></li></ul><h3 data-lake-id="KqAJ3" id="KqAJ3"><span data-lake-id="u8aa2bce8" id="u8aa2bce8" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">如何解决 big key 问题？</span></h3><p data-lake-id="uca17aaf3" id="uca17aaf3"><span data-lake-id="uc8049d24" id="uc8049d24" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">可以从以下几个方向进行入手：</span></p><h3 data-lake-id="hAirU" id="hAirU"><span data-lake-id="u47558b1e" id="u47558b1e" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">开发方面</span></h3><ul list="ua7c147ad"><li fid="u495b90f6" data-lake-id="ub9c6aeb8" id="ub9c6aeb8"><span data-lake-id="u193a3cd0" id="u193a3cd0" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">对要存储的数据进行压缩，压缩之后再进行存储</span></li><li fid="u495b90f6" data-lake-id="u90ebd70f" id="u90ebd70f"><span data-lake-id="u643d2d70" id="u643d2d70" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">大化小，即把大对象拆分成小对象，即将一个大 Key 拆分成若干个小 Key，降低单个 Key 的内存大小</span></li><li fid="u495b90f6" data-lake-id="u696bb45e" id="u696bb45e"><span data-lake-id="ub43dd756" id="ub43dd756" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">使用合适的数据结构进行存储，比如一些用 String 存储的场景，可以考虑使用 Hash、Set 等结构进行优化</span></li></ul><h3 data-lake-id="VQhS1" id="VQhS1"><span data-lake-id="ua0f00c01" id="ua0f00c01" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">业务层面</span></h3><ul list="u80471873"><li fid="uf6f285bb" data-lake-id="u5fc1abf2" id="u5fc1abf2"><span data-lake-id="u6783660d" id="u6783660d" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">可以根据实际情况，调整存储策略，只存一些必要的数据。比如用户的不常用信息（地址等）不存储，仅存储用户 ID、姓名、头像等。 </span></li><li fid="uf6f285bb" data-lake-id="u5645dab9" id="u5645dab9"><span data-lake-id="u46382718" id="u46382718" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">优化业务逻辑，从根源上避免大 Key 的产生。比如一些可以不展示的信息，直接移除等。</span></li></ul><h3 data-lake-id="T7bID" id="T7bID"><span data-lake-id="u02df4d9d" id="u02df4d9d" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">数据分布方面</span></h3><ul list="ue54a8a2e"><li fid="u3d4b9eb1" data-lake-id="u91a18471" id="u91a18471"><span data-lake-id="u2bd049c3" id="u2bd049c3" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">采用 Redis 集群方式进行 Redis 的部署，然后将大 Key 拆分散落到不同的服务器上面，加快响应速度</span></li></ul><p data-lake-id="ucb102dbd" id="ucb102dbd"><br></p>
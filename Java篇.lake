<!doctype lake><title>Java篇</title><meta name="doc-version" content="1" /><meta name="viewport" content="fixed" /><meta name="typography" content="classic" /><meta name="paragraphSpacing" content="relax" /><h2 data-lake-id="lcvIP" id="lcvIP" data-lake-index-type="2"><span data-lake-id="uced75cb2" id="uced75cb2" style="color: rgba(0, 0, 0, 0.88)">接口和抽象类有什么区别？</span></h2><h3 data-lake-id="QoPKu" id="QoPKu" data-lake-index-type="2"><span data-lake-id="u35bda33f" id="u35bda33f">回答重点</span></h3><p data-lake-id="u3620e27c" id="u3620e27c"><span data-lake-id="ufe7d9a85" id="ufe7d9a85">接口和抽象类在设计动机上有所不同。<br /></span><span data-lake-id="u7ea86d4c" id="u7ea86d4c">接口的设计是自上而下的。我们知晓某一行为，于是基于这些行为约束定义了接口，一些类需要有这些行为，因此实现对应的接口。<br /></span><span data-lake-id="u3a1c47e2" id="u3a1c47e2">抽象类的设计是自下而上的。我们写了很多类，发现它们之间有共性，有很多代码可以复用，因此将公共逻辑封装成一个抽象类，减少代码冗余。<br /></span><span data-lake-id="ub7929382" id="ub7929382">所谓的自上而下指的是先约定接口，再实现。<br /></span><span data-lake-id="u3561f670" id="u3561f670">而自下而上的是先有一些类，才抽象了共同父类（可能和学校教的不太一样，但是实战中很多时候都是因为重构才有的抽象）。</span></p><h3 data-lake-id="VVXsU" id="VVXsU" data-lake-index-type="2"><span data-lake-id="u550fe325" id="u550fe325">其他区别：</span></h3><p data-lake-id="u92550718" id="u92550718"><span data-lake-id="ud80c1b9e" id="ud80c1b9e">1）方法实现<br /></span><span data-lake-id="ub5b3a4b0" id="ub5b3a4b0">接口中的方法默认是 public 和 abstract（但在 Java8 之后可以设置 default 方法或者静态方法）。<br /></span><span data-lake-id="u50cf97e3" id="u50cf97e3">抽象类可以包含 abstract 方法（没有实现）和具体方法（有实现）。它允许子类继承并重用抽象类中的方法实现。<br /></span><span data-lake-id="u908ff32b" id="u908ff32b">2）构造函数和成员变量<br /></span><span data-lake-id="u2557788a" id="u2557788a">接口不能包含构造函数，接口中的成员变量默认为 public static final，即常量。<br /></span><span data-lake-id="ue6e9f179" id="ue6e9f179">抽象类可以包含构造函数，成员变量可以有不同的访问修饰符（如 private、protected、public），并且可以不是常量。<br /></span><span data-lake-id="uf1d32d13" id="uf1d32d13">3）多继承<br /></span><span data-lake-id="u63e03131" id="u63e03131">抽象类只能单继承，接口可以有多个实现。</span></p><h3 data-lake-id="VwVUp" id="VwVUp" data-lake-index-type="2"><span data-lake-id="u38ab7fb5" id="u38ab7fb5">扩展知识</span></h3><h4 data-lake-id="lRhwU" id="lRhwU" data-lake-index-type="2"><span data-lake-id="uc925b422" id="uc925b422">接口的演变</span></h4><ul list="u36e24b6c"><li fid="u15c25a6b" data-lake-id="u1d08059e" id="u1d08059e"><span data-lake-id="u2d502d5c" id="u2d502d5c">Java 8：引入了 default 和 static 方法，使得接口不仅仅是方法的声明，还可以提供具体的实现。default 方法允许在接口中添加新的方法实现，而不影响已经实现该接口的类。</span></li><li fid="u15c25a6b" data-lake-id="ud9ada8e8" id="ud9ada8e8"><span data-lake-id="ua6efa8ca" id="ua6efa8ca">Java 9：引入了私有方法，允许在接口中定义私有方法，用于 default 方法的内部逻辑复用。 </span></li><li fid="u15c25a6b" data-lake-id="u0829ffe9" id="u0829ffe9"><span data-lake-id="u5b28becf" id="u5b28becf">Java 14：引入了 sealed 接口（仅在某些子类中使用），进一步增强了接口的功能</span></li></ul><h2 data-lake-id="bTI4X" id="bTI4X" data-lake-index-type="2"><span data-lake-id="ue27de59a" id="ue27de59a" style="color: rgba(0, 0, 0, 0.88)">JDK 动态代理和 CGLIB 动态代理有什么区别？</span></h2><h3 data-lake-id="K3Lap" id="K3Lap" data-lake-index-type="2"><span data-lake-id="ue8cdd859" id="ue8cdd859">回答重点</span></h3><p data-lake-id="u0f3c3ed6" id="u0f3c3ed6"><span data-lake-id="u82b32b41" id="u82b32b41">JDK 动态代理是基于接口的，所以要求代理类一定是有定义接口的。<br /></span><span data-lake-id="ubddbf461" id="ubddbf461">CGLIB 基于 ASM 字节码生成工具，它是通过继承的方式生成目标类的子类来实现代理类，所以要注意 final 方法。<br /></span><span data-lake-id="uc9be0ad6" id="uc9be0ad6">它们之间的性能随着 JDK 版本的不同而不同，以下内容取自：haiq的博客</span></p><ul list="u7b8e9820"><li fid="u099b346b" data-lake-id="uc31fa6bf" id="uc31fa6bf"><span data-lake-id="u44909975" id="u44909975" style="color: rgba(0, 0, 0, 0.88)">jdk6 下，在运行次数较少的情况下，jdk 动态代理与 cglib 差距不明显，甚至更快一些；而当调用次数增加之后，cglib 表现稍微更快一些</span></li><li fid="u099b346b" data-lake-id="u446d0569" id="u446d0569"><span data-lake-id="u5a9afdb9" id="u5a9afdb9" style="color: rgba(0, 0, 0, 0.88)">jdk7 下，情况发生了逆转！在运行次数较少（1,000,000）的情况下，jdk 动态代理比 cglib 快了差不多30%；而当调用次数增加之后(50,000,000)，动态代理比 cglib 快了接近1倍</span></li><li fid="u099b346b" data-lake-id="ue2f62454" id="ue2f62454"><span data-lake-id="u36d0d267" id="u36d0d267" style="color: rgba(0, 0, 0, 0.88)">jdk8 表现和 jdk7 基本一致</span></li></ul><h3 data-lake-id="fpCvY" id="fpCvY" data-lake-index-type="2"><span data-lake-id="u0ffd2c88" id="u0ffd2c88" style="color: rgba(0, 0, 0, 0.88)">扩展知识</span></h3><h4 data-lake-id="u701y" id="u701y" data-lake-index-type="2"><span data-lake-id="uc4cb2706" id="uc4cb2706" style="color: rgba(0, 0, 0, 0.88)">扩展 JDK 动态代理</span></h4><p data-lake-id="u48b831f5" id="u48b831f5"><span data-lake-id="ubc09d984" id="ubc09d984" style="color: rgba(0, 0, 0, 0.88)">JDK 动态代理是基于接口的代理，因此要求代理类一定是有定义的接口，使用 java.lang.reflect.Proxy 类和 java.lang.reflect.InvocationHandler 接口实现。<br /></span><span data-lake-id="u6a393db7" id="u6a393db7" style="color: rgba(0, 0, 0, 0.88)">以下为一个简单 JDK 动态代理示例：</span></p><p data-lake-id="u19446dc4" id="u19446dc4"><span data-lake-id="ubebd2b86" id="ubebd2b86" style="color: rgba(0, 0, 0, 0.88)">​</span><br></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E6%8E%A5%E5%8F%A3%5Cnpublic%20interface%20Service%20%7B%5Cn%20%20%20%20void%20perform()%3B%5Cn%7D%5Cn%5Cn%2F%2F%20%E9%9C%80%E8%A6%81%E8%A2%AB%E4%BB%A3%E7%90%86%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%5Cnpublic%20class%20ServiceImpl%20implements%20Service%20%7B%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20perform()%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22mianshiya.com%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Ui4rQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u641d7277" id="u641d7277"><span data-lake-id="u40b6fe51" id="u40b6fe51">jdk动态代理处理类</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22import%20java.lang.reflect.InvocationHandler%3B%5Cnimport%20java.lang.reflect.Method%3B%5Cn%5Cnpublic%20class%20ServiceInvocationHandler%20implements%20InvocationHandler%20%7B%5Cn%20%20%20%20private%20final%20Object%20target%3B%5Cn%5Cn%20%20%20%20public%20ServiceInvocationHandler(Object%20target)%20%7B%5Cn%20%20%20%20%20%20%20%20this.target%20%3D%20target%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20invoke(Object%20proxy%2C%20Method%20method%2C%20Object%5B%5D%20args)%20throws%20Throwable%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22Before%20method%20invoke%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Object%20result%20%3D%20method.invoke(target%2C%20args)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22After%20method%20invoke%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20return%20result%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B0%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22xltv6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u66e8f670" id="u66e8f670"><span data-lake-id="u270f942a" id="u270f942a">创建并使用动态代理对象</span></p><p data-lake-id="uab31d367" id="uab31d367"><span data-lake-id="ue81dfe32" id="ue81dfe32">​</span><br></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22import%20java.lang.reflect.Proxy%3B%5Cn%5Cnpublic%20class%20DynamicProxyDemo%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20Service%20target%20%3D%20new%20ServiceImpl()%3B%5Cn%20%20%20%20%20%20%20%20Service%20proxy%20%3D%20(Service)%20Proxy.newProxyInstance(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20target.getClass().getClassLoader()%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20target.getClass().getInterfaces()%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20new%20ServiceInvocationHandler(target)%5Cn%20%20%20%20%20%20%20%20)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20proxy.perform()%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22w5q5X%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h3 data-lake-id="O5zSH" id="O5zSH" data-lake-index-type="2"><span data-lake-id="u15fa546c" id="u15fa546c">扩展 CGLIB</span></h3><p data-lake-id="u9269b118" id="u9269b118"><span data-lake-id="uf1f07f7a" id="uf1f07f7a">CGLIB 基于 ASM 字节码生成工具，它是通过继承的方式来实现代理类，所以不需要接口，可以代理普通类，但需要注意 final 方法（不可继承）。<br /></span><span data-lake-id="ue9fd521d" id="ue9fd521d">同样来看个示例：</span></p><p data-lake-id="ub7de0d2f" id="ub7de0d2f"><span data-lake-id="u0c2613da" id="u0c2613da" class="lake-fontsize-9" style="color: var(--yq-text-primary)">​</span><br></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Service%20%7B%5Cn%20%20%20%20public%20void%20perform()%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22mianshiya.com%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22d05Jy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u93df2770" id="u93df2770"><span data-lake-id="uff39d21b" id="uff39d21b">CGLIB动态代理处理类</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22import%20net.sf.cglib.proxy.MethodInterceptor%3B%5Cnimport%20net.sf.cglib.proxy.MethodProxy%3B%5Cn%5Cnimport%20java.lang.reflect.Method%3B%5Cn%5Cnpublic%20class%20ServiceMethodInterceptor%20implements%20MethodInterceptor%20%7B%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20intercept(Object%20obj%2C%20Method%20method%2C%20Object%5B%5D%20args%2C%20MethodProxy%20proxy)%20throws%20Throwable%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22Before%20method%20invoke%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Object%20result%20%3D%20proxy.invokeSuper(obj%2C%20args)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22After%20method%20invoke%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20return%20result%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ArEHM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u502f501c" id="u502f501c"><span data-lake-id="uc0f0150b" id="uc0f0150b">创建并使用动态代理对象</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22import%20net.sf.cglib.proxy.Enhancer%3B%5Cn%5Cnpublic%20class%20CglibDynamicProxyDemo%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20Enhancer%20enhancer%20%3D%20new%20Enhancer()%3B%5Cn%20%20%20%20%20%20%20%20enhancer.setSuperclass(Service.class)%3B%5Cn%20%20%20%20%20%20%20%20enhancer.setCallback(new%20ServiceMethodInterceptor())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20Service%20proxy%20%3D%20(Service)%20enhancer.create()%3B%5Cn%20%20%20%20%20%20%20%20proxy.perform()%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pw2Go%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h2 data-lake-id="THDI6" id="THDI6" data-lake-index-type="2"><span data-lake-id="u352c9f62" id="u352c9f62" style="color: rgba(0, 0, 0, 0.88)">你使用过 Java 的反射机制吗？如何应用反射？</span></h2><h3 data-lake-id="mcEys" id="mcEys" data-lake-index-type="2"><span data-lake-id="u9a71b884" id="u9a71b884" style="color: rgba(0, 0, 0, 0.88)">回答重点</span></h3><p data-lake-id="ub688262b" id="ub688262b"><span data-lake-id="uf055501f" id="uf055501f" style="color: rgba(0, 0, 0, 0.88)">Java 的反射机制是指在运行时获取类的结构信息（如方法、字段、构造函数）并操作对象的一种机制。反射机制提供了在运行时动态创建对象、调用方法、访问字段等功能，而无需在编译时知道这些类的具体信息。<br /></span><span data-lake-id="uc18daca8" id="uc18daca8" style="color: rgba(0, 0, 0, 0.88)">反射机制的优点：</span></p><ul list="uedc78911"><li fid="uc0b46e8b" data-lake-id="ue5d452af" id="ue5d452af"><span data-lake-id="u70cf8a64" id="u70cf8a64" style="color: rgba(0, 0, 0, 0.88)">可以动态地获取类的信息，不需要在编译时就知道类的信息。</span></li><li fid="uc0b46e8b" data-lake-id="uc656abb8" id="uc656abb8"><span data-lake-id="uca7ebae9" id="uca7ebae9" style="color: rgba(0, 0, 0, 0.88)">可以动态地创建对象，不需要在编译时就知道对象的类型。 </span></li><li fid="uc0b46e8b" data-lake-id="u1afd3719" id="u1afd3719"><span data-lake-id="u0aa24faa" id="u0aa24faa" style="color: rgba(0, 0, 0, 0.88)">可以动态地调用对象的属性和方法，在运行时动态地改变对象的行为。</span></li></ul><h3 data-lake-id="ieaOB" id="ieaOB" data-lake-index-type="2"><span data-lake-id="u1f5db352" id="u1f5db352" style="color: rgba(0, 0, 0, 0.88)">扩展知识</span></h3><p data-lake-id="u017e8abb" id="u017e8abb"><span data-lake-id="u8349481b" id="u8349481b" style="color: rgba(0, 0, 0, 0.88)">一般在业务编码中不会用到反射，在框架上用的较多，因为很多场景需要很灵活，不确定目标对象的类型，届时只能通过反射动态获取对象信息。<br /></span><span data-lake-id="uc66dc441" id="uc66dc441" style="color: rgba(0, 0, 0, 0.88)">例如 Spring 使用反射机制来读取和解析配置文件，从而实现依赖注入和面向切面编程等功能。</span></p><h3 data-lake-id="WOaIv" id="WOaIv" data-lake-index-type="2"><span data-lake-id="u131cc661" id="u131cc661" style="color: rgba(0, 0, 0, 0.88)">反射的性能考虑：</span></h3><p data-lake-id="u37cdc0d4" id="u37cdc0d4"><span data-lake-id="u4de8637f" id="u4de8637f" style="color: rgba(0, 0, 0, 0.88)">反射操作相比直接代码调用具有较高的性能开销，因为它涉及到动态解析和方法调用。<br /></span><span data-lake-id="u19221f37" id="u19221f37" style="color: rgba(0, 0, 0, 0.88)">所以在性能敏感的场景中，尽量避免频繁使用反射。可以通过缓存反射结果，例如把第一次得到的 Method 缓存起来，后续就不需要再调用 Class.getDeclaredMethod ，也就不需要再次动态加载了，这样就可以避免反射性能问题。</span></p><h3 data-lake-id="AZ9AC" id="AZ9AC" data-lake-index-type="2"><span data-lake-id="u447b41eb" id="u447b41eb" style="color: rgba(0, 0, 0, 0.88)">反射基本概念：</span></h3><p data-lake-id="u27cb952f" id="u27cb952f"><span data-lake-id="ud09be150" id="ud09be150" style="color: rgba(0, 0, 0, 0.88)">Class：反射机制的核心，通过 Class 类的实例可以获取类的各种信息。<br /></span><span data-lake-id="ua8597db5" id="ua8597db5" style="color: rgba(0, 0, 0, 0.88)">反射的主要功能：</span></p><ul list="u11f55184"><li fid="u5b240996" data-lake-id="u21c12883" id="u21c12883"><span data-lake-id="u850afd2b" id="u850afd2b" style="color: rgba(0, 0, 0, 0.88)">创建对象：通过 Class.newInstance() 或 Constructor.newInstance() 创建对象实例。</span></li><li fid="u5b240996" data-lake-id="u3710612f" id="u3710612f"><span data-lake-id="u1a8e98b8" id="u1a8e98b8" style="color: rgba(0, 0, 0, 0.88)">访问字段：使用 Field 类访问和修改对象的字段。 </span></li><li fid="u5b240996" data-lake-id="u551fc5fd" id="u551fc5fd"><span data-lake-id="u4c82b5cd" id="u4c82b5cd" style="color: rgba(0, 0, 0, 0.88)">调用方法：使用 Method 类调用对象的方法。 </span></li><li fid="u5b240996" data-lake-id="u3979cb63" id="u3979cb63"><span data-lake-id="u5be4d56d" id="u5be4d56d" style="color: rgba(0, 0, 0, 0.88)">获取类信息：获取类的名称、父类、接口等信息。</span></li></ul><h3 data-lake-id="F5XsC" id="F5XsC" data-lake-index-type="2"><span data-lake-id="u7abdcbaf" id="u7abdcbaf" style="color: rgba(0, 0, 0, 0.88)">反射的使用：</span></h3><p data-lake-id="uc1f1d182" id="uc1f1d182"><span data-lake-id="u83f2af07" id="u83f2af07" style="color: rgba(0, 0, 0, 0.88)">1）获取 Class 对象:</span></p><p data-lake-id="u1071c1a8" id="u1071c1a8"><span data-lake-id="u3440032a" id="u3440032a" style="color: rgba(0, 0, 0, 0.88)">​</span><br></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22Class%3C%3F%3E%20clazz%20%3D%20Class.forName(%5C%22com.mianshiya.MyClass%5C%22)%3B%5Cn%2F%2F%20%E6%88%96%E8%80%85%5CnClass%3C%3F%3E%20clazz%20%3D%20MyClass.class%3B%5Cn%2F%2F%20%E6%88%96%E8%80%85%5CnClass%3C%3F%3E%20clazz%20%3D%20obj.getClass()%3B%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22L6hMu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u1022bf54" id="u1022bf54"><span data-lake-id="u9993a84c" id="u9993a84c" style="color: rgba(0, 0, 0, 0.88)">2）创建对象:</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22Object%20obj%20%3D%20clazz.newInstance()%3B%20%2F%2F%20%E5%B7%B2%E8%BF%87%E6%97%B6%5CnConstructor%3C%3F%3E%20constructor%20%3D%20clazz.getConstructor()%3B%5CnObject%20obj%20%3D%20constructor.newInstance()%3B%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22HJXjX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ua1f726b7" id="ua1f726b7"><span data-lake-id="ue8b79b69" id="ue8b79b69" style="color: rgba(0, 0, 0, 0.88)">3）访问字段:</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22Field%20field%20%3D%20clazz.getField(%5C%22myField%5C%22)%3B%5Cnfield.setAccessible(true)%3B%20%2F%2F%20%E5%85%81%E8%AE%B8%E8%AE%BF%E9%97%AE%20private%20%E5%AD%97%E6%AE%B5%5CnObject%20value%20%3D%20field.get(obj)%3B%5Cnfield.set(obj%2C%20newValue)%3B%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qVHFs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uc5595e9d" id="uc5595e9d"><span data-lake-id="ud4187109" id="ud4187109" style="color: rgba(0, 0, 0, 0.88)">4）调用方法:</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22Method%20method%20%3D%20clazz.getMethod(%5C%22myMethod%5C%22%2C%20String.class)%3B%5CnObject%20result%20%3D%20method.invoke(obj%2C%20%5C%22param%5C%22)%3B%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Yg19c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h3 data-lake-id="t7zaD" id="t7zaD" data-lake-index-type="2"><span data-lake-id="u31cb8e2d" id="u31cb8e2d">反射的最佳实践：</span></h3><ul list="uaa63cde5"><li fid="u26331ee3" data-lake-id="ubc4e3a75" id="ubc4e3a75"><span data-lake-id="u99a3e31f" id="u99a3e31f">限制访问：尽量避免过度依赖反射，尤其是在性能关键的代码中。</span></li><li fid="u26331ee3" data-lake-id="u6fab713c" id="u6fab713c"><span data-lake-id="u188bf674" id="u188bf674">使用缓存：缓存反射获取的类、方法、字段等信息，减少反射操作的频率。 </span></li><li fid="u26331ee3" data-lake-id="u046fe807" id="u046fe807"><span data-lake-id="u7eaaa68e" id="u7eaaa68e">遵循设计原则：在设计系统时，尽量使用更稳定和易于维护的设计方案，只有在确实需要时才使用反射。</span></li></ul><h2 data-lake-id="HE03E" id="HE03E" data-lake-index-type="2"><span data-lake-id="u753f3d7a" id="u753f3d7a">.Java的执行流程是什么？</span></h2><h3 data-lake-id="VDLMt" id="VDLMt" data-lake-index-type="2"><span data-lake-id="u2ee25015" id="u2ee25015">回答重点</span></h3><p data-lake-id="uc155583a" id="uc155583a"><span data-lake-id="u1132a98b" id="u1132a98b">Java 程序的执行流程经历了从编译到字节码的生成，再到类加载和 JIT 编译的过程，最终在 JVM 中执行。并且在程序运行过程中，JVM 负责内存管理、垃圾回收和线程调度等工作。<br /></span><span data-lake-id="u8026c616" id="u8026c616">主要流程如下：</span></p><ol list="u547cb268"><li fid="u213c1663" data-lake-id="u3aff46d4" id="u3aff46d4"><span data-lake-id="u5f455bf8" id="u5f455bf8">源代码：编写 .java 文件。</span></li><li fid="u213c1663" data-lake-id="u721f3f96" id="u721f3f96"><span data-lake-id="u9e65713e" id="u9e65713e">编译：使用 javac 编译器生成 .class 字节码文件。 </span></li><li fid="u213c1663" data-lake-id="ue3592ff5" id="ue3592ff5"><span data-lake-id="uf114a7a9" id="uf114a7a9">类加载：JVM 的类加载器加载 .class 文件到内存中。 </span></li><li fid="u213c1663" data-lake-id="u67f43dc7" id="u67f43dc7"><span data-lake-id="u8262900a" id="u8262900a">解释执行：JVM 将字节码转为机器码执行。 </span></li><li fid="u213c1663" data-lake-id="ub8843ead" id="ub8843ead"><span data-lake-id="u2987f4f3" id="u2987f4f3">JIT 编译：JVM 根据需要将热点代码编译为机器码。 </span></li><li fid="u213c1663" data-lake-id="uf613eea8" id="uf613eea8"><span data-lake-id="u616b0941" id="u616b0941">运行：执行 main 方法中的逻辑。 </span></li><li fid="u213c1663" data-lake-id="u9a82bbbe" id="u9a82bbbe"><span data-lake-id="ucd5172a4" id="ucd5172a4">垃圾回收：JVM 管理内存，并回收不再使用的对象。 </span></li><li fid="u213c1663" data-lake-id="u23b4caef" id="u23b4caef"><span data-lake-id="u5f9100b5" id="u5f9100b5">程序结束：main 方法结束，JVM 清理资源，退出程序。</span></li></ol><h2 data-lake-id="HJUBp" id="HJUBp" data-lake-index-type="2"><span data-lake-id="uac7d525a" id="uac7d525a" style="color: rgba(0, 0, 0, 0.88)">说说 Java 中 HashMap 的原理？</span></h2><h3 data-lake-id="AwATo" id="AwATo" data-lake-index-type="2"><span data-lake-id="u1eae2175" id="u1eae2175">回答重点</span></h3><p data-lake-id="u664e9c6a" id="u664e9c6a"><span data-lake-id="u0f911543" id="u0f911543">HashMap 是基于哈希表的数据结构，用于存储键值对（key - value ）。其核心是将键的哈希值映射到数组索引位置，通过数组 + 链表（在 Java 8 及之后是数组 + 链表 + 红黑树）来处理哈希冲突。</span></p><p data-lake-id="udc63ea7e" id="udc63ea7e"><span data-lake-id="u55eec517" id="u55eec517">HashMap 使用键的 hashCode() 方法计算哈希值，并通过 indexFor 方法（JDK 1.7 及之后版本移除了这个方法，直接使用 (n - 1) &amp; hash ）确定元素在数组中的存储位置。哈希值是经过一定扰动处理的，防止哈希值分布不均匀，从而减少冲突。</span></p><p data-lake-id="u02d31536" id="u02d31536"><span data-lake-id="u34f3653a" id="u34f3653a">HashMap 的默认初始容量为 16，负载因子为 0.75。也就是说，当存储的元素数量超过 16×0.75 = 12 个时，HashMap 会发扩容操作，容量×2并重新分配元素位置。这种扩容是比较耗时的操作，频繁扩容会影响性能。</span></p><h3 data-lake-id="s64mp" id="s64mp" data-lake-index-type="2"><span data-lake-id="ua37884fa" id="ua37884fa">扩展知识</span></h3><h4 data-lake-id="TuIBx" id="TuIBx" data-lake-index-type="2"><span data-lake-id="u835e4429" id="u835e4429">HashMap 的红黑树优化：</span></h4><p data-lake-id="u40bd3cc9" id="u40bd3cc9"><span data-lake-id="uec89e598" id="uec89e598">从 Java 8 开始，为了优化当多个元素映射到同一个哈希桶（即发生哈希冲突）时的查找性能，当链表长度超过 8 时，链表会转变为红黑树。红黑树是一种自平衡二叉搜索树，能够将最坏情况下的查找复杂度从 O(n) 降低到 O(log n)。<br /></span><span data-lake-id="u1b08b9da" id="u1b08b9da">如果树中元素的数量低于 6，红黑树会转换回链表，以减少不必要的树操作开销。</span></p><h4 data-lake-id="ET338" id="ET338" data-lake-index-type="2"><span data-lake-id="u6354a0da" id="u6354a0da">hashCode()和equals()的重要性：</span></h4><p data-lake-id="ue182e625" id="ue182e625"><span data-lake-id="uacb9092a" id="uacb9092a">HashMap 的键必须实现 hashCode() 和 equals() 方法。hashCode() 用于计算哈希值，以决定键的存储位置，而 equals() 用于比较两个键是否相同。在 put 操作时，如果两个键的 hashCode() 相同，但 equals() 返回 false ，则这两个键会被视为不同的键，存储在同一个桶的不同位置。<br /></span><span data-lake-id="u577fb39e" id="u577fb39e">误用 hashCode() 和 equals() 会导致 HashMap 中的元素无法正常查找或插入。</span></p><h3 data-lake-id="XR1SP" id="XR1SP" data-lake-index-type="2"><span data-lake-id="u80e4a70d" id="u80e4a70d">默认容量与负载因子的选择：</span></h3><p data-lake-id="u6178f483" id="u6178f483"><span data-lake-id="u2797e58c" id="u2797e58c">默认容量是 16，负载因子为 0.75，这个组合是在性能和空间之间找到的平衡。较高的负载因子（如 1.0）会减少空间浪费，但增加了哈希冲突的概率；较低的负载因子则会增加空间开销，但减少哈希冲突。<br /></span><span data-lake-id="u2fe51d2b" id="u2fe51d2b">如果已知 HashMap 的容量需求，建议提前设定合适的初始容量，以减少扩容带来的性能损耗。</span></p><p data-lake-id="u2ec5f34f" id="u2ec5f34f"><br></p><p data-lake-id="u096b6758" id="u096b6758"><br></p><h2 data-lake-id="v6GPg" id="v6GPg" data-lake-index-type="2"><span data-lake-id="ud28d5423" id="ud28d5423" style="color: rgba(0, 0, 0, 0.88)">Java 中有哪些集合类？请简单介绍</span></h2><ul list="u6f9ef32a"><li fid="ue10c0613" data-lake-id="uac25471e" id="uac25471e"><span data-lake-id="u82c2de78" id="u82c2de78" style="color: rgb(28, 31, 35)">LinkedList：基于双向链表，插入、删除快，查询速度慢。 </span></li><li fid="ue10c0613" data-lake-id="u486f56af" id="u486f56af"><span data-lake-id="ucc69fc2b" id="ucc69fc2b" style="color: rgb(28, 31, 35)">Vector：线程安全的动态数组，类似于 ArrayList，但开销较大。</span></li></ul><h3 data-lake-id="sW6fa" id="sW6fa" data-lake-index-type="2"><span data-lake-id="u376f1bd4" id="u376f1bd4" style="color: rgb(28, 31, 35)">Set 接口：</span></h3><ul list="u14770a4c"><li fid="u0339def1" data-lake-id="u4398503f" id="u4398503f"><span data-lake-id="u7b584e7a" id="u7b584e7a" style="color: rgb(28, 31, 35)">HashSet：基于哈希表，元素无序，不允许重复。 </span></li><li fid="u0339def1" data-lake-id="u9e060d9f" id="u9e060d9f"><span data-lake-id="u488371c0" id="u488371c0" style="color: rgb(28, 31, 35)">LinkedHashSet：基于链表和哈希表，维护插入顺序，不允许重复。 </span></li><li fid="u0339def1" data-lake-id="udf548fb8" id="udf548fb8"><span data-lake-id="udfb77c54" id="udfb77c54" style="color: rgb(28, 31, 35)">TreeSet：基于红黑树，元素有序，不允许重复。</span></li></ul><p data-lake-id="u596a82e9" id="u596a82e9"><span data-lake-id="ueddccfb3" id="ueddccfb3" style="color: rgb(28, 31, 35)">所以网上有些说 Set 是无序集合非常不准确，因为需要看具体的实现类。</span></p><h3 data-lake-id="uQETN" id="uQETN" data-lake-index-type="2"><span data-lake-id="uc93470bf" id="uc93470bf" style="color: rgb(28, 31, 35)">Queue 接口：</span></h3><ul list="u88328708"><li fid="u3512681b" data-lake-id="ua2466c47" id="ua2466c47"><span data-lake-id="u99da073f" id="u99da073f" style="color: rgb(28, 31, 35)">PriorityQueue：基于优先级堆，元素按照自然顺序或指定比较器排序。 </span></li><li fid="u3512681b" data-lake-id="u9d84f1dd" id="u9d84f1dd"><span data-lake-id="uf6a0de5a" id="uf6a0de5a" style="color: rgb(28, 31, 35)">LinkedList：可以作为队列使用，支持 FIFO（先进先出）操作。</span></li></ul><h3 data-lake-id="JfG0a" id="JfG0a" data-lake-index-type="2"><span data-lake-id="u32cc8850" id="u32cc8850" style="color: rgb(28, 31, 35)">Map 接口：</span></h3><p data-lake-id="u9c395e89" id="u9c395e89"><span data-lake-id="ud88bea37" id="ud88bea37" style="color: rgb(28, 31, 35)">存储的是键值对，也就是给对象（value）设置了一个 key，这样通过 key 可以找到那个 value。</span></p><ul list="ud9cd60b3"><li fid="u675acf67" data-lake-id="u6f8779c5" id="u6f8779c5"><span data-lake-id="ub24aeb04" id="ub24aeb04">HashMap：基于哈希表，键值对无序，不允许键重复。</span></li><li fid="u675acf67" data-lake-id="u41f98a95" id="u41f98a95"><span data-lake-id="uc1f158c1" id="uc1f158c1">LinkedHashMap：基于链表和哈希表，维护插入顺序，不允许键重复。</span></li><li fid="u675acf67" data-lake-id="u29cc444d" id="u29cc444d"><span data-lake-id="u4b06bc91" id="u4b06bc91">TreeMap：基于红黑树，键值对有序，不允许键重复。</span></li><li fid="u675acf67" data-lake-id="ua9ed9123" id="ua9ed9123"><span data-lake-id="uf762156e" id="uf762156e">Hashtable：线程安全的哈希表，不允许键或值为 null。</span></li><li fid="u675acf67" data-lake-id="u991afd71" id="u991afd71"><span data-lake-id="uf493e2af" id="uf493e2af">ConcurrentHashMap：线程安全的哈希表，适合高并发环境，不允许键或值为 null。</span></li></ul><p data-lake-id="uf4a4b28a" id="uf4a4b28a"><span data-lake-id="u1e626a92" id="u1e626a92">这题一般会在面试刚开始的时候被问，主要用于暖场热身，不需要说的那么详细，大致讲下，面试官会根据你回答的点继续挖的。</span></p><p data-lake-id="u4ec8e8e8" id="u4ec8e8e8"><span data-lake-id="ua9f10cd2" id="ua9f10cd2">PS：可尝试结合类图，对常见的实现类关系重点记忆，面试时可对自己擅长的实现类详细介绍或引导，也可做一定的取舍。</span></p><p data-lake-id="uf81944c5" id="uf81944c5"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745740306416-7973d763-f696-4dff-b60b-946084ab2f8c.png%22%2C%22taskId%22%3A%22u6ada6bed-2d6a-4cbe-8451-e930f350816%22%2C%22clientId%22%3A%22ud260a285-c600-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1383.3333333333333%2C%22height%22%3A471%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A395637%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A2075%2C%22originHeight%22%3A706%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22LINKEDUST%20LINKEDHASHSET%20LINKEDHASHMAP%20K'V%20WINTERFACE%20%20(CTREEST%20CCONCURRENTHASHMAP%20)HASHSET%20C)ARRAYLIST%20CHASHMAP%20C)ABSTRACTSEQUENTIALLIST%20TREEMAP%20INTERFACEN%20ABSTRACTSET%20C)ABSTRACTLIST%20PRIONITYQUEUE%20CCOPYONWRITEARRAYLIST%20)HASHTABLE%20SORTEDMAP%20VVT%204%20SINTERFACE%20INTERFACES%20K.VE%20INTERFACEN%20(ID%20INTERFACEN%20R%20ABSTRACTCOLLECTION%20MAP%20WINTERFACE%20COLLECTION%20%E9%9D%A2%E8%AF%95%E9%B8%AD%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A567%2C%22y%22%3A15%2C%22width%22%3A100%2C%22height%22%3A25%2C%22text%22%3A%22LINKEDUST%22%7D%2C%7B%22x%22%3A1168%2C%22y%22%3A22%2C%22width%22%3A125%2C%22height%22%3A17%2C%22text%22%3A%22LINKEDHASHSET%22%7D%2C%7B%22x%22%3A1845%2C%22y%22%3A23%2C%22width%22%3A129%2C%22height%22%3A16%2C%22text%22%3A%22LINKEDHASHMAP%22%7D%2C%7B%22x%22%3A1729%2C%22y%22%3A129%2C%22width%22%3A38%2C%22height%22%3A17%2C%22text%22%3A%22K'V%22%7D%2C%7B%22x%22%3A777%2C%22y%22%3A134%2C%22width%22%3A67%2C%22height%22%3A15%2C%22text%22%3A%22WINTERFACE%20%22%7D%2C%7B%22x%22%3A941%2C%22y%22%3A139%2C%22width%22%3A86%2C%22height%22%3A21%2C%22text%22%3A%22(CTREEST%22%7D%2C%7B%22x%22%3A1345%2C%22y%22%3A140%2C%22width%22%3A181%2C%22height%22%3A22%2C%22text%22%3A%22CCONCURRENTHASHMAP%22%7D%2C%7B%22x%22%3A1138%2C%22y%22%3A140%2C%22width%22%3A73%2C%22height%22%3A17%2C%22text%22%3A%22)HASHSET%22%7D%2C%7B%22x%22%3A350%2C%22y%22%3A141%2C%22width%22%3A90%2C%22height%22%3A17%2C%22text%22%3A%22C)ARRAYLIST%22%7D%2C%7B%22x%22%3A1643%2C%22y%22%3A141%2C%22width%22%3A84%2C%22height%22%3A18%2C%22text%22%3A%22CHASHMAP%22%7D%2C%7B%22x%22%3A507%2C%22y%22%3A140%2C%22width%22%3A191%2C%22height%22%3A21%2C%22text%22%3A%22C)ABSTRACTSEQUENTIALLIST%22%7D%2C%7B%22x%22%3A1892%2C%22y%22%3A142%2C%22width%22%3A71%2C%22height%22%3A16%2C%22text%22%3A%22TREEMAP%22%7D%2C%7B%22x%22%3A1050%2C%22y%22%3A261%2C%22width%22%3A87%2C%22height%22%3A16%2C%22text%22%3A%22INTERFACEN%22%7D%2C%7B%22x%22%3A883%2C%22y%22%3A269%2C%22width%22%3A94%2C%22height%22%3A17%2C%22text%22%3A%22ABSTRACTSET%22%7D%2C%7B%22x%22%3A430%2C%22y%22%3A268%2C%22width%22%3A113%2C%22height%22%3A19%2C%22text%22%3A%22C)ABSTRACTLIST%22%7D%2C%7B%22x%22%3A691%2C%22y%22%3A270%2C%22width%22%3A112%2C%22height%22%3A17%2C%22text%22%3A%22PRIONITYQUEUE%22%7D%2C%7B%22x%22%3A23%2C%22y%22%3A270%2C%22width%22%3A187%2C%22height%22%3A18%2C%22text%22%3A%22CCOPYONWRITEARRAYLIST%22%7D%2C%7B%22x%22%3A1775%2C%22y%22%3A269%2C%22width%22%3A85%2C%22height%22%3A16%2C%22text%22%3A%22)HASHTABLE%22%7D%2C%7B%22x%22%3A1955%2C%22y%22%3A279%2C%22width%22%3A89%2C%22height%22%3A16%2C%22text%22%3A%22SORTEDMAP%22%7D%2C%7B%22x%22%3A1702%2C%22y%22%3A362%2C%22width%22%3A42%2C%22height%22%3A22%2C%22text%22%3A%22VVT%22%7D%2C%7B%22x%22%3A760%2C%22y%22%3A366%2C%22width%22%3A29%2C%22height%22%3A22%2C%22text%22%3A%224%22%7D%2C%7B%22x%22%3A289%2C%22y%22%3A380%2C%22width%22%3A96%2C%22height%22%3A28%2C%22text%22%3A%22SINTERFACE%22%7D%2C%7B%22x%22%3A1719%2C%22y%22%3A380%2C%22width%22%3A107%2C%22height%22%3A30%2C%22text%22%3A%22INTERFACES%20K.VE%22%7D%2C%7B%22x%22%3A582%2C%22y%22%3A389%2C%22width%22%3A69%2C%22height%22%3A16%2C%22text%22%3A%22INTERFACEN%22%7D%2C%7B%22x%22%3A1030%2C%22y%22%3A389%2C%22width%22%3A98%2C%22height%22%3A26%2C%22text%22%3A%22(ID%20INTERFACEN%22%7D%2C%7B%22x%22%3A266%2C%22y%22%3A392%2C%22width%22%3A32%2C%22height%22%3A23%2C%22text%22%3A%22R%22%7D%2C%7B%22x%22%3A728%2C%22y%22%3A399%2C%22width%22%3A151%2C%22height%22%3A16%2C%22text%22%3A%22ABSTRACTCOLLECTION%22%7D%2C%7B%22x%22%3A1732%2C%22y%22%3A405%2C%22width%22%3A41%2C%22height%22%3A17%2C%22text%22%3A%22MAP%22%7D%2C%7B%22x%22%3A670%2C%22y%22%3A517%2C%22width%22%3A76%2C%22height%22%3A16%2C%22text%22%3A%22WINTERFACE%22%7D%2C%7B%22x%22%3A668%2C%22y%22%3A534%2C%22width%22%3A82%2C%22height%22%3A17%2C%22text%22%3A%22COLLECTION%22%7D%2C%7B%22x%22%3A1992%2C%22y%22%3A636%2C%22width%22%3A77%2C%22height%22%3A28%2C%22text%22%3A%22%E9%9D%A2%E8%AF%95%E9%B8%AD%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f8f8%22%2C%22id%22%3A%22k2eMI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h2 data-lake-id="F9Tne" id="F9Tne" data-lake-index-type="2"><span data-lake-id="uc21c5da3" id="uc21c5da3" style="color: rgba(0, 0, 0, 0.88)">Java 中 HashMap 的扩容机制是怎样的？</span></h2><h3 data-lake-id="mUkKc" id="mUkKc" data-lake-index-type="2"><span data-lake-id="u55e56e07" id="u55e56e07">回答重点</span></h3><p data-lake-id="u9eb54a24" id="u9eb54a24"><span data-lake-id="u6023e13c" id="u6023e13c">HashMap 中的扩容是基于负载因子（load factor）来决定的。默认情况下，HashMap 的负载因子为 0.75，这意味着当 HashMap 的已存储元素数量超过当前容量的 75% 时，就会触发扩容操作。</span></p><p data-lake-id="uce63a9bb" id="uce63a9bb"><span data-lake-id="u20b7eda5" id="u20b7eda5">例如，初始容量为 16，负载因子为 0.75，则扩容阈值为 16 × 0.75 = 12 。当存入第 13 个元素时，HashMap 就会触发扩容。</span></p><p data-lake-id="u2f81b771" id="u2f81b771"><span data-lake-id="u674ae39a" id="u674ae39a">当触发扩容时，HashMap 的容量会扩大为当前容量的两倍。例如，容量从 16 增加到 32，从 32 增加到 64 等。</span></p><p data-lake-id="u6de3472d" id="u6de3472d"><span data-lake-id="u7063c4ca" id="u7063c4ca">扩容时，HashMap 需要重新计算所有元素的哈希值，并将它们重新分配到新的哈希桶中，这个过程称为rehashing。每个元素的存储位置会根据新容量的大小重新计算哈希值，并移动到新的数组中。</span></p><h3 data-lake-id="ph48t" id="ph48t" data-lake-index-type="2"><span data-lake-id="u26439b6d" id="u26439b6d">扩展知识</span></h3><h4 data-lake-id="IvBH3" id="IvBH3" data-lake-index-type="2"><span data-lake-id="ua0834823" id="ua0834823">rehashing 细节</span></h4><p data-lake-id="uf2e9cbfa" id="uf2e9cbfa"><span data-lake-id="u1cca2469" id="u1cca2469">按照我们的思维，每一个元素应该是重新 hash 一个一个搬迁过去。<br /></span><span data-lake-id="uf87a8ddb" id="uf87a8ddb">在 1.7 的时候就是这样实现的，然而 1.8 在这里做了优化，关键点就在于数组的长度是 2 的次方，且扩容为 2 倍。<br /></span><span data-lake-id="uda757be2" id="uda757be2">因为数组的长度是 2 的 n 次方，所以假设以前的数组长度（16）二进制表示是 010000，那么新数组的长度（32）二进制表示是 100000，这个应该很好理解吧？<br /></span><span data-lake-id="ub83ff27b" id="ub83ff27b">它们之间的差别就在于高位多了一个 1，而我们通过 key 的 hash 值定位其在数组位置所采用的方法是（数组长度 - 1）&amp; hash 。我们还是拿 16 和 32 长度来举例：<br /></span><span data-lake-id="u62dfb395" id="u62dfb395">16 - 1 = 15，二进制为 001111<br /></span><span data-lake-id="u403f3451" id="u403f3451">32 - 1 = 31，二进制为 011111<br /></span><span data-lake-id="u9f0359ce" id="u9f0359ce">所以重点就在 key 的 hash 值的从右往左数第五位是否是 1，如果是 1 说明需要搬迁到新位置，且新位置的下标就是原下标 +16（原数组大小），如果是 0 说明吃不到新数组长度的高位，那就还是在原位置，不需要迁移。<br /></span><span data-lake-id="ua452f5b2" id="ua452f5b2">所以，我们刚好拿老数组的长度（010000）来判断高位是否是 1，这里只有两种情况，要么是 1 要么是 0 。</span></p><p data-lake-id="u69f881c5" id="u69f881c5"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745741957858-d47d0230-2a30-43e7-bc53-08d60548ff83.png%22%2C%22taskId%22%3A%22ud10a0d04-fd0b-474d-905f-bc9e96f2006%22%2C%22clientId%22%3A%22ud260a285-c600-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A430%2C%22height%22%3A641%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A438400%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A645%2C%22originHeight%22%3A961%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22PRESERVE%20ORDER%20NODE%3CK%2CV%3E%20LOHEAD%20-%20NULL%2C%20LOTAIL%20-%20NULL%3B%20NODE%3CK%2CV%3EHIHEAD%20NULL%2CHITAIL%20NULL%3B%20NODE%3CK%2CV%3E%20NEXT%3B%20DO%7B%20NEXT%20E%20E.NEXT%3B%20IF%20(E.HASH%20%26OLDCAP)%20IF%20(LOTAIL%20-%20NULL)%20LOHEAD%20EJ%20ELSE%20LOTAIL.NEXT%20E%3B%20LOTAIL%20E%20EJ%20ELSE%20(HITAIL%20NULL)%20IF%20HIHEAD%20E%3B%20ELSE%20HITAIL.NEXT%20T%E4%B8%89EJ%20HITAIL%20-%20E%3B%2011)%3B%20WHILE%20E%20NEXT%20%E4%B8%89%20IF(LOTAIL%20!%20NULL)%7B%20%E4%B8%8D%E9%9C%80%20%E4%B8%8D%E9%9C%80%E8%A6%81%E6%8D%A2%E4%BD%8D%E7%BD%AE%E7%9A%84%E8%8A%82%E7%82%B9%E4%BB%AC%20LOTAIL.NEXT-NULL%3B%20NEWTAB%5BI%5D%20LOHEAD%3B%20%E9%9C%80%E8%A6%81%E6%8D%A2%E4%BD%8D%E7%BD%AE%E7%9A%84%E8%8A%82%E7%82%B9%E4%BB%AC%2C%20IF%20(HITAIL!%20NULL)%20%E7%9B%B4%E6%8E%A5%E4%B8%8B%E6%A0%87%2B%E8%80%81%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F%20HITAIL.NEXT%3BNULL%3B%20%E9%9D%A2%E8%AF%95%E9%B8%AD%20NEWTAB%5BI%2BOLDCAP%5DHIHEAD%3B%2C%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A150%2C%22y%22%3A7%2C%22width%22%3A189%2C%22height%22%3A19%2C%22text%22%3A%22PRESERVE%20ORDER%22%7D%2C%7B%22x%22%3A67%2C%22y%22%3A35%2C%22width%22%3A528%2C%22height%22%3A31%2C%22text%22%3A%22NODE%3CK%2CV%3E%20LOHEAD%20-%20NULL%2C%20LOTAIL%20-%20NULL%3B%22%7D%2C%7B%22x%22%3A67%2C%22y%22%3A74%2C%22width%22%3A527%2C%22height%22%3A24%2C%22text%22%3A%22NODE%3CK%2CV%3EHIHEAD%20NULL%2CHITAIL%20NULL%3B%22%7D%2C%7B%22x%22%3A66%2C%22y%22%3A109%2C%22width%22%3A202%2C%22height%22%3A22%2C%22text%22%3A%22NODE%3CK%2CV%3E%20NEXT%3B%22%7D%2C%7B%22x%22%3A67%2C%22y%22%3A141%2C%22width%22%3A54%2C%22height%22%3A23%2C%22text%22%3A%22DO%7B%22%7D%2C%7B%22x%22%3A121%2C%22y%22%3A180%2C%22width%22%3A188%2C%22height%22%3A19%2C%22text%22%3A%22NEXT%20E%20E.NEXT%3B%22%7D%2C%7B%22x%22%3A123%2C%22y%22%3A209%2C%22width%22%3A29%2C%22height%22%3A22%2C%22text%22%3A%22IF%22%7D%2C%7B%22x%22%3A182%2C%22y%22%3A212%2C%22width%22%3A213%2C%22height%22%3A22%2C%22text%22%3A%22(E.HASH%20%26OLDCAP)%22%7D%2C%7B%22x%22%3A176%2C%22y%22%3A244%2C%22width%22%3A136%2C%22height%22%3A25%2C%22text%22%3A%22IF%20(LOTAIL%22%7D%2C%7B%22x%22%3A325%2C%22y%22%3A246%2C%22width%22%3A106%2C%22height%22%3A23%2C%22text%22%3A%22-%20NULL)%22%7D%2C%7B%22x%22%3A229%2C%22y%22%3A281%2C%22width%22%3A150%2C%22height%22%3A24%2C%22text%22%3A%22LOHEAD%20EJ%22%7D%2C%7B%22x%22%3A176%2C%22y%22%3A315%2C%22width%22%3A56%2C%22height%22%3A20%2C%22text%22%3A%22ELSE%22%7D%2C%7B%22x%22%3A229%2C%22y%22%3A347%2C%22width%22%3A215%2C%22height%22%3A25%2C%22text%22%3A%22LOTAIL.NEXT%20E%3B%22%7D%2C%7B%22x%22%3A174%2C%22y%22%3A383%2C%22width%22%3A148%2C%22height%22%3A26%2C%22text%22%3A%22LOTAIL%20E%20EJ%22%7D%2C%7B%22x%22%3A123%2C%22y%22%3A452%2C%22width%22%3A54%2C%22height%22%3A20%2C%22text%22%3A%22ELSE%22%7D%2C%7B%22x%22%3A221%2C%22y%22%3A483%2C%22width%22%3A210%2C%22height%22%3A28%2C%22text%22%3A%22(HITAIL%20NULL)%22%7D%2C%7B%22x%22%3A177%2C%22y%22%3A485%2C%22width%22%3A28%2C%22height%22%3A24%2C%22text%22%3A%22IF%22%7D%2C%7B%22x%22%3A228%2C%22y%22%3A521%2C%22width%22%3A152%2C%22height%22%3A26%2C%22text%22%3A%22HIHEAD%20E%3B%22%7D%2C%7B%22x%22%3A176%2C%22y%22%3A555%2C%22width%22%3A56%2C%22height%22%3A22%2C%22text%22%3A%22ELSE%22%7D%2C%7B%22x%22%3A228%2C%22y%22%3A590%2C%22width%22%3A157%2C%22height%22%3A21%2C%22text%22%3A%22HITAIL.NEXT%22%7D%2C%7B%22x%22%3A367%2C%22y%22%3A593%2C%22width%22%3A73%2C%22height%22%3A20%2C%22text%22%3A%22T%E4%B8%89EJ%22%7D%2C%7B%22x%22%3A176%2C%22y%22%3A626%2C%22width%22%3A144%2C%22height%22%3A22%2C%22text%22%3A%22HITAIL%20-%20E%3B%22%7D%2C%7B%22x%22%3A403%2C%22y%22%3A690%2C%22width%22%3A56%2C%22height%22%3A28%2C%22text%22%3A%2211)%3B%22%7D%2C%7B%22x%22%3A90%2C%22y%22%3A695%2C%22width%22%3A75%2C%22height%22%3A21%2C%22text%22%3A%22WHILE%22%7D%2C%7B%22x%22%3A198%2C%22y%22%3A695%2C%22width%22%3A22%2C%22height%22%3A21%2C%22text%22%3A%22E%22%7D%2C%7B%22x%22%3A254%2C%22y%22%3A696%2C%22width%22%3A65%2C%22height%22%3A21%2C%22text%22%3A%22NEXT%22%7D%2C%7B%22x%22%3A228%2C%22y%22%3A698%2C%22width%22%3A17%2C%22height%22%3A16%2C%22text%22%3A%22%E4%B8%89%22%7D%2C%7B%22x%22%3A66%2C%22y%22%3A725%2C%22width%22%3A356%2C%22height%22%3A28%2C%22text%22%3A%22IF(LOTAIL%20!%20NULL)%7B%20%E4%B8%8D%E9%9C%80%22%7D%2C%7B%22x%22%3A363%2C%22y%22%3A729%2C%22width%22%3A277%2C%22height%22%3A29%2C%22text%22%3A%22%E4%B8%8D%E9%9C%80%E8%A6%81%E6%8D%A2%E4%BD%8D%E7%BD%AE%E7%9A%84%E8%8A%82%E7%82%B9%E4%BB%AC%22%7D%2C%7B%22x%22%3A121%2C%22y%22%3A761%2C%22width%22%3A258%2C%22height%22%3A26%2C%22text%22%3A%22LOTAIL.NEXT-NULL%3B%22%7D%2C%7B%22x%22%3A121%2C%22y%22%3A797%2C%22width%22%3A255%2C%22height%22%3A27%2C%22text%22%3A%22NEWTAB%5BI%5D%20LOHEAD%3B%22%7D%2C%7B%22x%22%3A378%2C%22y%22%3A831%2C%22width%22%3A254%2C%22height%22%3A32%2C%22text%22%3A%22%E9%9C%80%E8%A6%81%E6%8D%A2%E4%BD%8D%E7%BD%AE%E7%9A%84%E8%8A%82%E7%82%B9%E4%BB%AC%2C%22%7D%2C%7B%22x%22%3A67%2C%22y%22%3A859%2C%22width%22%3A29%2C%22height%22%3A29%2C%22text%22%3A%22IF%22%7D%2C%7B%22x%22%3A119%2C%22y%22%3A865%2C%22width%22%3A197%2C%22height%22%3A24%2C%22text%22%3A%22(HITAIL!%20NULL)%22%7D%2C%7B%22x%22%3A375%2C%22y%22%3A867%2C%22width%22%3A265%2C%22height%22%3A31%2C%22text%22%3A%22%E7%9B%B4%E6%8E%A5%E4%B8%8B%E6%A0%87%2B%E8%80%81%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F%22%7D%2C%7B%22x%22%3A121%2C%22y%22%3A901%2C%22width%22%3A257%2C%22height%22%3A23%2C%22text%22%3A%22HITAIL.NEXT%3BNULL%3B%22%7D%2C%7B%22x%22%3A544%2C%22y%22%3A906%2C%22width%22%3A105%2C%22height%22%3A40%2C%22text%22%3A%22%E9%9D%A2%E8%AF%95%E9%B8%AD%22%7D%2C%7B%22x%22%3A120%2C%22y%22%3A935%2C%22width%22%3A381%2C%22height%22%3A25%2C%22text%22%3A%22NEWTAB%5BI%2BOLDCAP%5DHIHEAD%3B%2C%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2339362d%22%2C%22id%22%3A%22uc28d671c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><span data-lake-id="ub457f384" id="ub457f384">从上面的源码可以看到，链表的数据是一次性计算完，然后一堆搬运的，因为扩容时候，节点的下标变化只会是原位置，或者原位置+老数组长度，不会有第三种选择。<br /></span><span data-lake-id="u9f8856bc" id="u9f8856bc">上面的位操作，包括为什么是原下标+老数组长度等，如果你不理解的话，可以举几个数带进去算一算，就能理解了。</span></p><h3 data-lake-id="aziNS" id="aziNS" data-lake-index-type="2"><span data-lake-id="u5d6db2fc" id="u5d6db2fc">总结一下：</span></h3><ul list="ubc3f30de"><li fid="u0479f347" data-lake-id="u8e2f1c89" id="u8e2f1c89"><span data-lake-id="u5a1eed9a" id="u5a1eed9a">当扩容发生时，HashMap 并不是简单地将元素复制到新数组中。每个元素的哈希值会根据新的数组容量重新计算，因此元素的存储位置会发生变化</span></li><li fid="u0479f347" data-lake-id="ubee6c874" id="ubee6c874"><span data-lake-id="ua1a6745b" id="ua1a6745b">Java 8 之后的扩容不需要每个节点重新 hash 算下标，因为元素的新位置只与高位有关，通过和老数组长度的 &amp; 计算是否为 0 就能判断新下标的位置，因此链表中的元素可能只需要部分移动。这一优化减少了扩容时的计算开销。</span></li></ul><h3 data-lake-id="hhzWB" id="hhzWB" data-lake-index-type="2"><span data-lake-id="uf78c0e87" id="uf78c0e87">扩容的考虑</span></h3><p data-lake-id="u6610a39f" id="u6610a39f"><span data-lake-id="u5f9821d2" id="u5f9821d2">每次扩容都需要遍历当前所有的元素，重新计算哈希值并移动它们到新的位置，因此扩容是一个比较耗时的操作。如果频繁扩容，整体性能会明显下降。</span></p><h3 data-lake-id="yJRUT" id="yJRUT" data-lake-index-type="2"><span data-lake-id="u84dc2d78" id="u84dc2d78">优化策略：</span></h3><p data-lake-id="ucfd42662" id="ucfd42662"><span data-lake-id="u3fa31c24" id="u3fa31c24">如果能预估到 HashMap 中大概会存储多少数据，可以在创建 HashMap 时就指定一个较大的初始容量，以减少扩容次数。例如，对于存储 100 万个元素的 HashMap，可以直接设置一个 1024×1024 的初始容量，避免多次扩容。</span></p><p data-lake-id="u815158d8" id="u815158d8"><span data-lake-id="u95cd080c" id="u95cd080c">​</span><br></p><h2 data-lake-id="mwj7a" id="mwj7a" data-lake-index-type="2"><span data-lake-id="u3ac19f3f" id="u3ac19f3f" style="color: rgba(0, 0, 0, 0.88)">你了解 Java 线程池的原理吗？</span></h2><h3 data-lake-id="UDJwJ" id="UDJwJ" data-lake-index-type="2"><span data-lake-id="uf6d8cfc7" id="uf6d8cfc7">回答重点</span></h3><p data-lake-id="u0026e610" id="u0026e610"><span data-lake-id="u26dcd9cc" id="u26dcd9cc">线程池是一种池化技术，用于预先创建并管理一组线程，避免频繁创建和销毁线程的开销，提高性能和响应速度。<br /></span><span data-lake-id="ucffd8d23" id="ucffd8d23">它几个关键的配置包括：核心线程数、最大线程数、空闲存活时间、工作队列、拒绝策略。</span></p><p data-lake-id="u0948720f" id="u0948720f"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745826699361-587995f2-62bc-42af-9168-5684aa29189f.png%22%2C%22taskId%22%3A%22ud015a2d0-3c63-489e-bccb-1ab04bd20fb%22%2C%22clientId%22%3A%22u11139ec7-d5cb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1214.6666666666667%2C%22height%22%3A397%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A532978%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1822%2C%22originHeight%22%3A596%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%95%B0%20%40RANGE(FROMAX_VALANG.LANG.INTEGER.MAX_VALUE)%20I%20PUBLIC%20THREADPOOLEXECUTOR(%20INT%20COREP00LSIZE%2C%20%40RANGE(FROMAX_VALANG.IANG.INTEGER.MAX_VALUE)%20INT%20MAXIMUMPOOLSIZE%2C%20%E6%9C%80%E5%A4%A7%E7%BA%BF%E7%A8%8B%E6%95%B0%20%40RANGE(FROM%20O%2CTO%20JAVA.LANG%2CMAX_VALUE)%20LONG%20KEEPALIVETIME%2C%20%E7%A9%BA%E9%97%B2%E5%AD%98%E6%B4%BB%E6%97%B6%E9%97%B4%20%40NOTNULL%20TIMEUNITUNIT%2C%E6%97%B6%E9%97%B4%E5%8D%95%E4%BD%8D%20%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97%20%40NOTNULL%20BLOCKINGQUE%3CRUNNABLE%3E%20WORKQUEUE%2C%20%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%8E%82%20%40NOTNULL%20THREADFACTORY%20THREADFACTORY%20%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5%20%40NOTNULL%20REJECTEDEXECUTIONHANDLER%20HANDLER)%20(COREPOOLSIZE%20%3C0%201L%20IF%20MAXIMUMPOOLSIZE%20%3C%200%20LL%20MAXIMUMPOOLSIZE%3C%20COREPOOLSIZE%20KEEPALIVETIME%20%3C%200)%20THROW%20NEW%20ILLEGALARGUMENTEXCEPTION()%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1483%2C%22y%22%3A22%2C%22width%22%3A195%2C%22height%22%3A42%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%95%B0%22%7D%2C%7B%22x%22%3A487%2C%22y%22%3A31%2C%22width%22%3A697%2C%22height%22%3A36%2C%22text%22%3A%22%40RANGE(FROMAX_VALANG.LANG.INTEGER.MAX_VALUE)%20I%22%7D%2C%7B%22x%22%3A25%2C%22y%22%3A32%2C%22width%22%3A438%2C%22height%22%3A33%2C%22text%22%3A%22PUBLIC%20THREADPOOLEXECUTOR(%22%7D%2C%7B%22x%22%3A1166%2C%22y%22%3A36%2C%22width%22%3A65%2C%22height%22%3A28%2C%22text%22%3A%22INT%22%7D%2C%7B%22x%22%3A1247%2C%22y%22%3A38%2C%22width%22%3A213%2C%22height%22%3A26%2C%22text%22%3A%22COREP00LSIZE%2C%22%7D%2C%7B%22x%22%3A487%2C%22y%22%3A79%2C%22width%22%3A695%2C%22height%22%3A35%2C%22text%22%3A%22%40RANGE(FROMAX_VALANG.IANG.INTEGER.MAX_VALUE)%22%7D%2C%7B%22x%22%3A1167%2C%22y%22%3A83%2C%22width%22%3A60%2C%22height%22%3A29%2C%22text%22%3A%22INT%22%7D%2C%7B%22x%22%3A1243%2C%22y%22%3A85%2C%22width%22%3A259%2C%22height%22%3A28%2C%22text%22%3A%22MAXIMUMPOOLSIZE%2C%22%7D%2C%7B%22x%22%3A1543%2C%22y%22%3A85%2C%22width%22%3A197%2C%22height%22%3A42%2C%22text%22%3A%22%E6%9C%80%E5%A4%A7%E7%BA%BF%E7%A8%8B%E6%95%B0%22%7D%2C%7B%22x%22%3A490%2C%22y%22%3A128%2C%22width%22%3A971%2C%22height%22%3A35%2C%22text%22%3A%22%40RANGE(FROM%20O%2CTO%20JAVA.LANG%2CMAX_VALUE)%20LONG%20KEEPALIVETIME%2C%22%7D%2C%7B%22x%22%3A1504%2C%22y%22%3A143%2C%22width%22%3A236%2C%22height%22%3A39%2C%22text%22%3A%22%E7%A9%BA%E9%97%B2%E5%AD%98%E6%B4%BB%E6%97%B6%E9%97%B4%22%7D%2C%7B%22x%22%3A486%2C%22y%22%3A178%2C%22width%22%3A561%2C%22height%22%3A43%2C%22text%22%3A%22%40NOTNULL%20TIMEUNITUNIT%2C%E6%97%B6%E9%97%B4%E5%8D%95%E4%BD%8D%22%7D%2C%7B%22x%22%3A1205%2C%22y%22%3A214%2C%22width%22%3A158%2C%22height%22%3A40%2C%22text%22%3A%22%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97%22%7D%2C%7B%22x%22%3A486%2C%22y%22%3A226%2C%22width%22%3A702%2C%22height%22%3A32%2C%22text%22%3A%22%40NOTNULL%20BLOCKINGQUE%3CRUNNABLE%3E%20WORKQUEUE%2C%22%7D%2C%7B%22x%22%3A1093%2C%22y%22%3A265%2C%22width%22%3A159%2C%22height%22%3A45%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%8E%82%22%7D%2C%7B%22x%22%3A486%2C%22y%22%3A273%2C%22width%22%3A595%2C%22height%22%3A32%2C%22text%22%3A%22%40NOTNULL%20THREADFACTORY%20THREADFACTORY%22%7D%2C%7B%22x%22%3A1226%2C%22y%22%3A320%2C%22width%22%3A162%2C%22height%22%3A39%2C%22text%22%3A%22%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5%22%7D%2C%7B%22x%22%3A494%2C%22y%22%3A319%2C%22width%22%3A684%2C%22height%22%3A36%2C%22text%22%3A%22%40NOTNULL%20REJECTEDEXECUTIONHANDLER%20HANDLER)%22%7D%2C%7B%22x%22%3A150%2C%22y%22%3A366%2C%22width%22%3A336%2C%22height%22%3A33%2C%22text%22%3A%22(COREPOOLSIZE%20%3C0%201L%22%7D%2C%7B%22x%22%3A95%2C%22y%22%3A367%2C%22width%22%3A39%2C%22height%22%3A30%2C%22text%22%3A%22IF%22%7D%2C%7B%22x%22%3A162%2C%22y%22%3A416%2C%22width%22%3A390%2C%22height%22%3A32%2C%22text%22%3A%22MAXIMUMPOOLSIZE%20%3C%200%20LL%22%7D%2C%7B%22x%22%3A163%2C%22y%22%3A466%2C%22width%22%3A511%2C%22height%22%3A26%2C%22text%22%3A%22MAXIMUMPOOLSIZE%3C%20COREPOOLSIZE%22%7D%2C%7B%22x%22%3A163%2C%22y%22%3A508%2C%22width%22%3A294%2C%22height%22%3A33%2C%22text%22%3A%22KEEPALIVETIME%20%3C%200)%22%7D%2C%7B%22x%22%3A163%2C%22y%22%3A559%2C%22width%22%3A590%2C%22height%22%3A31%2C%22text%22%3A%22THROW%20NEW%20ILLEGALARGUMENTEXCEPTION()%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232e2d2c%22%2C%22id%22%3A%22u20b29585%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ue11ec3c4" id="ue11ec3c4"><span data-lake-id="ub3e2a6a8" id="ub3e2a6a8">主要工作原理如下：</span></p><ol list="ua726ffe2"><li fid="u0a885c74" data-lake-id="u9087c74d" id="u9087c74d"><span data-lake-id="u31038e7f" id="u31038e7f">默认情况下线程不会预创建，任务提交之后才会创建线程（不过设置 prestartAllCoreThreads 可以预创建核心线程）。</span></li><li fid="u0a885c74" data-lake-id="ubcb2c1b1" id="ubcb2c1b1"><span data-lake-id="ub56efd38" id="ub56efd38">当核心线程满了之后不会新建线程，而是把任务堆积到工作队列中。 </span></li><li fid="u0a885c74" data-lake-id="u0f1d1400" id="u0f1d1400"><span data-lake-id="ua7e7f594" id="ua7e7f594">如果工作队列放不下了，然后才会新增线程，直至达到最大线程数。 </span></li><li fid="u0a885c74" data-lake-id="u262872bf" id="u262872bf"><span data-lake-id="uc330b62c" id="uc330b62c">如果工作队列满了，然后也已经达到最大线程数了，这时候来任务会执行拒绝策略。 </span></li><li fid="u0a885c74" data-lake-id="u47f6b9b2" id="u47f6b9b2"><span data-lake-id="u6f50bda1" id="u6f50bda1">如果线程空闲时间超过空闲存活时间，并且当前线程数大于核心线程数的则会销毁线程，直到线程数等于核心线程数（设置 allowCoreThreadTimeOut 为 true 可以回收核心线程，默认为 false）。</span></li></ol><p data-lake-id="u0bb7d25e" id="u0bb7d25e"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745826773321-97b5b661-8c5f-447f-874b-0f35de41b8f2.png%22%2C%22taskId%22%3A%22u15a728bf-3af1-4e84-8b2f-0f79ea6d569%22%2C%22clientId%22%3A%22u11139ec7-d5cb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1226%2C%22height%22%3A760%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A415347%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1839%2C%22originHeight%22%3A1140%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%BA%BF%E7%A8%8B%E6%B1%A0%20%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%20%E5%88%86%E9%85%8D%20%E6%8F%90%E4%BA%A4%20%E4%BB%BB%E5%8A%A1%20%E6%A0%B8%E5%BF%83%20%E6%A0%B8%E5%BF%83%20%E6%A0%B8%E5%BF%83%20%E7%BA%BF%E7%A8%8B%20%E7%BA%BF%E7%A8%8B%20%E7%BA%BF%E7%A8%8B%20%E4%BB%BB%E5%8A%A1%20%E4%BB%BB%E5%8A%A1%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1033%2C%22y%22%3A25%2C%22width%22%3A243%2C%22height%22%3A81%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%E6%B1%A0%22%7D%2C%7B%22x%22%3A1063%2C%22y%22%3A318%2C%22width%22%3A202%2C%22height%22%3A52%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%22%7D%2C%7B%22x%22%3A667%2C%22y%22%3A497%2C%22width%22%3A101%2C%22height%22%3A52%2C%22text%22%3A%22%E5%88%86%E9%85%8D%22%7D%2C%7B%22x%22%3A352%2C%22y%22%3A538%2C%22width%22%3A104%2C%22height%22%3A53%2C%22text%22%3A%22%E6%8F%90%E4%BA%A4%22%7D%2C%7B%22x%22%3A118%2C%22y%22%3A586%2C%22width%22%3A100%2C%22height%22%3A53%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A1136%2C%22y%22%3A725%2C%22width%22%3A107%2C%22height%22%3A50%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A689%2C%22y%22%3A730%2C%22width%22%3A103%2C%22height%22%3A51%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A821%2C%22y%22%3A731%2C%22width%22%3A101%2C%22height%22%3A49%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A1139%2C%22y%22%3A788%2C%22width%22%3A105%2C%22height%22%3A49%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A688%2C%22y%22%3A795%2C%22width%22%3A104%2C%22height%22%3A55%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A823%2C%22y%22%3A795%2C%22width%22%3A100%2C%22height%22%3A48%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A688%2C%22y%22%3A944%2C%22width%22%3A102%2C%22height%22%3A55%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A822%2C%22y%22%3A944%2C%22width%22%3A99%2C%22height%22%3A53%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%239fcaa2%22%2C%22id%22%3A%22u2ec897bc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uf00827e6" id="uf00827e6"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745826790868-e7f7c59d-3f21-43e5-bc6d-7f71931487fb.png%22%2C%22taskId%22%3A%22u73199a7f-c238-4442-97a1-7db684092ab%22%2C%22clientId%22%3A%22u11139ec7-d5cb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1246%2C%22height%22%3A757%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A565482%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1869%2C%22originHeight%22%3A1136%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%BA%BF%E7%A8%8B%E6%B1%A0%20%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E6%9C%AA%E6%BB%A1%20%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%20%E5%85%A5%E9%98%9F%E5%8A%9B%20%E6%8F%90%E4%BA%A4%20%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%95%B0%E5%B7%B2%E6%BB%A1%20%E4%BB%BB%E5%8A%A1%20%E6%A0%B8%E5%BF%83%20%E6%A0%B8%E5%BF%83%20%E6%A0%B8%E5%BF%83%20%E7%BA%BF%E7%A8%8B%20%E7%BA%BF%E7%A8%8B%20%E7%BA%BF%E7%A8%8B%20%E4%BB%BB%E5%8A%A1%20%E4%BB%BB%E5%8A%A1%20%E4%BB%BB%E5%8A%A1%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1067%2C%22y%22%3A32%2C%22width%22%3A258%2C%22height%22%3A86%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%E6%B1%A0%22%7D%2C%7B%22x%22%3A1024%2C%22y%22%3A185%2C%22width%22%3A311%2C%22height%22%3A55%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E6%9C%AA%E6%BB%A1%22%7D%2C%7B%22x%22%3A1099%2C%22y%22%3A337%2C%22width%22%3A212%2C%22height%22%3A54%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%22%7D%2C%7B%22x%22%3A608%2C%22y%22%3A461%2C%22width%22%3A146%2C%22height%22%3A62%2C%22text%22%3A%22%E5%85%A5%E9%98%9F%E5%8A%9B%22%7D%2C%7B%22x%22%3A360%2C%22y%22%3A564%2C%22width%22%3A109%2C%22height%22%3A54%2C%22text%22%3A%22%E6%8F%90%E4%BA%A4%22%7D%2C%7B%22x%22%3A887%2C%22y%22%3A599%2C%22width%22%3A364%2C%22height%22%3A54%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%95%B0%E5%B7%B2%E6%BB%A1%22%7D%2C%7B%22x%22%3A116%2C%22y%22%3A617%2C%22width%22%3A105%2C%22height%22%3A53%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A1180%2C%22y%22%3A758%2C%22width%22%3A106%2C%22height%22%3A54%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A709%2C%22y%22%3A764%2C%22width%22%3A108%2C%22height%22%3A55%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A849%2C%22y%22%3A765%2C%22width%22%3A102%2C%22height%22%3A52%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A1181%2C%22y%22%3A825%2C%22width%22%3A108%2C%22height%22%3A51%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A850%2C%22y%22%3A832%2C%22width%22%3A104%2C%22height%22%3A50%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A709%2C%22y%22%3A833%2C%22width%22%3A108%2C%22height%22%3A49%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A1179%2C%22y%22%3A980%2C%22width%22%3A107%2C%22height%22%3A58%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A712%2C%22y%22%3A984%2C%22width%22%3A105%2C%22height%22%3A57%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A849%2C%22y%22%3A987%2C%22width%22%3A102%2C%22height%22%3A55%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23adc8a8%22%2C%22id%22%3A%22u44413323%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u8e9106c8" id="u8e9106c8"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745826805334-95cd1615-88ac-4742-aee8-2b0b7eeb644d.png%22%2C%22taskId%22%3A%22uac10f23c-2499-4092-ad02-24a89d0dede%22%2C%22clientId%22%3A%22u11139ec7-d5cb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1186.6666666666667%2C%22height%22%3A767%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A719954%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1780%2C%22originHeight%22%3A1150%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%BA%BF%E7%A8%8B%E6%B1%A0%20%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E6%BB%A1%20%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%20%E5%88%86%E9%85%8D%20%E5%88%9B%E5%BB%BA%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%95%B0%E4%B9%8B%E5%A4%96%E7%9A%84%E7%BA%BF%E7%A8%8B%20%E6%8F%90%E4%BA%A4%20%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%95%B0%E5%B7%B2%E6%BB%A1%20%E4%BB%BB%E5%8A%A1%20%E9%9D%9E%E6%A0%B8%20%E9%9D%9E%E6%A0%B8%20%E6%A0%B8%E5%BF%83%20%E6%A0%B8%E5%BF%83%20%E6%A0%B8%E5%BF%83%20%E5%BF%83%E7%BA%BF%20%E5%BF%83%E7%BA%BF%20%E7%BA%BF%E7%A8%8B%20%E7%BA%BF%E7%A8%8B%20%E7%BA%BF%E7%A8%8B%20%E7%A8%8B%20%E7%A8%8B%20%E4%BB%BB%E5%8A%A1%20%E4%BB%BB%E5%8A%A1%20%E4%BB%BB%E5%8A%A1%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1035%2C%22y%22%3A77%2C%22width%22%3A245%2C%22height%22%3A78%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%E6%B1%A0%22%7D%2C%7B%22x%22%3A995%2C%22y%22%3A221%2C%22width%22%3A251%2C%22height%22%3A54%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E6%BB%A1%22%7D%2C%7B%22x%22%3A1064%2C%22y%22%3A369%2C%22width%22%3A202%2C%22height%22%3A51%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%22%7D%2C%7B%22x%22%3A595%2C%22y%22%3A493%2C%22width%22%3A103%2C%22height%22%3A52%2C%22text%22%3A%22%E5%88%86%E9%85%8D%22%7D%2C%7B%22x%22%3A1138%2C%22y%22%3A520%2C%22width%22%3A600%2C%22height%22%3A58%2C%22text%22%3A%22%E5%88%9B%E5%BB%BA%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%95%B0%E4%B9%8B%E5%A4%96%E7%9A%84%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A356%2C%22y%22%3A585%2C%22width%22%3A103%2C%22height%22%3A54%2C%22text%22%3A%22%E6%8F%90%E4%BA%A4%22%7D%2C%7B%22x%22%3A864%2C%22y%22%3A620%2C%22width%22%3A355%2C%22height%22%3A58%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%95%B0%E5%B7%B2%E6%BB%A1%22%7D%2C%7B%22x%22%3A122%2C%22y%22%3A637%2C%22width%22%3A98%2C%22height%22%3A50%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A1395%2C%22y%22%3A753%2C%22width%22%3A102%2C%22height%22%3A51%2C%22text%22%3A%22%E9%9D%9E%E6%A0%B8%22%7D%2C%7B%22x%22%3A1535%2C%22y%22%3A759%2C%22width%22%3A103%2C%22height%22%3A49%2C%22text%22%3A%22%E9%9D%9E%E6%A0%B8%22%7D%2C%7B%22x%22%3A1143%2C%22y%22%3A774%2C%22width%22%3A105%2C%22height%22%3A50%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A692%2C%22y%22%3A778%2C%22width%22%3A99%2C%22height%22%3A56%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A826%2C%22y%22%3A780%2C%22width%22%3A101%2C%22height%22%3A52%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A1397%2C%22y%22%3A816%2C%22width%22%3A100%2C%22height%22%3A49%2C%22text%22%3A%22%E5%BF%83%E7%BA%BF%22%7D%2C%7B%22x%22%3A1535%2C%22y%22%3A821%2C%22width%22%3A102%2C%22height%22%3A48%2C%22text%22%3A%22%E5%BF%83%E7%BA%BF%22%7D%2C%7B%22x%22%3A1144%2C%22y%22%3A837%2C%22width%22%3A102%2C%22height%22%3A49%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A692%2C%22y%22%3A841%2C%22width%22%3A101%2C%22height%22%3A52%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A819%2C%22y%22%3A842%2C%22width%22%3A108%2C%22height%22%3A55%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A1414%2C%22y%22%3A878%2C%22width%22%3A61%2C%22height%22%3A56%2C%22text%22%3A%22%E7%A8%8B%22%7D%2C%7B%22x%22%3A1548%2C%22y%22%3A883%2C%22width%22%3A72%2C%22height%22%3A56%2C%22text%22%3A%22%E7%A8%8B%22%7D%2C%7B%22x%22%3A1144%2C%22y%22%3A988%2C%22width%22%3A102%2C%22height%22%3A54%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A691%2C%22y%22%3A991%2C%22width%22%3A100%2C%22height%22%3A61%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A822%2C%22y%22%3A993%2C%22width%22%3A103%2C%22height%22%3A56%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e4e2ab%22%2C%22id%22%3A%22u271c525e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uc679e728" id="uc679e728"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745826820243-b397a49e-294e-4aac-a652-ccec3a5145e0.png%22%2C%22taskId%22%3A%22udd98a780-2aec-4b0e-bd1c-d31d2d810e1%22%2C%22clientId%22%3A%22u11139ec7-d5cb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1220.6666666666667%2C%22height%22%3A767%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A670038%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1831%2C%22originHeight%22%3A1150%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%BA%BF%E7%A8%8B%E6%B1%A0%20%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E6%BB%A1%20%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%20%E6%8F%90%E4%BA%A4%20%E7%BA%BF%E7%A8%8B%E6%95%B0%E5%B7%B2%E8%BE%BE%E6%9C%80%E5%A4%A7%E7%BA%BF%E7%A8%8B%E6%95%B0%20%E4%BB%BB%E5%8A%A1%20%E9%9D%9E%E6%A0%B8%20%E9%9D%9E%E6%A0%B8%20%E6%A0%B8%E5%BF%83%20%E6%A0%B8%E5%BF%83%20%E6%A0%B8%E5%BF%83%20%E5%BF%83%E7%BA%BF%20%E8%A7%A6%E5%8F%91%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5%20%E5%BF%83%E7%BA%BF%20%E7%BA%BF%E7%A8%8B%20%E7%BA%BF%E7%A8%8B%20%E7%BA%BF%E7%A8%8B%20%E7%A8%8B%20%E4%BB%BB%E5%8A%A1%20%E4%BB%BB%E5%8A%A1%20%E4%BB%BB%E5%8A%A1%20%E4%BB%BB%E5%8A%A1%20%E4%BB%BB%E5%8A%A1%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1026%2C%22y%22%3A56%2C%22width%22%3A235%2C%22height%22%3A79%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%E6%B1%A0%22%7D%2C%7B%22x%22%3A981%2C%22y%22%3A194%2C%22width%22%3A250%2C%22height%22%3A58%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E6%BB%A1%22%7D%2C%7B%22x%22%3A1053%2C%22y%22%3A340%2C%22width%22%3A195%2C%22height%22%3A49%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%22%7D%2C%7B%22x%22%3A361%2C%22y%22%3A552%2C%22width%22%3A102%2C%22height%22%3A55%2C%22text%22%3A%22%E6%8F%90%E4%BA%A4%22%7D%2C%7B%22x%22%3A842%2C%22y%22%3A561%2C%22width%22%3A491%2C%22height%22%3A51%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%E6%95%B0%E5%B7%B2%E8%BE%BE%E6%9C%80%E5%A4%A7%E7%BA%BF%E7%A8%8B%E6%95%B0%22%7D%2C%7B%22x%22%3A134%2C%22y%22%3A602%2C%22width%22%3A98%2C%22height%22%3A50%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A1329%2C%22y%22%3A700%2C%22width%22%3A99%2C%22height%22%3A51%2C%22text%22%3A%22%E9%9D%9E%E6%A0%B8%22%7D%2C%7B%22x%22%3A1553%2C%22y%22%3A712%2C%22width%22%3A100%2C%22height%22%3A50%2C%22text%22%3A%22%E9%9D%9E%E6%A0%B8%22%7D%2C%7B%22x%22%3A1130%2C%22y%22%3A734%2C%22width%22%3A99%2C%22height%22%3A51%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A691%2C%22y%22%3A738%2C%22width%22%3A96%2C%22height%22%3A52%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A818%2C%22y%22%3A743%2C%22width%22%3A99%2C%22height%22%3A48%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A1327%2C%22y%22%3A760%2C%22width%22%3A102%2C%22height%22%3A53%2C%22text%22%3A%22%E5%BF%83%E7%BA%BF%22%7D%2C%7B%22x%22%3A253%2C%22y%22%3A769%2C%22width%22%3A293%2C%22height%22%3A50%2C%22text%22%3A%22%E8%A7%A6%E5%8F%91%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5%22%7D%2C%7B%22x%22%3A1554%2C%22y%22%3A775%2C%22width%22%3A97%2C%22height%22%3A47%2C%22text%22%3A%22%E5%BF%83%E7%BA%BF%22%7D%2C%7B%22x%22%3A1128%2C%22y%22%3A798%2C%22width%22%3A103%2C%22height%22%3A51%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A690%2C%22y%22%3A803%2C%22width%22%3A100%2C%22height%22%3A49%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A818%2C%22y%22%3A805%2C%22width%22%3A101%2C%22height%22%3A47%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A1572%2C%22y%22%3A835%2C%22width%22%3A62%2C%22height%22%3A49%2C%22text%22%3A%22%E7%A8%8B%22%7D%2C%7B%22x%22%3A1131%2C%22y%22%3A944%2C%22width%22%3A97%2C%22height%22%3A53%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A1321%2C%22y%22%3A947%2C%22width%22%3A103%2C%22height%22%3A51%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A1567%2C%22y%22%3A950%2C%22width%22%3A95%2C%22height%22%3A51%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A818%2C%22y%22%3A952%2C%22width%22%3A101%2C%22height%22%3A52%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%2C%7B%22x%22%3A690%2C%22y%22%3A952%2C%22width%22%3A95%2C%22height%22%3A50%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23dde09b%22%2C%22id%22%3A%22uabdccc5d%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h3 data-lake-id="Z9Nmh" id="Z9Nmh" data-lake-index-type="2"><span data-lake-id="u9f07a0c1" id="u9f07a0c1">为什么线程池要先使用阻塞队列，而不是直接增加线程？</span></h3><p data-lake-id="u3cfc4d40" id="u3cfc4d40"><span data-lake-id="uf920d2c7" id="uf920d2c7">因为每创建一个线程都会占用一定的系统资源（如栈空间、线程调度开销等），直接增加线程会迅速消耗系统资源，导致性能下降。<br /></span><span data-lake-id="u0e2edfed" id="u0e2edfed">使用阻塞队列可以将任务暂存，避免线程数量无限增长，确保资源利用率更高。<br /></span><span data-lake-id="u8f2bbfb1" id="u8f2bbfb1">如果阻塞队列都满了，说明此时系统负载很大，再去增加线程到最大线程数去消化任务即可。<br /></span><span data-lake-id="uc55715c5" id="uc55715c5">举个例子：老板现在手下有10个人在干活（核心线程数），突然活变多了，每个人干不过来了，此时老板不会立马招人，它会让这些活积累一下（放到阻塞队列中），看看过段时间能不能消化掉。如果老板发现这个活积累的实在太多了（队列满了），他才会继续招人（达到最大线程数）。这就是所谓的人员（线程）有成本。</span></p><h2 data-lake-id="W2lMm" id="W2lMm" data-lake-index-type="2"><span data-lake-id="u93936b98" id="u93936b98" style="color: rgba(0, 0, 0, 0.88)">你使用过哪些 Java 并发工具类？</span></h2><h3 data-lake-id="Z3ZSV" id="Z3ZSV" data-lake-index-type="2"><span data-lake-id="u7e202207" id="u7e202207">回答重点</span></h3><p data-lake-id="uf9c45149" id="uf9c45149"><span data-lake-id="u8c4eefdb" id="u8c4eefdb">比如：ConcurrentHashMap、AtomicInteger、Semaphore、CyclicBarrier、CountDownLatch、BlockingQueue 等等。<br /></span><span data-lake-id="u7f267e03" id="u7f267e03">这个问题只要把你知道的一些并发类名字说出来就行了，然后等面试官选择其中一个去询问即可（一般需要结合简历中项目的业务场景，所以需要根据自己的业务提前准备）。<br /></span><span data-lake-id="ua354742c" id="ua354742c">具体的并发类分析看扩展知识。</span></p><h3 data-lake-id="RpoAi" id="RpoAi" data-lake-index-type="2"><span data-lake-id="u1e9edae6" id="u1e9edae6">扩展知识</span></h3><h4 data-lake-id="js3qi" id="js3qi" data-lake-index-type="2"><span data-lake-id="ub3bf2bff" id="ub3bf2bff">1. ConcurrentHashMap</span></h4><ul list="u4a6d4706"><li fid="u86e560c3" data-lake-id="u2b3f4994" id="u2b3f4994"><strong><span data-lake-id="u633922a0" id="u633922a0">作用</span></strong><span data-lake-id="uaf24dea9" id="uaf24dea9">：是一个线程安全且高效的哈希表，支持并发访问。</span></li><li fid="u86e560c3" data-lake-id="u3e9bacba" id="u3e9bacba"><strong><span data-lake-id="u56972ecb" id="u56972ecb">用法</span></strong><span data-lake-id="u3a7d5ae8" id="u3a7d5ae8">：多个线程可以同时进行读写操作，而不会导致线程安全问题。</span></li></ul><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22ConcurrentHashMap%3CString%2C%20Integer%3E%20map%20%3D%20new%20ConcurrentHashMap%3C%3E()%3B%5Cnmap.put(%5C%22key1%5C%22%2C%201)%3B%5CnInteger%20value%20%3D%20map.get(%5C%22key1%5C%22)%3B%5Cnmap.computeIfAbsent(%5C%22key2%5C%22%2C%20k%20-%3E%202)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Atrue%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22oq45c%22%7D"></card><h4 data-lake-id="sgfZr" id="sgfZr" data-lake-index-type="2"><span data-lake-id="ub0c59742" id="ub0c59742">2. AtomicInteger</span></h4><ul list="ued3f931f"><li fid="uee41922c" data-lake-id="u759dc400" id="u759dc400"><strong><span data-lake-id="u62aeaeac" id="u62aeaeac">作用</span></strong><span data-lake-id="u7ec71c3d" id="u7ec71c3d">：提供一种线程安全的方式对 int 类型进行原子操作，如增减、比较。</span></li><li fid="uee41922c" data-lake-id="u07e30424" id="u07e30424"><strong><span data-lake-id="u1fb5c1e9" id="u1fb5c1e9">用法</span></strong><span data-lake-id="ude3bda70" id="ude3bda70">：适用于需要频繁对数值进行无锁操作的场景。</span></li></ul><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22AtomicInteger%20atomicInt%20%3D%20new%20AtomicInteger(0)%3B%5CnatomicInt.incrementAndGet()%3B%20%2F%2F%20%E9%80%92%E5%A2%9E%5CnatomicInt.decrementAndGet()%3B%20%2F%2F%20%E9%80%92%E5%87%8F%5CnatomicInt.compareAndSet(1%2C%202)%3B%20%2F%2F%20%E6%AF%94%E8%BE%83%E5%B9%B6%E8%AE%BE%E7%BD%AE%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Atrue%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22TeGC4%22%7D"></card><h3 data-lake-id="Iyjyz" id="Iyjyz" data-lake-index-type="2"><span data-lake-id="u9d22e755" id="u9d22e755">3. Semaphore</span></h3><ul list="uf89e4be3"><li fid="ub5b765b0" data-lake-id="udd519e4f" id="udd519e4f"><strong><span data-lake-id="u5d20c563" id="u5d20c563">作用</span></strong><span data-lake-id="u209902a5" id="u209902a5">：控制访问资源的线程数，可以用来实现限流或访问控制。</span></li><li fid="ub5b765b0" data-lake-id="u228e207d" id="u228e207d"><strong><span data-lake-id="u38ed361e" id="u38ed361e">用法</span></strong><span data-lake-id="u0e846792" id="u0e846792">：在资源有限的情况下，控制同时访问的线程数量。</span></li></ul><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22Semaphore%20semaphore%20%3D%20new%20Semaphore(3)%3B%5Cntry%20%7B%5Cn%20%20%20%20semaphore.acquire()%3B%20%2F%2F%20%E8%8E%B7%E5%8F%96%E8%AE%B8%E5%8F%AF%5Cn%20%20%20%20%2F%2F%20%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%5Cn%7D%20finally%20%7B%5Cn%20%20%20%20semaphore.release()%3B%20%2F%2F%20%E9%87%8A%E6%94%BE%E8%AE%B8%E5%8F%AF%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Atrue%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22KGjD8%22%7D"></card><h3 data-lake-id="eEWVl" id="eEWVl" data-lake-index-type="2"><span data-lake-id="udfa5ca42" id="udfa5ca42">4. CyclicBarrier</span></h3><ul list="u7212aa2d"><li fid="ua81d2ee5" data-lake-id="u80c505ef" id="u80c505ef"><strong><span data-lake-id="u4083507b" id="u4083507b">作用</span></strong><span data-lake-id="u2289402b" id="u2289402b">：让一组线程到达一个共同的同步点，然后一起继续执行。常用于分阶段任务执行。</span></li><li fid="ua81d2ee5" data-lake-id="u523d82c4" id="u523d82c4"><strong><span data-lake-id="ud1c70f82" id="ud1c70f82">用法</span></strong><span data-lake-id="ub93c2837" id="ub93c2837">：适用于需要所有线程在某个点都完成后再继续的场景。</span></li></ul><p data-lake-id="ub64492e4" id="ub64492e4"><br></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22CyclicBarrier%20barrier%20%3D%20new%20CyclicBarrier(3%2C%20()%20-%3E%20%7B%5Cn%20%20%20%20System.out.println(%5C%22%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E9%83%BD%E5%88%B0%E8%BE%BE%E4%BA%86%E5%B1%8F%E9%9A%9C%E7%82%B9%5C%22)%3B%5Cn%7D)%3B%5CnRunnable%20task%20%3D%20()%20-%3E%20%7B%5Cn%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20barrier.await()%3B%20%2F%2F%20%E7%AD%89%E5%BE%85%E5%85%B6%E4%BB%96%E7%BA%BF%E7%A8%8B%5Cn%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cnnew%20Thread(task).start()%3B%5Cnnew%20Thread(task).start()%3B%5Cnnew%20Thread(task).start()%3B%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22rgnYK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h3 data-lake-id="l0IAf" id="l0IAf" data-lake-index-type="2"><span data-lake-id="u107a6214" id="u107a6214">5. CountDownLatch</span></h3><ul list="ua7305226"><li fid="uaf590f37" data-lake-id="u64a8dd6f" id="u64a8dd6f"><strong><span data-lake-id="uad7262f9" id="uad7262f9">作用</span></strong><span data-lake-id="u9ce82477" id="u9ce82477">：一个线程（或多个）等待其他线程完成操作。</span></li><li fid="uaf590f37" data-lake-id="ua476a197" id="ua476a197"><strong><span data-lake-id="ueed0c270" id="ueed0c270">用法</span></strong><span data-lake-id="uabe8495b" id="uabe8495b">：适用于主线程需要等待多个子线程完成任务的场景。</span></li></ul><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22CountDownLatch%20latch%20%3D%20new%20CountDownLatch(3)%3B%5CnRunnable%20task%20%3D%20()%20-%3E%20%7B%5Cn%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%5Cn%20%20%20%20%7D%20finally%20%7B%5Cn%20%20%20%20%20%20%20%20latch.countDown()%3B%20%2F%2F%20%E4%BB%BB%E5%8A%A1%E5%AE%8C%E6%88%90%EF%BC%8C%E8%AE%A1%E6%95%B0%E5%99%A8%E5%87%8F%E4%B8%80%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cnnew%20Thread(task).start()%3B%5Cnnew%20Thread(task).start()%3B%5Cnnew%20Thread(task).start()%3B%5Cnlatch.await()%3B%20%2F%2F%20%E7%AD%89%E5%BE%85%E6%89%80%E6%9C%89%E4%BB%BB%E5%8A%A1%E5%AE%8C%E6%88%90%5CnSystem.out.println(%5C%22%E6%89%80%E6%9C%89%E4%BB%BB%E5%8A%A1%E9%83%BD%E5%AE%8C%E6%88%90%E4%BA%86%5C%22)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Atrue%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22HY433%22%7D"></card><h3 data-lake-id="kcqf1" id="kcqf1" data-lake-index-type="2"><span data-lake-id="u8d4363b4" id="u8d4363b4">6. BlockingQueue</span></h3><ul list="u00bd99cf"><li fid="u928c6651" data-lake-id="u1b3300a6" id="u1b3300a6"><strong><span data-lake-id="u45c8ad9f" id="u45c8ad9f">作用</span></strong><span data-lake-id="u4a5d5d87" id="u4a5d5d87">：是一个线程安全的队列，支持阻塞操作，适用于生产者 - 消费者模式。</span></li><li fid="u928c6651" data-lake-id="u34eaef38" id="u34eaef38"><strong><span data-lake-id="ufde5c135" id="ufde5c135">用法</span></strong><span data-lake-id="u6ae42f4a" id="u6ae42f4a">：生产者线程将元素放入队列，消费者线程从队列中取元素，队列为空时消费者线程阻塞。</span></li></ul><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22BlockingQueue%3CString%3E%20queue%20%3D%20new%20LinkedBlockingQueue%3C%3E()%3B%5CnRunnable%20producer%20%3D%20()%20-%3E%20%7B%5Cn%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20queue.put(%5C%22item%5C%22)%3B%20%2F%2F%20%E6%94%BE%E5%85%A5%E5%85%83%E7%B4%A0%5Cn%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%7D%5Cn%7D%3B%5CnRunnable%20consumer%20%3D%20()%20-%3E%20%7B%5Cn%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20String%20item%20%3D%20queue.take()%3B%20%2F%2F%20%E5%8F%96%E5%87%BA%E5%85%83%E7%B4%A0%5Cn%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cnnew%20Thread(producer).start()%3B%5Cnnew%20Thread(consumer).start()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Atrue%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22qL4y6%22%7D"></card><h2 data-lake-id="enw4T" id="enw4T" data-lake-index-type="2"><span data-lake-id="ud92a168e" id="ud92a168e" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">什么是 Java 的 CAS（Compare-And-Swap）操作？</span></h2><h3 data-lake-id="QbFDy" id="QbFDy" data-lake-index-type="2"><span data-lake-id="ued46adb4" id="ued46adb4">回答重点</span></h3><p data-lake-id="u0c77673a" id="u0c77673a"><span data-lake-id="uc3833f97" id="uc3833f97">CAS 是一种硬件级别的原子操作，它比较内存中的某个值是否为预期值，如果是，则更新为新值，否则不做修改。<br /></span><strong><span data-lake-id="ua38e8d87" id="ua38e8d87">工作原理</span></strong><span data-lake-id="u383ee4fe" id="u383ee4fe">：</span></p><ul list="u5b0714fa"><li fid="u832c6182" data-lake-id="u25af3563" id="u25af3563"><strong><span data-lake-id="uee1557b1" id="uee1557b1">比较（Compare）</span></strong><span data-lake-id="u8771c265" id="u8771c265">：CAS 会检查内存中的某个值是否与预期值相等。 </span></li><li fid="u832c6182" data-lake-id="u8f95ab00" id="u8f95ab00"><strong><span data-lake-id="udee714b7" id="udee714b7">交换（Swap）</span></strong><span data-lake-id="ub1ab83da" id="ub1ab83da">：如果相等，则将内存中的值更新为新值。 </span></li><li fid="u832c6182" data-lake-id="u41d51747" id="u41d51747"><strong><span data-lake-id="ue590fe43" id="ue590fe43">失败重试</span></strong><span data-lake-id="u89fa05fa" id="u89fa05fa">：如果不相等，说明有其他线程已经修改了该值，CAS 操作失败，一般会利用重试，直到成功。</span></li></ul><h3 data-lake-id="OnSWw" id="OnSWw" data-lake-index-type="2"><span data-lake-id="u7c1c60c0" id="u7c1c60c0">扩展知识</span></h3><h4 data-lake-id="oMA6n" id="oMA6n" data-lake-index-type="2"><span data-lake-id="u2dfc449a" id="u2dfc449a">举例说明</span></h4><p data-lake-id="u50b24a44" id="u50b24a44"><span data-lake-id="ub0108b4d" id="ub0108b4d">我们经常有累加需求，比较一个值是否等于 1，如果等于 1 我们将它替换成 2，如果等于 2 替换成 3。<br /></span><span data-lake-id="u8fc669bd" id="u8fc669bd">这种比较在多线程的情况下就不安全，比如此时同时有两个线程执行到比较值是否等于 1，然后两个线程发现都等于 1。然后两个线程都将它变成了 2，这样明明加了两次，值却等于 2。</span></p><table data-lake-id="FGTLV" id="FGTLV" margin="true" class="lake-table" style="width: 750px"><colgroup><col width="250"><col width="250"><col width="250"></colgroup><tbody><tr data-lake-id="uaa2fe084" id="uaa2fe084"><td data-lake-id="ub0ed2162" id="ub0ed2162"><p data-lake-id="ue62f5304" id="ue62f5304"><span data-lake-id="u59ed4031" id="u59ed4031">时间轴</span></p></td><td data-lake-id="ub2cacb85" id="ub2cacb85"><p data-lake-id="u9e9688f6" id="u9e9688f6"><span data-lake-id="uef16f6a7" id="uef16f6a7">线程 A</span></p></td><td data-lake-id="u3201836b" id="u3201836b"><p data-lake-id="u19838363" id="u19838363"><span data-lake-id="u1d685ad8" id="u1d685ad8">线程 B</span></p></td></tr><tr data-lake-id="ub024ebc5" id="ub024ebc5"><td data-lake-id="u14e43f06" id="u14e43f06"><p data-lake-id="u60d6b80a" id="u60d6b80a"><br></p></td><td data-lake-id="ubca93df2" id="ubca93df2"><p data-lake-id="u8cc11693" id="u8cc11693"><span data-lake-id="u02ed2c5f" id="u02ed2c5f">a == 1?</span></p></td><td data-lake-id="u70b77d63" id="u70b77d63"><p data-lake-id="ue127b579" id="ue127b579"><span data-lake-id="u915a821e" id="u915a821e">a == 1?</span></p></td></tr><tr data-lake-id="uc7971c6b" id="uc7971c6b"><td data-lake-id="ubc97ca8b" id="ubc97ca8b"><p data-lake-id="u46057781" id="u46057781"><br></p></td><td data-lake-id="u391d578e" id="u391d578e"><p data-lake-id="udd8738c2" id="udd8738c2"><span data-lake-id="u0898bcdc" id="u0898bcdc">a = 2</span></p></td><td data-lake-id="u7c233a5b" id="u7c233a5b"><p data-lake-id="ude635722" id="ude635722"><span data-lake-id="u712c2b0f" id="u712c2b0f">a = 2</span></p></td></tr></tbody></table><p data-lake-id="ufc62d535" id="ufc62d535"><span data-lake-id="ud06a2c71" id="ud06a2c71">最终 a 执行了两次加法，但是值等于 2。</span></p><p data-lake-id="u9b132825" id="u9b132825"><span data-lake-id="ufb107a90" id="ufb107a90">这种情况其实加锁可以解决，但是加锁是比较消耗资源的。<br /></span><span data-lake-id="u159f0d0f" id="u159f0d0f">因此硬件层面就给予支持，将这个比较和交换的动作封装成一个指令，这样就保证了原子性，不会判断值确实等于 1，但是替换的时候值已经不等于 1 了。<br /></span><span data-lake-id="u26cff150" id="u26cff150">这指令就是 CAS。<br /></span><span data-lake-id="u95a08d4e" id="u95a08d4e">CAS 需要三个操作数，分别是旧的预期值(图中的 1)，变量内存地址(图中 a 的内存地址)，新值(图中的 2)。<br /></span><span data-lake-id="u6419e769" id="u6419e769">指令是根据变量地址拿到值，比较是否和预期值相等，如果是的话则替换成新值，如果不是则不替换。</span></p><h4 data-lake-id="wPJK6" id="wPJK6" data-lake-index-type="2"><span data-lake-id="uf01532a4" id="uf01532a4">CAS 的优缺点</span></h4><p data-lake-id="u8cffd1d9" id="u8cffd1d9"><strong><span data-lake-id="u4071662a" id="u4071662a">优点</span></strong><span data-lake-id="u2ec698d6" id="u2ec698d6">：</span></p><ul list="u99fba6b9"><li fid="uc9a94004" data-lake-id="u2b60cded" id="u2b60cded"><strong><span data-lake-id="uc185b32d" id="uc185b32d">无锁并发</span></strong><span data-lake-id="ud3270e7f" id="ud3270e7f">：CAS 操作不使用锁，因此不会导致线程阻塞，提高了系统的并发性和性能。 </span></li><li fid="uc9a94004" data-lake-id="u6bd92cdb" id="u6bd92cdb"><strong><span data-lake-id="u61904d6e" id="u61904d6e">原子性</span></strong><span data-lake-id="ua18670ec" id="ua18670ec">：CAS 操作是原子的，保证了线程安全。</span></li></ul><p data-lake-id="u9ac7b52c" id="u9ac7b52c"><strong><span data-lake-id="u5e6cdbf0" id="u5e6cdbf0">缺点</span></strong><span data-lake-id="u529508d3" id="u529508d3">：</span></p><ul list="uc3b65124"><li fid="u14e544b4" data-lake-id="u502079fd" id="u502079fd"><strong><span data-lake-id="u05fd356f" id="u05fd356f">ABA 问题</span></strong><span data-lake-id="u394ad6d6" id="u394ad6d6">：CAS 操作中，如果一个变量值从 A 变成 B，又变回 A，CAS 无法检测到这种变化，可能导致错误。 </span></li><li fid="u14e544b4" data-lake-id="u059a6ffb" id="u059a6ffb"><strong><span data-lake-id="u5cf2d23f" id="u5cf2d23f">自旋开销</span></strong><span data-lake-id="ub1e2b70a" id="ub1e2b70a">：CAS 操作通常通过自旋实现，可能导致 CPU 资源浪费，尤其在高并发情况下。 </span></li><li fid="u14e544b4" data-lake-id="u9648885d" id="u9648885d"><strong><span data-lake-id="u6e643aba" id="u6e643aba">单变量限制</span></strong><span data-lake-id="u4af1c9cf" id="u4af1c9cf">：CAS 操作仅适用于单个变量的更新，不适用于涉及多个变量的复杂操作。</span></li></ul><h4 data-lake-id="Rz1HY" id="Rz1HY" data-lake-index-type="2"><span data-lake-id="u766e9e1d" id="u766e9e1d">ABA 问题</span></h4><p data-lake-id="u34203a70" id="u34203a70"><span data-lake-id="u7ad829d3" id="u7ad829d3">ABA 问题是指当变量值从 A 变为 B 再变回 A 时，CAS 操作无法检测到这种变化。解决 ABA 问题的一种常见方法是引入版本号或时间戳，每次更新变量时同时更新版本号，从而检测到变量的变化。<br /></span><span data-lake-id="u3843bf46" id="u3843bf46">Java 中的 </span><code data-lake-id="uf1824035" id="uf1824035"><span data-lake-id="uc048fa8f" id="uc048fa8f">AtomicStampedReference</span></code><span data-lake-id="u84628e50" id="u84628e50"> 就提供了版本号解决方案，它内部提供了一个 </span><code data-lake-id="ubcfca921" id="ubcfca921"><span data-lake-id="ue38fa0be" id="ue38fa0be">Pair</span></code><span data-lake-id="uc192c094" id="uc192c094"> 封装了引用和版本号，利用 </span><code data-lake-id="u6e6e92fe" id="u6e6e92fe"><span data-lake-id="u043f5529" id="u043f5529">volatile</span></code><span data-lake-id="u547fb17a" id="u547fb17a"> 保证了可见性。</span></p><p data-lake-id="udcd55277" id="udcd55277"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745827535091-45e35b95-3325-4b6b-af7f-4b1ed59c68fe.png%22%2C%22taskId%22%3A%22u99042d07-9e41-4556-8e91-ccd51eb867f%22%2C%22clientId%22%3A%22u11139ec7-d5cb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1242%2C%22height%22%3A529%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A417248%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1863%2C%22originHeight%22%3A793%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22PUBLIC%20CLASS%20S%20ATOMICSTAMPEDREFERENCE%3CV%3E%20%20PRIVATE%20STATIC%20CLASS%20PAIR%3CT%3E%20%7B%20%20FINAL%20T%20REFERENCE%3B%20FINAL%20INT%20STAMP%20%20REFERENCE%2C%20INT%20STAMP)%20%7B%20PAIR(T%20PRIVATE%20THIS%20REFERENCE%20REFERENCE%3B%20THIS.STAMP%20STAMP%20%20RETURN%20NEW%20PAIR%3CT%3E(REFERENCE%2C%20STAMP)%3B%20STATIC%20%3CT%3E%20PAIR%3CT%3E%20OF(T%20REFERENCE%2C%20INT%20STAMP)%20%E5%AD%90%20PAIR%3CV%3E%20VOLATILE%20PRIVATE%20PAIR%3B%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A24%2C%22y%22%3A23%2C%22width%22%3A246%2C%22height%22%3A32%2C%22text%22%3A%22PUBLIC%20CLASS%22%7D%2C%7B%22x%22%3A252%2C%22y%22%3A24%2C%22width%22%3A551%2C%22height%22%3A34%2C%22text%22%3A%22S%20ATOMICSTAMPEDREFERENCE%3CV%3E%22%7D%2C%7B%22x%22%3A99%2C%22y%22%3A127%2C%22width%22%3A587%2C%22height%22%3A38%2C%22text%22%3A%22%20PRIVATE%20STATIC%20CLASS%20PAIR%3CT%3E%20%7B%22%7D%2C%7B%22x%22%3A179%2C%22y%22%3A182%2C%22width%22%3A346%2C%22height%22%3A40%2C%22text%22%3A%22%20FINAL%20T%20REFERENCE%3B%22%7D%2C%7B%22x%22%3A178%2C%22y%22%3A240%2C%22width%22%3A180%2C%22height%22%3A36%2C%22text%22%3A%22FINAL%20INT%22%7D%2C%7B%22x%22%3A375%2C%22y%22%3A246%2C%22width%22%3A101%2C%22height%22%3A29%2C%22text%22%3A%22STAMP%22%7D%2C%7B%22x%22%3A469%2C%22y%22%3A288%2C%22width%22%3A445%2C%22height%22%3A44%2C%22text%22%3A%22%20REFERENCE%2C%20INT%20STAMP)%20%7B%22%7D%2C%7B%22x%22%3A337%2C%22y%22%3A294%2C%22width%22%3A114%2C%22height%22%3A33%2C%22text%22%3A%22PAIR(T%22%7D%2C%7B%22x%22%3A182%2C%22y%22%3A296%2C%22width%22%3A138%2C%22height%22%3A31%2C%22text%22%3A%22PRIVATE%22%7D%2C%7B%22x%22%3A259%2C%22y%22%3A352%2C%22width%22%3A77%2C%22height%22%3A31%2C%22text%22%3A%22THIS%22%7D%2C%7B%22x%22%3A357%2C%22y%22%3A354%2C%22width%22%3A163%2C%22height%22%3A27%2C%22text%22%3A%22REFERENCE%22%7D%2C%7B%22x%22%3A575%2C%22y%22%3A355%2C%22width%22%3A199%2C%22height%22%3A29%2C%22text%22%3A%22REFERENCE%3B%22%7D%2C%7B%22x%22%3A258%2C%22y%22%3A405%2C%22width%22%3A198%2C%22height%22%3A32%2C%22text%22%3A%22THIS.STAMP%22%7D%2C%7B%22x%22%3A507%2C%22y%22%3A409%2C%22width%22%3A108%2C%22height%22%3A31%2C%22text%22%3A%22STAMP%22%7D%2C%7B%22x%22%3A1104%2C%22y%22%3A542%2C%22width%22%3A698%2C%22height%22%3A39%2C%22text%22%3A%22%20RETURN%20NEW%20PAIR%3CT%3E(REFERENCE%2C%20STAMP)%3B%22%7D%2C%7B%22x%22%3A174%2C%22y%22%3A545%2C%22width%22%3A867%2C%22height%22%3A37%2C%22text%22%3A%22STATIC%20%3CT%3E%20PAIR%3CT%3E%20OF(T%20REFERENCE%2C%20INT%20STAMP)%22%7D%2C%7B%22x%22%3A98%2C%22y%22%3A598%2C%22width%22%3A27%2C%22height%22%3A38%2C%22text%22%3A%22%E5%AD%90%22%7D%2C%7B%22x%22%3A428%2C%22y%22%3A711%2C%22width%22%3A139%2C%22height%22%3A29%2C%22text%22%3A%22PAIR%3CV%3E%22%7D%2C%7B%22x%22%3A258%2C%22y%22%3A711%2C%22width%22%3A155%2C%22height%22%3A30%2C%22text%22%3A%22VOLATILE%22%7D%2C%7B%22x%22%3A103%2C%22y%22%3A712%2C%22width%22%3A136%2C%22height%22%3A30%2C%22text%22%3A%22PRIVATE%22%7D%2C%7B%22x%22%3A581%2C%22y%22%3A713%2C%22width%22%3A96%2C%22height%22%3A29%2C%22text%22%3A%22PAIR%3B%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232d2b2a%22%2C%22id%22%3A%22ue5165400%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ud69841c2" id="ud69841c2"><span data-lake-id="u7b819e75" id="u7b819e75">在内部CAS中，添加了版本符号的对比：</span></p><p data-lake-id="u95e8c05e" id="u95e8c05e"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745827555402-60336cd5-c1a3-4780-9b13-0efc5a567196.png%22%2C%22taskId%22%3A%22u6bae5d00-06f5-4e34-a44d-8c45110800a%22%2C%22clientId%22%3A%22u11139ec7-d5cb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1110.6666666666667%2C%22height%22%3A555%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A531734%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1666%2C%22originHeight%22%3A832%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22PUBLIC%20BOOLEAN%20COMPAREANDSET(V%20EXPECTEDREFERENCE%20V%20NEWREFERENCE%2C%20INT%20EXPECTEDSTAMP%2C%20INT%20NEWSTAMP)%20%7B%20PAIR%3CV%3E%20CURRENT%20PAIR%3B%20RETURN%20EXPECTEDREFERENCE%20CURRENT.REFERENCE%20%26%26%20AMP%20CURRENT.STAMP%20%26%26%20EXPECTEDSTAMP%20((NEWREFERENCE%20CE%20CURRENT.REFERENCE%20%26%26%20NEWSTAMP%20%E4%B8%89%20CURRENT.STAMP)%20CASPAIR(CURRENT%2C%20PAIR.OF(NEWREFERENCE%2C%20NEWSTAMP)))%3B%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A121%2C%22y%22%3A43%2C%22width%22%3A707%2C%22height%22%3A43%2C%22text%22%3A%22PUBLIC%20BOOLEAN%20COMPAREANDSET(V%22%7D%2C%7B%22x%22%3A890%2C%22y%22%3A47%2C%22width%22%3A420%2C%22height%22%3A38%2C%22text%22%3A%22EXPECTEDREFERENCE%22%7D%2C%7B%22x%22%3A796%2C%22y%22%3A110%2C%22width%22%3A36%2C%22height%22%3A39%2C%22text%22%3A%22V%22%7D%2C%7B%22x%22%3A895%2C%22y%22%3A116%2C%22width%22%3A296%2C%22height%22%3A33%2C%22text%22%3A%22NEWREFERENCE%2C%22%7D%2C%7B%22x%22%3A802%2C%22y%22%3A176%2C%22width%22%3A416%2C%22height%22%3A44%2C%22text%22%3A%22INT%20EXPECTEDSTAMP%2C%22%7D%2C%7B%22x%22%3A801%2C%22y%22%3A239%2C%22width%22%3A357%2C%22height%22%3A48%2C%22text%22%3A%22INT%20NEWSTAMP)%20%7B%22%7D%2C%7B%22x%22%3A214%2C%22y%22%3A307%2C%22width%22%3A167%2C%22height%22%3A37%2C%22text%22%3A%22PAIR%3CV%3E%22%7D%2C%7B%22x%22%3A400%2C%22y%22%3A309%2C%22width%22%3A355%2C%22height%22%3A42%2C%22text%22%3A%22CURRENT%20PAIR%3B%22%7D%2C%7B%22x%22%3A215%2C%22y%22%3A379%2C%22width%22%3A142%2C%22height%22%3A32%2C%22text%22%3A%22RETURN%22%7D%2C%7B%22x%22%3A309%2C%22y%22%3A441%2C%22width%22%3A964%2C%22height%22%3A43%2C%22text%22%3A%22EXPECTEDREFERENCE%20CURRENT.REFERENCE%20%26%26%22%7D%2C%7B%22x%22%3A563%2C%22y%22%3A506%2C%22width%22%3A518%2C%22height%22%3A38%2C%22text%22%3A%22AMP%20CURRENT.STAMP%20%26%26%22%7D%2C%7B%22x%22%3A308%2C%22y%22%3A509%2C%22width%22%3A318%2C%22height%22%3A40%2C%22text%22%3A%22EXPECTEDSTAMP%22%7D%2C%7B%22x%22%3A313%2C%22y%22%3A570%2C%22width%22%3A341%2C%22height%22%3A47%2C%22text%22%3A%22((NEWREFERENCE%22%7D%2C%7B%22x%22%3A604%2C%22y%22%3A574%2C%22width%22%3A598%2C%22height%22%3A38%2C%22text%22%3A%22CE%20CURRENT.REFERENCE%20%26%26%22%7D%2C%7B%22x%22%3A356%2C%22y%22%3A640%2C%22width%22%3A605%2C%22height%22%3A37%2C%22text%22%3A%22NEWSTAMP%20%E4%B8%89%20CURRENT.STAMP)%22%7D%2C%7B%22x%22%3A334%2C%22y%22%3A698%2C%22width%22%3A1193%2C%22height%22%3A50%2C%22text%22%3A%22CASPAIR(CURRENT%2C%20PAIR.OF(NEWREFERENCE%2C%20NEWSTAMP)))%3B%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2344382a%22%2C%22id%22%3A%22u75f5758a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u44548dce" id="u44548dce"><span data-lake-id="ucf06d070" id="ucf06d070">这样就避免了ABA的问题。简单实用示例如下</span></p><p data-lake-id="ub006905d" id="ub006905d"><span data-lake-id="u08939cdb" id="u08939cdb">​</span><br></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20private%20AtomicStampedReference%3CInteger%3E%20atomicStampedReference%20%3D%20new%20AtomicStampedReference%3C%3E(0%2C%200)%3B%5Cn%5Cn%20%20%20%20public%20void%20updateValue(int%20expected%2C%20int%20newValue)%20%7B%5Cn%20%20%20%20%20%20%20%20int%5B%5D%20stampHolder%20%3D%20new%20int%5B1%5D%3B%5Cn%20%20%20%20%20%20%20%20Integer%20currentValue%20%3D%20atomicStampedReference.get(stampHolder)%3B%5Cn%20%20%20%20%20%20%20%20int%20currentStamp%20%3D%20stampHolder%5B0%5D%3B%5Cn%5Cn%20%20%20%20%20%20%20%20boolean%20updated%20%3D%20atomicStampedReference.compareAndSet(expected%2C%20newValue%2C%20currentStamp%2C%20currentStamp%20%2B%201)%3B%5Cn%20%20%20%20%20%20%20%20if%20(updated)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Value%20updated%20to%20%5C%22%20%2B%20newValue)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Update%20failed%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22IQlTJ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ubcfccae0" id="ubcfccae0"><span data-lake-id="ua74d0afc" id="ua74d0afc" style="color: rgb(28, 31, 35)">Java 还提供了一个 `AtomicMarkableReference` 类，原理和 `AtomicStampedReference` 类似，差别就是它内部只要一个 bool 值，只能表示数据是否被修改过。 </span></p><p data-lake-id="u5a476e65" id="u5a476e65"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745827671817-f853ccf2-286c-4072-aadf-145120edd1fd.png%22%2C%22taskId%22%3A%22u59a3b3fa-2d8e-407e-9410-70583130536%22%2C%22clientId%22%3A%22u11139ec7-d5cb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1358.6666666666667%2C%22height%22%3A551%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A481257%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A2038%2C%22originHeight%22%3A826%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22ATOMICMARKABLEREFERENCE%3CV%20CLASS%20PUBLIC%20%20PRIVATE%20STATIC%20CLASS%20PAIR%3CT%3E%20%7B%20FINAL%20REFERENCE%3B%20FINAL%20BOOLEAN%20MARK%3B%20BOOLEAN%20MARK)%20PRIVATE%20PAIR(T%20REFERENCE%2C%20THIS.REFERENCE%20REFERENCE%3A%20THIS.MARK%20%3B%20MARK%3B%20TURN%20NEW%20PAIR%3CT%3E(REFERENCE%2C%20MARK)%3B%20STATIC%20%3CT%3E%20PAIR%3CT%3E%20OF(T%20REFERENCE%2C%20BOOLEAN%20MARK)%20%7B%20RETURN%20NEW%20%E9%9D%A2%E8%AF%95%20%20PRIVATE%20VOLATILE%20PAIR%3CV%3E%20PAIR%3B%20MIANSHIYA.CO%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A274%2C%22y%22%3A8%2C%22width%22%3A518%2C%22height%22%3A34%2C%22text%22%3A%22ATOMICMARKABLEREFERENCE%3CV%22%7D%2C%7B%22x%22%3A149%2C%22y%22%3A8%2C%22width%22%3A110%2C%22height%22%3A35%2C%22text%22%3A%22CLASS%22%7D%2C%7B%22x%22%3A7%2C%22y%22%3A5%2C%22width%22%3A116%2C%22height%22%3A36%2C%22text%22%3A%22PUBLIC%22%7D%2C%7B%22x%22%3A88%2C%22y%22%3A123%2C%22width%22%3A616%2C%22height%22%3A39%2C%22text%22%3A%22%20PRIVATE%20STATIC%20CLASS%20PAIR%3CT%3E%20%7B%22%7D%2C%7B%22x%22%3A171%2C%22y%22%3A185%2C%22width%22%3A115%2C%22height%22%3A34%2C%22text%22%3A%22FINAL%22%7D%2C%7B%22x%22%3A328%2C%22y%22%3A188%2C%22width%22%3A209%2C%22height%22%3A32%2C%22text%22%3A%22REFERENCE%3B%22%7D%2C%7B%22x%22%3A171%2C%22y%22%3A244%2C%22width%22%3A391%2C%22height%22%3A40%2C%22text%22%3A%22FINAL%20BOOLEAN%20MARK%3B%22%7D%2C%7B%22x%22%3A712%2C%22y%22%3A300%2C%22width%22%3A286%2C%22height%22%3A43%2C%22text%22%3A%22BOOLEAN%20MARK)%22%7D%2C%7B%22x%22%3A170%2C%22y%22%3A302%2C%22width%22%3A303%2C%22height%22%3A36%2C%22text%22%3A%22PRIVATE%20PAIR(T%22%7D%2C%7B%22x%22%3A491%2C%22y%22%3A305%2C%22width%22%3A193%2C%22height%22%3A33%2C%22text%22%3A%22REFERENCE%2C%22%7D%2C%7B%22x%22%3A257%2C%22y%22%3A361%2C%22width%22%3A294%2C%22height%22%3A36%2C%22text%22%3A%22THIS.REFERENCE%22%7D%2C%7B%22x%22%3A614%2C%22y%22%3A365%2C%22width%22%3A196%2C%22height%22%3A31%2C%22text%22%3A%22REFERENCE%3A%22%7D%2C%7B%22x%22%3A256%2C%22y%22%3A421%2C%22width%22%3A352%2C%22height%22%3A37%2C%22text%22%3A%22THIS.MARK%20%3B%20MARK%3B%22%7D%2C%7B%22x%22%3A1316%2C%22y%22%3A571%2C%22width%22%3A662%2C%22height%22%3A43%2C%22text%22%3A%22TURN%20NEW%20PAIR%3CT%3E(REFERENCE%2C%20MARK)%3B%22%7D%2C%7B%22x%22%3A169%2C%22y%22%3A575%2C%22width%22%3A1257%2C%22height%22%3A36%2C%22text%22%3A%22STATIC%20%3CT%3E%20PAIR%3CT%3E%20OF(T%20REFERENCE%2C%20BOOLEAN%20MARK)%20%7B%20RETURN%20NEW%22%7D%2C%7B%22x%22%3A1973%2C%22y%22%3A748%2C%22width%22%3A59%2C%22height%22%3A32%2C%22text%22%3A%22%E9%9D%A2%E8%AF%95%22%7D%2C%7B%22x%22%3A83%2C%22y%22%3A744%2C%22width%22%3A631%2C%22height%22%3A51%2C%22text%22%3A%22%20PRIVATE%20VOLATILE%20PAIR%3CV%3E%20PAIR%3B%22%7D%2C%7B%22x%22%3A1846%2C%22y%22%3A789%2C%22width%22%3A190%2C%22height%22%3A31%2C%22text%22%3A%22MIANSHIYA.CO%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232d2c2b%22%2C%22id%22%3A%22uc95a27a3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><span data-lake-id="ucdd29f34" id="ucdd29f34">而 </span><code data-lake-id="u1b0f13c6" id="u1b0f13c6"><span data-lake-id="u4e5bf649" id="u4e5bf649">AtomicStampedReference</span></code><span data-lake-id="u2e319c2f" id="u2e319c2f"> 中的 </span><code data-lake-id="u956c963a" id="u956c963a"><span data-lake-id="u663f365a" id="u663f365a">stamp</span></code><span data-lake-id="uc186c5f3" id="uc186c5f3"> 是 </span><code data-lake-id="u2d560f08" id="u2d560f08"><span data-lake-id="u2de1f7d7" id="u2de1f7d7">int</span></code><span data-lake-id="u15366f8f" id="u15366f8f">，可以表现数据被修改了几次。其它原理都是一致的。</span></p><h3 data-lake-id="eWX5P" id="eWX5P" data-lake-index-type="2"><span data-lake-id="ud360c116" id="ud360c116">CAS 在 Java 中的实现</span></h3><p data-lake-id="ud6fae067" id="ud6fae067"><span data-lake-id="u29160097" id="u29160097">在 Java 中，CAS 操作由 </span><code data-lake-id="u0b77e92e" id="u0b77e92e"><span data-lake-id="uad69dde4" id="uad69dde4">sun.misc.Unsafe</span></code><span data-lake-id="u02f5d038" id="u02f5d038"> 类提供，但该类是内部类，不推荐直接使用。具体是通过 JNI（Java Native Interface）调用这些底层的硬件指令来实现 CAS 操作，从而确保操作的原子性。</span></p><p data-lake-id="uf4217d9f" id="uf4217d9f"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745827734385-1a2f3e0f-263a-4aef-bc88-7d4b1b54d44d.png%22%2C%22taskId%22%3A%22ub9a71ed2-3fbf-43e1-958e-914c6617357%22%2C%22clientId%22%3A%22u11139ec7-d5cb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1249.3333333333333%2C%22height%22%3A317%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A403090%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1874%2C%22originHeight%22%3A476%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22UNSAFE.CLASSX%20DECOMPILED%20.CLASS%20FILE%2CBYTECODE%20VERSION%3A52.0(JAVA%208)%20FINAL%20NATIVELBOOLEAN%20COMPAREANDSWAPOBJECT(ABJECT%20VAR1%2C%20LANG%20VAR2%2C%20OBJECT%20VARARA%2C%20OBJECT%20VAR5)%3B%20304%20PUBLIC%20305%20PUBLIC%20FINAL%20NATIVE%20BOOLEAN%20COMPAREANDSWAPINT(OBJECT%20VARL%2C%20LONG%20VAR2%2C%20INT%20VAR4%2C%20INT%20VAR5)%3A%20306%20307%20VAR2%2C%20LONG%20VAR4%2C%20LONG%20VAR6)%3B%20308%20A%20COMPAREANDSWAPLONG(OBJECT%20VAR1%2C%20LONG%20VAR2%2C%20LA%20PUBLIC%20FINAL%20NATIVE%20BOOLEAN%20Z00%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A58%2C%22y%22%3A10%2C%22width%22%3A172%2C%22height%22%3A28%2C%22text%22%3A%22UNSAFE.CLASSX%22%7D%2C%7B%22x%22%3A18%2C%22y%22%3A66%2C%22width%22%3A723%2C%22height%22%3A33%2C%22text%22%3A%22DECOMPILED%20.CLASS%20FILE%2CBYTECODE%20VERSION%3A52.0(JAVA%208)%22%7D%2C%7B%22x%22%3A332%2C%22y%22%3A172%2C%22width%22%3A1499%2C%22height%22%3A36%2C%22text%22%3A%22FINAL%20NATIVELBOOLEAN%20COMPAREANDSWAPOBJECT(ABJECT%20VAR1%2C%20LANG%20VAR2%2C%20OBJECT%20VARARA%2C%20OBJECT%20VAR5)%3B%22%7D%2C%7B%22x%22%3A12%2C%22y%22%3A178%2C%22width%22%3A45%2C%22height%22%3A22%2C%22text%22%3A%22304%22%7D%2C%7B%22x%22%3A215%2C%22y%22%3A178%2C%22width%22%3A102%2C%22height%22%3A26%2C%22text%22%3A%22PUBLIC%22%7D%2C%7B%22x%22%3A11%2C%22y%22%3A225%2C%22width%22%3A46%2C%22height%22%3A22%2C%22text%22%3A%22305%22%7D%2C%7B%22x%22%3A214%2C%22y%22%3A290%2C%22width%22%3A1483%2C%22height%22%3A40%2C%22text%22%3A%22PUBLIC%20FINAL%20NATIVE%20BOOLEAN%20COMPAREANDSWAPINT(OBJECT%20VARL%2C%20LONG%20VAR2%2C%20INT%20VAR4%2C%20INT%20VAR5)%3A%22%7D%2C%7B%22x%22%3A10%2C%22y%22%3A297%2C%22width%22%3A47%2C%22height%22%3A23%2C%22text%22%3A%22306%22%7D%2C%7B%22x%22%3A10%2C%22y%22%3A343%2C%22width%22%3A47%2C%22height%22%3A24%2C%22text%22%3A%22307%22%7D%2C%7B%22x%22%3A1302%2C%22y%22%3A405%2C%22width%22%3A444%2C%22height%22%3A45%2C%22text%22%3A%22VAR2%2C%20LONG%20VAR4%2C%20LONG%20VAR6)%3B%22%7D%2C%7B%22x%22%3A10%2C%22y%22%3A416%2C%22width%22%3A47%2C%22height%22%3A25%2C%22text%22%3A%22308%22%7D%2C%7B%22x%22%3A673%2C%22y%22%3A411%2C%22width%22%3A712%2C%22height%22%3A42%2C%22text%22%3A%22A%20COMPAREANDSWAPLONG(OBJECT%20VAR1%2C%20LONG%20VAR2%2C%20LA%22%7D%2C%7B%22x%22%3A215%2C%22y%22%3A417%2C%22width%22%3A448%2C%22height%22%3A28%2C%22text%22%3A%22PUBLIC%20FINAL%20NATIVE%20BOOLEAN%22%7D%2C%7B%22x%22%3A7%2C%22y%22%3A460%2C%22width%22%3A51%2C%22height%22%3A18%2C%22text%22%3A%22Z00%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23444134%22%2C%22id%22%3A%22u7a7bb51e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u5a3caddd" id="u5a3caddd"><span data-lake-id="u4f415c09" id="u4f415c09" style="color: rgb(28, 31, 35)">在 Java 中，可以使用并发包中 Atomic 类（如 AtomicInteger、AtomicLong 等），这些类封装了 CAS 操作，提供了线程安全的原子操作: </span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%20boolean%20updated%20%3D%20atomicInteger.compareAndSet(expected%2C%20newValue)%3B%5Cn%20%20%20%20if%20(updated)%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22Value%20updated%20to%20%5C%22%20%2B%20newValue)%3B%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22Update%20failed%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22CiOWB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u2d67a426" id="u2d67a426"><span data-lake-id="u73a4f34b" id="u73a4f34b">CAS 操作的底层实现依赖于硬件的原子指令，如 x86 架构上的 cmpxchg 指令。<br /></span><span data-lake-id="u5703b067" id="u5703b067">在 JDK9 之前，会根据当前处理器是否是多处理器在 cmpxchg 前加上 lock 前缀，给对应写指令的内存区域加锁，使得其它处理器无法读写这块内存区域，保证指令执行的原子性。如果是单处理器则不会添加 lock 前缀指令。<br /></span><span data-lake-id="u41d66b95" id="u41d66b95">但是 JDK9 移除了这个判断，直接添加 lock 前缀指令（基本上市面上都是多处理器了）。</span></p><h3 data-lake-id="mhQsD" id="mhQsD" data-lake-index-type="2"><span data-lake-id="ub774c4b5" id="ub774c4b5">CAS 总线风暴</span></h3><p data-lake-id="ufb6a18ed" id="ufb6a18ed"><span data-lake-id="ud534a952" id="ud534a952">lock 前缀指令会把写缓冲区中的所有数据立即刷新到主内存中。<br /></span><span data-lake-id="uf08b1590" id="uf08b1590">在对称多处理器架构下，每个 cpu 都会通过嗅探总线来检查自己的缓存是否过期。如果某个 cpu 刷新自己的数据到主存，就会通过总线通知其它 cpu 过期对应的缓存，这就实现了内存屏障，保证了缓存一致性。</span></p><p data-lake-id="u7c96697b" id="u7c96697b"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745827816708-f6719d49-8a0f-4645-8b26-3fb70a8eee41.png%22%2C%22taskId%22%3A%22u0f44eaa6-f401-49cb-9074-a56f9b4e9a6%22%2C%22clientId%22%3A%22u11139ec7-d5cb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1244%2C%22height%22%3A716%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A273151%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1866%2C%22originHeight%22%3A1074%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22CPU-O%20CPU-4%20CPU-3%20CPU-1%20%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%20%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%20%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%20%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%20%E6%80%BB%E7%BA%BF%20%E4%B8%BB%E5%AD%98%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A173%2C%22y%22%3A62%2C%22width%22%3A134%2C%22height%22%3A45%2C%22text%22%3A%22CPU-O%22%7D%2C%7B%22x%22%3A1583%2C%22y%22%3A59%2C%22width%22%3A136%2C%22height%22%3A52%2C%22text%22%3A%22CPU-4%22%7D%2C%7B%22x%22%3A1089%2C%22y%22%3A62%2C%22width%22%3A135%2C%22height%22%3A47%2C%22text%22%3A%22CPU-3%22%7D%2C%7B%22x%22%3A627%2C%22y%22%3A63%2C%22width%22%3A127%2C%22height%22%3A47%2C%22text%22%3A%22CPU-1%22%7D%2C%7B%22x%22%3A1045%2C%22y%22%3A310%2C%22width%22%3A210%2C%22height%22%3A60%2C%22text%22%3A%22%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A121%2C%22y%22%3A311%2C%22width%22%3A212%2C%22height%22%3A59%2C%22text%22%3A%22%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A582%2C%22y%22%3A313%2C%22width%22%3A208%2C%22height%22%3A56%2C%22text%22%3A%22%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A1541%2C%22y%22%3A315%2C%22width%22%3A210%2C%22height%22%3A54%2C%22text%22%3A%22%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A868%2C%22y%22%3A653%2C%22width%22%3A103%2C%22height%22%3A54%2C%22text%22%3A%22%E6%80%BB%E7%BA%BF%22%7D%2C%7B%22x%22%3A867%2C%22y%22%3A902%2C%22width%22%3A104%2C%22height%22%3A50%2C%22text%22%3A%22%E4%B8%BB%E5%AD%98%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9e4c9%22%2C%22id%22%3A%22u639a14ed%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ue7a3ce07" id="ue7a3ce07"><span data-lake-id="u1b5333c2" id="u1b5333c2" style="color: rgb(28, 31, 35)">而通过总线来回通信称为 cache 一致性流量。因为都需要通过总线通信，如果这个流量过大，总线就会成为瓶颈，导致本地缓存更新延迟。 如果 CAS 修改同一个变量并发很高，就会导致总线风暴。这也是 CAS 高并发下的一个性能瓶颈。 </span></p><p data-lake-id="uc83dc7ac" id="uc83dc7ac"><span data-lake-id="u361a4129" id="u361a4129" style="color: rgb(28, 31, 35)">​</span><br></p><h2 data-lake-id="fMfha" id="fMfha" data-lake-index-type="2"><span data-lake-id="u951442d4" id="u951442d4" style="color: rgba(0, 0, 0, 0.88)">说说 AQS 吧？</span></h2><h3 data-lake-id="PvYxB" id="PvYxB" data-lake-index-type="2"><span data-lake-id="ua68d9d17" id="ua68d9d17" style="color: rgba(0, 0, 0, 0.88)">回答重点</span></h3><p data-lake-id="u334288d6" id="u334288d6"><span data-lake-id="u4da18575" id="u4da18575" style="color: rgba(0, 0, 0, 0.88)">如果面试官问你为什么需要 AQS，不要长篇大论，容易把自己和面试官绕进去。<br />就这样简要的回答：</span></p><p data-lake-id="u7d478b04" id="u7d478b04"><span data-lake-id="u9f6111e9" id="u9f6111e9" style="color: rgba(0, 0, 0, 0.88)">简单来说 AQS 就是起到了一个抽象、封装的作用，将一些排队、入队、加锁、中断等方法提供出来，便于其他相关 JUC 锁的使用，具体加锁时机、入队时机等都需要实现类自己控制。</span></p><p data-lake-id="u7856a868" id="u7856a868"><span data-lake-id="u379b1f94" id="u379b1f94" style="color: rgba(0, 0, 0, 0.88)">它主要通过维护一个共享状态（state）和一个先进先出（FIFO）的等待队列，来管理线程对共享资源的访问。</span></p><p data-lake-id="ue019f259" id="ue019f259"><span data-lake-id="u65b0fb41" id="u65b0fb41" style="color: rgba(0, 0, 0, 0.88)">state 用 volatile 修饰，表示当前资源的状态。例如，在独占锁中，state 为 0 表示未被占用，为 1 表示已被占用。</span></p><p data-lake-id="u3c574a4a" id="u3c574a4a"><span data-lake-id="u488a5a90" id="u488a5a90" style="color: rgba(0, 0, 0, 0.88)">当线程尝试获取资源失败时，会被加入到 AQS 的等待队列中。这个队列是一个变体的 CLH 队列，采用双向链表结构，节点包含线程的引用、等待状态以及前驱和后继节点的指针。</span></p><p data-lake-id="udbc154b8" id="udbc154b8"><span data-lake-id="uc10e7efc" id="uc10e7efc" style="color: rgba(0, 0, 0, 0.88)">AQS 常见的实现类有 ReentrantLock、CountDownLatch、Semaphore 等等。</span></p><p data-lake-id="ub1bd0626" id="ub1bd0626"><span data-lake-id="u24047f6a" id="u24047f6a" style="color: rgba(0, 0, 0, 0.88)">然后面试官会引申问你具体 ReentrantLock 的实现原理是怎样的呢？</span></p><h2 data-lake-id="gopJX" id="gopJX" data-lake-index-type="2"><span data-lake-id="u128af83c" id="u128af83c" style="color: rgba(0, 0, 0, 0.88)">Synchronized 和 ReentrantLock 有什么区别？</span></h2><h3 data-lake-id="gTYHp" id="gTYHp" data-lake-index-type="2"><span data-lake-id="ubf7548a5" id="ubf7548a5" style="color: rgba(0, 0, 0, 0.88)">回答重点</span></h3><p data-lake-id="u4a56e2e4" id="u4a56e2e4"><span data-lake-id="ufa0fa4b9" id="ufa0fa4b9" style="color: rgba(0, 0, 0, 0.88)">Synchronized 是 Java 内置的关键字，实现基本的同步机制，不支持超时，非公平，不可中断，不支持多条件。<br />ReentrantLock 是 JUC 类库提供的，由 JDK 1.5 引入，支持设置超时时，可避免死锁，比较灵活，且支持公平锁，可中断，支持多条件判断。<br />ReentrantLock 需要手动解锁，而 Synchronized 不需要，它们都是可重入锁。<br />一般情况下用 Synchronized 足矣，比较简单，而 ReentrantLock 比较灵活，支持的功能比较多，所以复杂的情况用 ReentrantLock 。<br />性能问题：很多年前，Synchronized 性能不如 ReentrantLock，现在基本上性能是一致的。</span></p><h3 data-lake-id="sXXLT" id="sXXLT" data-lake-index-type="2"><span data-lake-id="uf3f6f3d7" id="uf3f6f3d7" style="color: rgba(0, 0, 0, 0.88)">扩展知识</span></h3><h4 data-lake-id="wGGgg" id="wGGgg" data-lake-index-type="2"><span data-lake-id="u995afa9e" id="u995afa9e" style="color: rgba(0, 0, 0, 0.88)">可重入锁</span></h4><p data-lake-id="u5c704acc" id="u5c704acc"><span data-lake-id="u3dea1d3d" id="u3dea1d3d" style="color: rgba(0, 0, 0, 0.88)">重入锁指的是同一个线程在持有某个锁的时候，可以再次获取该锁而不会发生死锁。例如以下代码：outer 还需要调用 inner，它们都用到了同一把锁，如果不可重入那么就会导致死锁。</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22hideToolbar%22%3Atrue%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20ReentrantLockExample%20%7B%5Cn%20%20%20%20private%20final%20ReentrantLock%20lock%20%3D%20new%20ReentrantLock()%3B%5Cn%5Cn%20%20%20%20public%20void%20outer()%20%7B%5Cn%20%20%20%20%20%20%20%20lock.lock()%3B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20inner()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20finally%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20lock.unlock()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20void%20inner()%20%7B%5Cn%20%20%20%20%20%20%20%20lock.lock()%3B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20critical%20section%5Cn%20%20%20%20%20%20%20%20%7D%20finally%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20lock.unlock()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22S2V17%22%7D"></card><p data-lake-id="u98c7648c" id="u98c7648c"><span data-lake-id="u81d0986b" id="u81d0986b" style="color: rgba(0, 0, 0, 0.88)">在递归调用或循环调用上锁时，可重入这个特性就十分重要了。</span></p><h4 data-lake-id="oxjQ1" id="oxjQ1" data-lake-index-type="2"><span data-lake-id="uf801ae77" id="uf801ae77" style="color: rgba(0, 0, 0, 0.88)">可重入锁实现方式</span></h4><p data-lake-id="u9b73ff2b" id="u9b73ff2b"><span data-lake-id="ub19e6b24" id="ub19e6b24" style="color: rgba(0, 0, 0, 0.88)">一般可重入锁是通过计数的方式实现，例如维护一个计数器，当前线程抢到锁则+1，如果当前线程再次抢到锁则继续+1。如果当前线程释放锁之后，则计数器-1，当减到 0 则释放当前锁。</span></p><h4 data-lake-id="MkBcB" id="MkBcB" data-lake-index-type="2"><span data-lake-id="u76291dea" id="u76291dea" style="color: rgba(0, 0, 0, 0.88)">扩展 Synchronized 性能优化</span></h4><p data-lake-id="u49b39318" id="u49b39318"><span data-lake-id="u50721102" id="u50721102" style="color: rgba(0, 0, 0, 0.88)">Synchronized 在 JDK 1.6 之后进行了很多性能优化，主要包括以下几种：</span></p><ul list="u25929b6c"><li fid="u701d8b5b" data-lake-id="ucf8256f3" id="ucf8256f3"><span data-lake-id="u7083fb8a" id="u7083fb8a" style="color: rgba(0, 0, 0, 0.88)">偏向锁：如果一个锁被同一个线程多次获得，JVM 会将该锁设置为偏向锁，以减少获取锁的代价。</span></li><li fid="u701d8b5b" data-lake-id="u41ca6c85" id="u41ca6c85"><span data-lake-id="ubbd7aac8" id="ubbd7aac8" style="color: rgba(0, 0, 0, 0.88)">轻量级锁：如果没有线程竞争，JVM 会将锁设置为轻量级锁，使用 CAS 操作代替互斥同步。 </span></li><li fid="u701d8b5b" data-lake-id="u429c1820" id="u429c1820"><span data-lake-id="u01a53d0d" id="u01a53d0d" style="color: rgba(0, 0, 0, 0.88)">锁粗化：JVM 会将一些短时间内连续的锁操作合并为一个锁操作，以减少锁操作的开销。 </span></li><li fid="u701d8b5b" data-lake-id="u3c49f688" id="u3c49f688"><span data-lake-id="u3784c704" id="u3784c704" style="color: rgba(0, 0, 0, 0.88)">锁消除：JVM 在 JIT 编译时会检测到一些没有竞争的锁，并将这些锁去掉，以减少同步的开销。</span></li></ul><h2 data-lake-id="uGZtH" id="uGZtH" data-lake-index-type="2"><span data-lake-id="u8dbcedc3" id="u8dbcedc3" style="color: rgba(0, 0, 0, 0.88)">Java 中 volatile 关键字的作用是什么？</span></h2><h3 data-lake-id="j566w" id="j566w" data-lake-index-type="2"><span data-lake-id="u9ad18f5d" id="u9ad18f5d" style="color: rgba(0, 0, 0, 0.88)">回答重点</span></h3><p data-lake-id="u2fb94967" id="u2fb94967"><span data-lake-id="uba1e363a" id="uba1e363a" style="color: rgba(0, 0, 0, 0.88)">volatile 它的主要作用是保证变量的可见性和禁止指令重排优化。<br />1）可见性（Visibility）：</span></p><ul list="uc8ba2257"><li fid="u2fa77f35" data-lake-id="u4becb1aa" id="u4becb1aa"><span data-lake-id="uc85869a8" id="uc85869a8" style="color: rgba(0, 0, 0, 0.88)">volatile 关键字确保变量的可见性。当一个线程修改了 volatile 变量的值，新值会立即被刷新到主内存中，其他线程在读取该变量时可以立即获得最新的值。这样可以避免线程间由于缓存一致性问题导致的“看见”旧值的现象。<br />2）禁止指令重排序（Ordering）：</span></li><li fid="u2fa77f35" data-lake-id="udfdc2432" id="udfdc2432"><span data-lake-id="u97613ecb" id="u97613ecb" style="color: rgba(0, 0, 0, 0.88)">volatile 还通过内存屏障来禁止特定情况下的指令重排序，从而保证程序的执行顺序符合预期。对 volatile 变量的写操作会在其前面插入一个 StoreStore 屏障，而对 volatile 变量的读操作则会在其后插入一个 LoadLoad 屏障。这确保了在多线程环境下，某些代码块执行顺序的可预测性。</span></li></ul>
<!doctype lake><title>网络篇</title><meta name="doc-version" content="1" /><meta name="viewport" content="fixed" /><meta name="typography" content="classic" /><meta name="paragraphSpacing" content="relax" /><h2 data-lake-id="oj82H" id="oj82H" data-lake-index-type="0"><span data-lake-id="ude64a72d" id="ude64a72d" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">常见的 HTTP 状态码有哪些？</span></h2><p data-lake-id="u379c6381" id="u379c6381"><span data-lake-id="ud089e6f6" id="ud089e6f6"><br /></span><span data-lake-id="uca507c09" id="uca507c09">常见的 HTTP 状态码分为五大类，每个状态码由三位数字组成，第一位数字表示类别：</span></p><ol list="ufedcebf8"><li fid="uf3eb1f88" data-lake-id="uac54560d" id="uac54560d"><span data-lake-id="ue22579dd" id="ue22579dd" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">1xx: 信息响应</span></li></ol><ul list="ufedcebf8" data-lake-indent="1"><li fid="u12b7c2fb" data-lake-id="ucfbd7611" id="ucfbd7611"><span data-lake-id="ufea26f38" id="ufea26f38" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">100 Continue: 服务器已接收请求的初步部分，客户端应继续请求。</span></li><li fid="u12b7c2fb" data-lake-id="u9bc14fd7" id="u9bc14fd7"><span data-lake-id="u3c4a73ce" id="u3c4a73ce" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">101 Switching Protocols: 服务器同意切换协议，如从 HTTP 切换到 WebSocket。</span></li></ul><ol list="ufedcebf8" start="2"><li fid="uf3eb1f88" data-lake-id="uf9d4733b" id="uf9d4733b"><span data-lake-id="uade82701" id="uade82701" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">2xx: 成功</span></li></ol><ul list="ufedcebf8" data-lake-indent="1"><li fid="uc98c995a" data-lake-id="ub57aa597" id="ub57aa597"><span data-lake-id="u6e6f3e85" id="u6e6f3e85" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">200 OK: 请求成功，服务器返回所请求的资源或数据。</span></li><li fid="uc98c995a" data-lake-id="ub6d02e4d" id="ub6d02e4d"><span data-lake-id="u2af9a648" id="u2af9a648" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">201 Created: 请求成功并创建了新的资源，常用于 POST 请求。</span></li><li fid="uc98c995a" data-lake-id="u18efae36" id="u18efae36"><span data-lake-id="u6eefde33" id="u6eefde33" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">204 No Content: 请求成功但服务器不返回任何内容，常用于删除操作。</span></li></ul><ol list="ufedcebf8" start="3"><li fid="uf3eb1f88" data-lake-id="ue8373d9f" id="ue8373d9f"><span data-lake-id="uad63595b" id="uad63595b" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">3xx: 重定向</span></li></ol><ul list="ufedcebf8" data-lake-indent="1"><li fid="ud81bb143" data-lake-id="u91e476ce" id="u91e476ce"><span data-lake-id="u5b381a66" id="u5b381a66" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">301 Moved Permanently: 资源已永久移动到新的 URL，客户端应使用新 URL 访问。</span></li><li fid="ud81bb143" data-lake-id="ub0e627df" id="ub0e627df"><span data-lake-id="uc0f5bba1" id="uc0f5bba1" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">302 Found: 资源临时移动到新的 URL，客户端应继续使用原来的 URL。</span></li><li fid="ud81bb143" data-lake-id="u3f04fcf1" id="u3f04fcf1"><span data-lake-id="u173fad8f" id="u173fad8f" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">304 Not Modified: 资源未修改，客户端可以使用缓存版本。</span></li></ul><ol list="ufedcebf8" start="4"><li fid="uf3eb1f88" data-lake-id="u375247ff" id="u375247ff"><span data-lake-id="ubcc9d0f1" id="ubcc9d0f1" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">4xx: 客户端错误</span></li></ol><ul list="ufedcebf8" data-lake-indent="1"><li fid="u2ea40e83" data-lake-id="u27c1887e" id="u27c1887e"><span data-lake-id="ufcd33eaa" id="ufcd33eaa" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">400 Bad Request: 请求无效或语法错误，服务器无法处理。</span></li><li fid="u2ea40e83" data-lake-id="ub919bf9c" id="ub919bf9c"><span data-lake-id="ud70eea26" id="ud70eea26" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">401 Unauthorized: 请求需要身份验证，客户端未提供有效的凭证。</span></li><li fid="u2ea40e83" data-lake-id="u1c94807f" id="u1c94807f"><span data-lake-id="u1e32fa9d" id="u1e32fa9d" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">403 Forbidden: 服务器理解请求但拒绝执行，通常是权限问题。</span></li><li fid="u2ea40e83" data-lake-id="ub5d1d898" id="ub5d1d898"><span data-lake-id="uc361d036" id="uc361d036" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">404 Not Found: 请求的资源在服务器上未找到。</span></li></ul><ol list="ufedcebf8" start="5"><li fid="uf3eb1f88" data-lake-id="u52e1c3ef" id="u52e1c3ef"><span data-lake-id="u55d4ab25" id="u55d4ab25" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">5xx: 服务器错误</span></li></ol><ul list="ufedcebf8" data-lake-indent="1"><li fid="ud755a904" data-lake-id="uab5d6b54" id="uab5d6b54"><span data-lake-id="u0bb60d4d" id="u0bb60d4d" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">500 Internal Server Error: 服务器内部错误，无法完成请求。</span></li><li fid="ud755a904" data-lake-id="ud2dea290" id="ud2dea290"><span data-lake-id="u9a77a42c" id="u9a77a42c" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">502 Bad Gateway: 服务器作为网关或代理，从上游服务器接收到无效响应。</span></li><li fid="ud755a904" data-lake-id="ucac81ed2" id="ucac81ed2"><span data-lake-id="ua614eb48" id="ua614eb48" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">503 Service Unavailable: 服务器暂时无法处理请求，通常是因为过载或维护。</span></li></ul><h2 data-lake-id="sLjei" id="sLjei" data-lake-index-type="0"><span data-lake-id="u570879c5" id="u570879c5" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">HTTP 请求包含哪些内容，请求头和请求体有哪些类型？</span></h2><h3 data-lake-id="lvQWw" id="lvQWw"><span data-lake-id="uc3d30db6" id="uc3d30db6">HTTP 请求由以下几部分组成：</span></h3><ul list="ue99ce452"><li fid="u02cad672" data-lake-id="u4a95711e" id="u4a95711e"><span data-lake-id="u02be5f72" id="u02be5f72">请求行（Request Line）：包含请求方法（如GET、POST）、请求的资源路径（如 /index.html ）、以及HTTP协议版本（如HTTP/1.1）。</span></li><li fid="u02cad672" data-lake-id="u5fee6cc5" id="u5fee6cc5"><span data-lake-id="u82d61ce0" id="u82d61ce0">请求头（Request Headers）：包含各种键值对，用于传递客户端环境、请求内容、认证信息等。 </span></li><li fid="u02cad672" data-lake-id="u58f6ed04" id="u58f6ed04"><span data-lake-id="ub801e39b" id="ub801e39b">空行（Blank Line）：用于分隔请求头和请求体。</span></li><li fid="u02cad672" data-lake-id="u58dab394" id="u58dab394"><span data-lake-id="u581498f6" id="u581498f6">请求体（Request Body）：仅在POST、PUT等方法中存在，包含需要发送到服务器的数据。</span></li></ul><p data-lake-id="u44934bcb" id="u44934bcb"><span data-lake-id="u861cb06a" id="u861cb06a">常见的请求头类型：</span></p><ul list="u73b0e32f"><li fid="u19d1782f" data-lake-id="u05ab61b4" id="u05ab61b4"><span data-lake-id="ub89e03da" id="ub89e03da">通用头部（General Headers）：适用于请求和响应，如 Cache-Control 、Connection 等。</span></li><li fid="u19d1782f" data-lake-id="u26fa266a" id="u26fa266a"><span data-lake-id="ue163652a" id="ue163652a">请求头部（Request Headers）：特定于请求的头部，如 Host 、User-Agent 、Accept 、Authorization 等。 </span></li><li fid="u19d1782f" data-lake-id="u5c4b12da" id="u5c4b12da"><span data-lake-id="ub6d58bea" id="ub6d58bea">实体头部（Entity Headers）：描述请求体的头部，如 Content-Type 、Content-Length 。</span></li></ul><p data-lake-id="ubd728945" id="ubd728945"><span data-lake-id="ubbb705fe" id="ubbb705fe">请求体的类型：</span></p><ul list="u707520cc"><li fid="uc14f39c8" data-lake-id="uea02c58b" id="uea02c58b"><span data-lake-id="u2e23fa74" id="u2e23fa74">表单数据（Form Data）：application/x-www-form-urlencoded，用于提交表单数据。 </span></li><li fid="uc14f39c8" data-lake-id="uea617a29" id="uea617a29"><span data-lake-id="ued1d96b8" id="ued1d96b8">多部分数据（Multipart Data）：multipart/form-data，用于上传文件或复杂表单数据。 </span></li><li fid="uc14f39c8" data-lake-id="uf9168c68" id="uf9168c68"><span data-lake-id="u7492abaa" id="u7492abaa">JSON数据：application/json，用于提交JSON格式的数据。 </span></li><li fid="uc14f39c8" data-lake-id="u5845711e" id="u5845711e"><span data-lake-id="u674585ed" id="u674585ed">XML数据：application/xml，用于提交XML格式的数据。 </span></li><li fid="uc14f39c8" data-lake-id="u0cbec9ef" id="u0cbec9ef"><span data-lake-id="u21de5f5c" id="u21de5f5c">文本数据：text/plain，用于提交纯文本数据。</span></li></ul><p data-lake-id="ua50f5a89" id="ua50f5a89"><br></p><h3 data-lake-id="A5as4" id="A5as4"><span data-lake-id="u6f60268b" id="u6f60268b">扩展知识</span></h3><ol list="ue6c5ab0e"><li fid="u4f3541cf" data-lake-id="u3175227f" id="u3175227f"><span data-lake-id="u8e2d3dd9" id="u8e2d3dd9">请求方法</span></li></ol><ul list="ue6c5ab0e" data-lake-indent="1"><li fid="u76311691" data-lake-id="u3dbe4abe" id="u3dbe4abe"><span data-lake-id="u48f96088" id="u48f96088">GET：请求指定的资源，通常用于获取数据，不包含请求体。</span></li><li fid="u76311691" data-lake-id="u783677df" id="u783677df"><span data-lake-id="u647cd1be" id="u647cd1be">POST：向服务器提交数据，通常用于表单提交，数据在请求体中。</span></li><li fid="u76311691" data-lake-id="u21e9b253" id="u21e9b253"><span data-lake-id="uaa1a02ee" id="uaa1a02ee">PUT：用于更新资源，数据也在请求体中。</span></li><li fid="u76311691" data-lake-id="u7b5f9d76" id="u7b5f9d76"><span data-lake-id="uab62b3b2" id="uab62b3b2">DELETE：请求删除指定资源。</span></li></ul><ol list="ue6c5ab0e" start="2"><li fid="u4f3541cf" data-lake-id="u71519e41" id="u71519e41"><span data-lake-id="u4b47e967" id="u4b47e967">请求头部</span></li></ol><ul list="ue6c5ab0e" data-lake-indent="1"><li fid="udacdffab" data-lake-id="u43bacfe4" id="u43bacfe4"><span data-lake-id="u14ae004a" id="u14ae004a">Host：指定请求的主机名及端口，HTTP/1.1中必须包含。</span></li><li fid="udacdffab" data-lake-id="u6b4d0f77" id="u6b4d0f77"><span data-lake-id="uca0dd7e8" id="uca0dd7e8">User-Agent：标识客户端信息，通常用于服务器端的统计和个性化服务。</span></li><li fid="udacdffab" data-lake-id="u38a3c067" id="u38a3c067"><span data-lake-id="ua6629ff2" id="ua6629ff2">Accept：指定客户端可接受的媒体类型，服务器可以根据此头部返回合适的内容。</span></li><li fid="udacdffab" data-lake-id="u4d521673" id="u4d521673"><span data-lake-id="ue1aa999c" id="ue1aa999c">Authorization：用于身份验证，包含凭证信息，如Basic或Bearer token。</span></li></ul><ol list="ue6c5ab0e" start="3"><li fid="u4f3541cf" data-lake-id="u24d1b598" id="u24d1b598"><span data-lake-id="u05592bf1" id="u05592bf1">请求体</span></li></ol><ul list="ue6c5ab0e" data-lake-indent="1"><li fid="ud82d1cf0" data-lake-id="u02c33780" id="u02c33780"><span data-lake-id="ub85ea60e" id="ub85ea60e">application/x-www-form-urlencoded：键值对形式的表单数据，通常用在简单表单提交。 </span></li><li fid="ud82d1cf0" data-lake-id="ua60a863c" id="ua60a863c"><span data-lake-id="u2d18f93d" id="u2d18f93d">multipart/form-data：处理复杂表单，包括文件上传，内容按边界分割。 </span></li><li fid="ud82d1cf0" data-lake-id="u4dd95277" id="u4dd95277"><span data-lake-id="u085f8959" id="u085f8959">自定义数据格式：根据API需求，可能需要提交XML、JSON、甚至是二进制数据。不同的Content-Type可以标识数据格式。</span></li></ul><ol list="ue6c5ab0e" start="4"><li fid="u4f3541cf" data-lake-id="ubcb6a30a" id="ubcb6a30a"><span data-lake-id="ueb59b42e" id="ueb59b42e">性能与安全</span></li></ol><ul list="ue6c5ab0e" data-lake-indent="1"><li fid="u2f016d90" data-lake-id="u1e817b90" id="u1e817b90"><span data-lake-id="u635fa440" id="u635fa440">缓存机制：通过Cache-Control和ETag等头部，客户端和服务器可以有效管理缓存，减少不必要的请求。</span></li><li fid="u2f016d90" data-lake-id="u346e40b8" id="u346e40b8"><span data-lake-id="u4fd53043" id="u4fd53043">压缩：Content-Encoding头部可以指定压缩方式，如gzip，以减少数据传输量。 </span></li><li fid="u2f016d90" data-lake-id="uda50c85d" id="uda50c85d"><span data-lake-id="u8d2592ca" id="u8d2592ca">安全性：Authorization和Cookie等头部涉及身份验证和会话管理，应注意保护敏感信息，防止中间人攻击等安全威胁。</span></li></ul><h2 data-lake-id="VR5ZQ" id="VR5ZQ" data-lake-index-type="0"><span data-lake-id="u95f63be8" id="u95f63be8" class="lake-fontsize-11" style="color: rgba(0, 0, 0, 0.88)">HTTP 中 GET 和 POST 的区别是什么？</span></h2><p data-lake-id="u3e0288fe" id="u3e0288fe"><br></p><p data-lake-id="u2cd86500" id="u2cd86500"><span data-lake-id="u3f3e89b1" id="u3f3e89b1">从 HTTP 的定义来看：</span></p><ul list="u59347f0c"><li fid="uc9e0b3c7" data-lake-id="u641a8ef7" id="u641a8ef7"><span data-lake-id="u20b4f333" id="u20b4f333">GET：用于获取资源，通常用于请求数据而不改变服务器状态。</span></li><li fid="uc9e0b3c7" data-lake-id="udc8a8b7f" id="udc8a8b7f"><span data-lake-id="u24eb30d5" id="u24eb30d5">POST：用于提交数据到服务器，通常会改变服务器的状态或产生副作用（如创建或更新资源）。</span></li></ul><p data-lake-id="u862aedd1" id="u862aedd1"><span data-lake-id="u3afe9a48" id="u3afe9a48">由于 HTTP 和浏览器等规定，它们在应用过程中会出现一些区别：</span></p><h3 data-lake-id="HNT6U" id="HNT6U" data-lake-index-type="0"><span data-lake-id="u6735a36c" id="u6735a36c">参数传递方式：</span></h3><ul list="u62181053"><li fid="u2ecae1e5" data-lake-id="uaf31eb33" id="uaf31eb33"><span data-lake-id="uc2837e2e" id="uc2837e2e">GET：参数通过 URL 拼接传递，暴露在请求 URL 中，具有可见性，长度有限（取决于浏览器和服务器）。</span></li><li fid="u2ecae1e5" data-lake-id="u1983001b" id="u1983001b"><span data-lake-id="u0982669c" id="u0982669c">POST：参数放在请求体中，通常不可见且长度理论上没有限制，更适合传递大量数据（但是注意，POST 也可以在 URL 上放参数！）。</span></li></ul><h3 data-lake-id="HdZO3" id="HdZO3" data-lake-index-type="0"><span data-lake-id="u3a8e132c" id="u3a8e132c">安全性：</span></h3><ul list="ufeff9f8f"><li fid="u0b95fdf3" data-lake-id="uc004a953" id="uc004a953"><span data-lake-id="u97bfadde" id="u97bfadde">GET：参数可见，数据容易暴露在浏览器历史记录、日志和缓存中，不适合传递敏感信息。</span></li><li fid="u0b95fdf3" data-lake-id="u23eb18ce" id="u23eb18ce"><span data-lake-id="uc6814597" id="uc6814597">POST：数据放在请求体中，相对安全，但需要 HTTPS 才能保证数据加密传输。</span></li></ul><h3 data-lake-id="moj0I" id="moj0I" data-lake-index-type="0"><span data-lake-id="ud79ba548" id="ud79ba548">幂等性：</span></h3><ul list="ucb347937"><li fid="u569f8c73" data-lake-id="u485e59e7" id="u485e59e7"><span data-lake-id="uaf0c9c7d" id="uaf0c9c7d">GET：幂等（重复请求不会改变服务器状态）。</span></li><li fid="u569f8c73" data-lake-id="u9a9a7a54" id="u9a9a7a54"><span data-lake-id="u9c323ac7" id="u9c323ac7">POST：非幂等（多次请求可能导致重复创建资源或执行多次相同操作）。</span></li></ul><h3 data-lake-id="APB08" id="APB08" data-lake-index-type="0"><span data-lake-id="ucedf2c75" id="ucedf2c75">扩展知识</span></h3><h3 data-lake-id="fua6S" id="fua6S" data-lake-index-type="0"><span data-lake-id="ud0ecfdab" id="ud0ecfdab">GET 和 POST 的数据传输方式与限制</span></h3><ul list="uafb3c629"><li fid="u55f72cb6" data-lake-id="u7b0fb52c" id="u7b0fb52c"><span data-lake-id="ufe600e5f" id="ufe600e5f">URL 长度限制：GET 请求中的参数通过 URL 传递，受 URL 长度限制。不同浏览器和服务器对 URL 长度限制不同，一般为 2048 字节左右，因此不适合大数据传输。</span></li><li fid="u55f72cb6" data-lake-id="u06f40efd" id="u06f40efd"><span data-lake-id="ubfad4e6d" id="ubfad4e6d">POST 请求体限制：POST 请求的数据放在请求体中，理论上无长度限制，适合传输较多的数据。但实际中服务器对请求体长度有配置限制，如 Nginx 默认限制为 1MB，可根据需求调整。</span></li></ul><h3 data-lake-id="qBLHm" id="qBLHm" data-lake-index-type="0"><span data-lake-id="u9022ce30" id="u9022ce30">GET和POST的数据安全性差异</span></h3><ul list="u2f18a102"><li fid="u23859d27" data-lake-id="u8d453188" id="u8d453188"><span data-lake-id="u7c503e2b" id="u7c503e2b">GET请求暴露数据：由于GET请求的参数出现在URL中，可能被浏览器缓存、日志记录或历史记录保存，增加了信息泄露的风险，不适合传输敏感信息，如用户名、密码等。</span></li><li fid="u23859d27" data-lake-id="u2772a142" id="u2772a142"><span data-lake-id="u34fa1f2f" id="u34fa1f2f">POST请求相对安全：POST请求数据位于请求体中，尽管这并不提供加密保护，但比URL中传递更隐蔽。配合HTTPS加密传输可进一步确保数据安全。</span></li></ul><h3 data-lake-id="iJqbJ" id="iJqbJ" data-lake-index-type="0"><span data-lake-id="u5cb4a4e4" id="u5cb4a4e4">缓存机制的不同</span></h3><ul list="ue53a7ec7"><li fid="uc57fd975" data-lake-id="uf9a0c57c" id="uf9a0c57c"><span data-lake-id="u8d41b295" id="u8d41b295">GET请求可缓存：GET请求可以被浏览器和CDN缓存，当请求同一个URL时可以直接返回缓存内容，减少服务器负载。适用于不频繁变动的资源，比如图片、静态页面。 </span></li><li fid="uc57fd975" data-lake-id="ua6098c81" id="ua6098c81"><span data-lake-id="ua4b79238" id="ua4b79238">POST请求默认不缓存：大部分浏览器和缓存服务器不缓存POST请求，主要因为POST请求通常会对服务器数据产生影响（如创建、修改数据），需要确保请求每次都传递到服务器。</span></li></ul><h3 data-lake-id="rJipk" id="rJipk" data-lake-index-type="0"><span data-lake-id="u7d1f218b" id="u7d1f218b">幂等性和安全性原则</span></h3><ul list="u44d06548"><li fid="u08fc080e" data-lake-id="u33d65c2e" id="u33d65c2e"><span data-lake-id="ua334d21a" id="ua334d21a">GET的幂等性：GET请求是幂等的，重复多次请求对服务器资源没有影响。即使客户端多次请求同一URL，服务器的资源状态不会变化。 </span></li><li fid="u08fc080e" data-lake-id="u79d4c55d" id="u79d4c55d"><span data-lake-id="uf9d75618" id="uf9d75618">POST的非幂等性：POST请求不是幂等的，重复的POST请求可能导致重复的数据创建或操作。例如，重复提交表单可能导致服务器多次生成同样的数据记录（除非业务代码做了特殊处理）。 </span></li><li fid="u08fc080e" data-lake-id="u9a91c506" id="u9a91c506"><span data-lake-id="ufca0420b" id="ufca0420b">安全性原则：在HTTP方法的安全性定义中，GET是安全的，因为它只获取数据，不对服务器状态产生影响，而POST可能会更改服务器数据，因此不是安全的操作。</span></li></ul><p data-lake-id="uf791b424" id="uf791b424"><br></p><h2 data-lake-id="KmLAS" id="KmLAS" data-lake-index-type="0"><span data-lake-id="u6297e11b" id="u6297e11b" style="color: rgba(0, 0, 0, 0.88)">HTTP 1.0 和 2.0 有什么区别？</span></h2><p data-lake-id="uf237ba5c" id="uf237ba5c"><br></p><p data-lake-id="u96aa1e7e" id="u96aa1e7e"><span data-lake-id="u9ca0f703" id="u9ca0f703">HTTP/1.0版本主要增加以下几点：</span></p><ul list="u4ee8556b"><li fid="u5a264950" data-lake-id="u2e07344b" id="u2e07344b"><span data-lake-id="u62fe2d09" id="u62fe2d09">增加了HEAD、POST等新方法。</span></li><li fid="u5a264950" data-lake-id="ud8c53f72" id="ud8c53f72"><span data-lake-id="u27f6ae37" id="u27f6ae37">增加了响应状态码。</span></li><li fid="u5a264950" data-lake-id="u271e7a57" id="u271e7a57"><span data-lake-id="ue167534e" id="ue167534e">引入了头部，即请求头和响应头。</span></li><li fid="u5a264950" data-lake-id="u2fc41c8b" id="u2fc41c8b"><span data-lake-id="u84059351" id="u84059351">在请求中加入了HTTP版本号。</span></li><li fid="u5a264950" data-lake-id="u57763928" id="u57763928"><span data-lake-id="ucea12845" id="ucea12845">引入了Content-Type，使得传输的数据不再限于文本。</span></li></ul><p data-lake-id="u7af4c279" id="u7af4c279"><span data-lake-id="ue46c018e" id="ue46c018e">HTTP/1.1版本主要增加以下几点：</span></p><ul list="ue19ce9e6"><li fid="u6b1f4a03" data-lake-id="u6588be89" id="u6588be89"><span data-lake-id="u68209ee9" id="u68209ee9">新增了连接管理即keepalive，允许持久连接。 </span></li><li fid="u6b1f4a03" data-lake-id="ueeda8eb4" id="ueeda8eb4"><span data-lake-id="udc90270a" id="udc90270a">支持pipeline，无需等待前面的请求响应，即可发送第二次请求。 </span></li><li fid="u6b1f4a03" data-lake-id="u616f5754" id="u616f5754"><span data-lake-id="u4db517d5" id="u4db517d5">允许响应数据分块（chunked），即响应的时候不标明Content-Length，客户端就无法断开连接，直到收到服务端的EOF，利于传输大文件。 </span></li><li fid="u6b1f4a03" data-lake-id="u5a59e880" id="u5a59e880"><span data-lake-id="u2517e30c" id="u2517e30c">新增缓存的控制和管理。 </span></li><li fid="u6b1f4a03" data-lake-id="u0c3996a6" id="u0c3996a6"><span data-lake-id="udfb61070" id="udfb61070">加入了Host头，用在你一台机子部署了多个主机，然后多个域名解析又是同一个IP，此时加入了Host头就可以判断你到底是要访问哪个主机。</span></li></ul><p data-lake-id="u0cff9945" id="u0cff9945"><span data-lake-id="uc5227071" id="uc5227071">HTTP/2版本主要增加以下几点：</span></p><ul list="ude0f076a"><li fid="uc326beed" data-lake-id="ua7d19305" id="ua7d19305"><span data-lake-id="ub24608b6" id="ub24608b6">是二进制协议，不再是纯文本。 </span></li><li fid="uc326beed" data-lake-id="ud3d5d2e6" id="ud3d5d2e6"><span data-lake-id="uf90bd772" id="uf90bd772">支持一个TCP连接发起多请求，移除了pipeline。 </span></li><li fid="uc326beed" data-lake-id="udd20ed57" id="udd20ed57"><span data-lake-id="u75fb835c" id="u75fb835c">利用HPACK压缩头部，减少数据传输量。 </span></li><li fid="uc326beed" data-lake-id="ubd347445" id="ubd347445"><span data-lake-id="u26f038f5" id="u26f038f5">允许服务端主动推送数据。</span></li></ul><h2 data-lake-id="a09iY" id="a09iY" data-lake-index-type="0"><span data-lake-id="u266f2a27" id="u266f2a27" style="color: rgba(0, 0, 0, 0.88)">HTTP 2.0 和 3.0 有什么区别？</span></h2><h3 data-lake-id="W4GKn" id="W4GKn" data-lake-index-type="0"><span data-lake-id="u1dc3515b" id="u1dc3515b">回答重点</span></h3><ol list="u74bebb6f"><li fid="ucbdea719" data-lake-id="uc7e18b0a" id="uc7e18b0a"><span data-lake-id="u1cf9f5cb" id="u1cf9f5cb">基于的传输层协议不同：</span></li></ol><ul list="uc6992342"><li fid="u2b122610" data-lake-id="u6f77cf66" id="u6f77cf66"><span data-lake-id="ucf95273b" id="ucf95273b">HTTP/2：基于TCP，使用二进制分帧层（Binary Framing Layer）实现多路复用。</span></li><li fid="u2b122610" data-lake-id="u9b1e3fea" id="u9b1e3fea"><span data-lake-id="u0fc2a124" id="u0fc2a124">HTTP/3：基于UDP，使用QUIC协议（Quick UDP Internet Connections），提供类似TCP的可靠性和多路复用。</span></li></ul><ol list="u642b2151" start="2"><li fid="u8ee4b015" data-lake-id="uedac43a9" id="uedac43a9"><span data-lake-id="u91f7beb8" id="u91f7beb8">性能和可靠性区别：</span></li></ol><ul list="u93535829"><li fid="uf179cee8" data-lake-id="ub2aa8df3" id="ub2aa8df3"><span data-lake-id="u590569b4" id="u590569b4">HTTP/2：解决了HTTP/1.x中的队头阻塞问题，但仍然受制于TCP的队头阻塞，尤其在高延迟或丢包情况下。</span></li><li fid="uf179cee8" data-lake-id="ua06708da" id="ua06708da"><span data-lake-id="u4c5efc44" id="u4c5efc44">HTTP/3：通过QUIC协议，避免了TCP队头阻塞，即使在网络不稳定的情况下也能提供更好的性能。</span></li></ul><ol list="u9a1e58b0" start="3"><li fid="u34c2b125" data-lake-id="u22fa45dc" id="u22fa45dc"><span data-lake-id="u1b8b7331" id="u1b8b7331">从安全性角度来看：</span></li></ol><ul list="uf03bb249"><li fid="ub411896c" data-lake-id="u0398d19f" id="u0398d19f"><span data-lake-id="uef1a4741" id="uef1a4741">HTTP/2：可以使用TLS加密（HTTPS），但加密并非强制要求。 </span></li><li fid="ub411896c" data-lake-id="uf4c0f282" id="uf4c0f282"><span data-lake-id="u0e3fdc62" id="u0e3fdc62">HTTP/3：默认使用QUIC自带的TLS 1.3加密，安全性更高，且加密是强制的。</span></li></ul><ol list="u1bccbdd9" start="4"><li fid="uaf0a5b50" data-lake-id="u2c0251d6" id="u2c0251d6"><span data-lake-id="u4cd86f2f" id="u4cd86f2f">从连接建立速度：</span></li></ol><ul list="ue4f0a19e"><li fid="u8be0c345" data-lake-id="uee1dedde" id="uee1dedde"><span data-lake-id="u30298f05" id="u30298f05">HTTP/2：需要TCP三次握手和TLS握手，连接建立相对较慢。 </span></li><li fid="u8be0c345" data-lake-id="ud95d8da9" id="ud95d8da9"><span data-lake-id="ua0c35954" id="ua0c35954">HTTP/3：QUIC集成了连接建立和加密握手，连接建立速度更快，尤其在初次连接时。</span></li></ul><h3 data-lake-id="psAIl" id="psAIl" data-lake-index-type="0"><span data-lake-id="u598e0be2" id="u598e0be2">QUIC技术优势</span></h3><p data-lake-id="ufa537bcb" id="ufa537bcb"><span data-lake-id="u1febf987" id="u1febf987">QUIC，Quick UDP Internet Connections是一个基于UDP的传输协议，由Google开发，旨在替代TCP以提高网络传输性能和安全性。QUIC在传输层和应用层之间提供可靠、低延迟的传输服务。</span></p><p data-lake-id="u8b5facf7" id="u8b5facf7"><span data-lake-id="ub60c35ce" id="ub60c35ce">QUIC（Quick UDP Internet Connections）是一种由Google开发的基于UDP的传输层协议，旨在改进HTTP/2的性能。QUIC的设计目标是减少连接延迟，提高传输效率和安全性。以下是QUIC的一些技术优势和细节：</span></p><h3 data-lake-id="Ow9bS" id="Ow9bS" data-lake-index-type="0"><span data-lake-id="ue5e3639e" id="ue5e3639e">技术优势</span></h3><ol list="u415c82b5"><li fid="ua27df26e" data-lake-id="uf1c1ed90" id="uf1c1ed90"><strong><span data-lake-id="ue5c155f3" id="ue5c155f3">低延迟连接建立</span></strong><span data-lake-id="ud149b050" id="ud149b050">：</span></li></ol><ul list="u2478afc9"><li fid="u318c7262" data-lake-id="ue66bbe13" id="ue66bbe13"><span data-lake-id="ua351e74b" id="ua351e74b">QUIC使用0 - RTT（Zero Round Trip Time）技术，可以在首次握手时减少延迟。对于已经建立过连接的客户端，可以直接发送数据，无需等待服务器的响应。</span></li></ul><ol list="u7f4991bc" start="2"><li fid="ubaf69efc" data-lake-id="ua74444b3" id="ua74444b3"><strong><span data-lake-id="ubbfddd2a" id="ubbfddd2a">内置加密</span></strong><span data-lake-id="u6f9ac36f" id="u6f9ac36f">：</span></li></ol><ul list="ub36a25ca"><li fid="u528fa878" data-lake-id="u0c257d51" id="u0c257d51"><span data-lake-id="u451af8d7" id="u451af8d7">QUIC协议默认采用TLS 1.3进行端到端加密，从而提高了数据传输的安全性，并简化了协议设计，不再需要像TCP那样进行额外的加密层配置。</span></li></ul><ol list="u93196b3c" start="3"><li fid="ua1336438" data-lake-id="uf6764a18" id="uf6764a18"><strong><span data-lake-id="ue9c9959a" id="ue9c9959a">减少了队头阻塞（Head - of - Line Blocking）</span></strong><span data-lake-id="uf79509b1" id="uf79509b1">：</span></li></ol><ul list="u4db1bdaf"><li fid="u248c29fa" data-lake-id="u72351b09" id="u72351b09"><span data-lake-id="ua3ec50a8" id="ua3ec50a8">与TCP不同，QUIC在每个连接内使用多个独立的流，这意味着一个流上的丢包不会阻塞其他流的数据传输，从而显著减少队头阻塞问题，提高传输效率。</span></li></ul><ol list="u7fb4780a" start="4"><li fid="ud1541a23" data-lake-id="u6aa43320" id="u6aa43320"><strong><span data-lake-id="u90c571b0" id="u90c571b0">更快的拥塞控制</span></strong><span data-lake-id="u7138a43b" id="u7138a43b">：</span></li></ol><ul list="uef95cd01"><li fid="u1ba4aa4a" data-lake-id="ua16d13a6" id="ua16d13a6"><span data-lake-id="uafa32099" id="uafa32099">QUIC可以更快速地调整拥塞控制算法，因为它能够访问更多的上下文信息（如链路的RTT、丢包率等），且能够在应用层进行定制优化。</span></li></ul><ol list="u6de0d0d6" start="5"><li fid="uc7fdece3" data-lake-id="uc7ae6b36" id="uc7ae6b36"><strong><span data-lake-id="u53615667" id="u53615667">连接迁移</span></strong><span data-lake-id="u225a74f5" id="u225a74f5">：</span></li></ol><ul list="udecfc889"><li fid="u5d93104e" data-lake-id="u91459f2c" id="u91459f2c"><span data-lake-id="ud54a5c6e" id="ud54a5c6e">QUIC支持连接迁移，当客户端的IP地址或网络环境变化时（例如从Wi - Fi切换到蜂窝网络），连接依然可以保持，不会像TCP那样中断。</span></li></ul><ol list="ue3722260" start="6"><li fid="u793b490e" data-lake-id="ub25d15ca" id="ub25d15ca"><strong><span data-lake-id="u517707cc" id="u517707cc">更高的带宽利用率</span></strong><span data-lake-id="u1169e395" id="u1169e395">：</span></li></ol><ul list="ua9f435c4"><li fid="u90330f69" data-lake-id="u356588c5" id="u356588c5"><span data-lake-id="u4871be0e" id="u4871be0e">QUIC通过改进的流量控制机制，可以更好地利用可用带宽，从而提高传输速度和效率。</span></li></ul><p data-lake-id="ud93c267b" id="ud93c267b"><span data-lake-id="u5508e0c2" id="u5508e0c2">更多QUIC细节参见HTTP 1.0和2.0有什么区别? 内扩展知识HTTP 3.0时代</span></p><h2 data-lake-id="ud1ip" id="ud1ip" data-lake-index-type="0"><span data-lake-id="u2066892b" id="u2066892b" style="color: rgba(0, 0, 0, 0.88)">HTTP 和 HTTPS 有什么区别？</span></h2><ol list="uc16752c2"><li fid="u69c4b11f" data-lake-id="ud2ae3935" id="ud2ae3935"><span data-lake-id="uf1cad0b4" id="uf1cad0b4">数据传输安全性：</span></li></ol><ul list="ucc47dc14"><li fid="u367c87bf" data-lake-id="ua6ce305f" id="ua6ce305f"><span data-lake-id="u2562c024" id="u2562c024">HTTP：数据以明文传输，容易被窃听、篡改。</span></li><li fid="u367c87bf" data-lake-id="u08f55c7c" id="u08f55c7c"><span data-lake-id="u7d3011d1" id="u7d3011d1">HTTPS：通过SSL/TLS协议对数据进行加密传输，提供数据机密性和完整性保障。</span></li></ul><ol list="udbec516e" start="2"><li fid="u6844fe47" data-lake-id="u6d6e7556" id="u6d6e7556"><span data-lake-id="u17adf1b8" id="u17adf1b8">端口号：</span></li></ol><ul list="u2d6174bd"><li fid="ud7515652" data-lake-id="u79af0228" id="u79af0228"><span data-lake-id="u92a423be" id="u92a423be">HTTP：默认使用端口80。</span></li><li fid="ud7515652" data-lake-id="u04c0b339" id="u04c0b339"><span data-lake-id="u52e9fc54" id="u52e9fc54">HTTPS：默认使用端口443。</span></li></ul><ol list="u0fa15909" start="3"><li fid="u83aec90d" data-lake-id="uea4b38d0" id="uea4b38d0"><span data-lake-id="u21bf5712" id="u21bf5712">性能：</span></li></ol><ul list="u0fbb27f7"><li fid="u7ddcadeb" data-lake-id="u5598656d" id="u5598656d"><span data-lake-id="u23c388e8" id="u23c388e8">HTTP：无加密过程，连接建立速度稍快。</span></li><li fid="u7ddcadeb" data-lake-id="u356e435d" id="u356e435d"><span data-lake-id="u77a8aae1" id="u77a8aae1">HTTPS：基于HTTP上又加了SSL（Secure Sockets Layer）或TLS（Transport Layer Security）协议来实现的加密传输，加解密过程增加了计算开销，握手时间较长，但现代硬件和协议优化已使性能差距减小。</span></li></ul><ol list="ue6a9962c" start="4"><li fid="ubd707ed8" data-lake-id="ub9ab0ab2" id="ub9ab0ab2"><span data-lake-id="ua324f8d0" id="ua324f8d0">SEO影响：</span></li></ol><ul list="ubef1bbe2"><li fid="u2ca5300f" data-lake-id="u5af1649b" id="u5af1649b"><span data-lake-id="uc3630e4b" id="uc3630e4b">HTTP：搜索引擎一般会降低未加密站点的排名。</span></li><li fid="u2ca5300f" data-lake-id="u1651071a" id="u1651071a"><span data-lake-id="ua55e2d2b" id="ua55e2d2b">HTTPS：搜索引擎更倾向于优先展示HTTPS网站。</span></li></ul><h2 data-lake-id="pdo1c" id="pdo1c" data-lake-index-type="0"><span data-lake-id="ue59bb850" id="ue59bb850" style="color: rgba(0, 0, 0, 0.88)">TCP 和 UDP 有什么区别？、</span></h2><p data-lake-id="u170939a5" id="u170939a5"><span data-lake-id="uac2afd01" id="uac2afd01">TCP 提供了可靠、面向连接的传输，适用于需要数据完整性和顺序的场景<br /></span><span data-lake-id="ucc4a7db8" id="ucc4a7db8">UDP 则提供了更轻量、面向报文的传输，适用于实时性要求高的场景。</span></p><p data-lake-id="u2b1fb56c" id="u2b1fb56c"><span data-lake-id="u731d243e" id="u731d243e" style="color: rgba(0, 0, 0, 0.88)">区别总结：</span></p><table data-lake-id="YQeiO" id="YQeiO" margin="true" fit-width="true" class="lake-table" style="width: 750px"><colgroup><col width="250"><col width="250"><col width="250"></colgroup><tbody><tr data-lake-id="ub3868357" id="ub3868357"><td data-lake-id="u4b9c2791" id="u4b9c2791"><p data-lake-id="u99ca1791" id="u99ca1791"><span data-lake-id="u1c1e7cd4" id="u1c1e7cd4" style="color: rgba(0, 0, 0, 0.88)">特性</span></p></td><td data-lake-id="ub825f0a7" id="ub825f0a7"><p data-lake-id="uc2540249" id="uc2540249"><span data-lake-id="u69d4fb81" id="u69d4fb81" style="color: rgba(0, 0, 0, 0.88)">TCP</span></p></td><td data-lake-id="ud28b560c" id="ud28b560c"><p data-lake-id="u15aa574a" id="u15aa574a"><span data-lake-id="u4f3df8de" id="u4f3df8de" style="color: rgba(0, 0, 0, 0.88)">UDP</span></p></td></tr><tr data-lake-id="ucd791a83" id="ucd791a83"><td data-lake-id="ubb9d208f" id="ubb9d208f"><p data-lake-id="u4aa93a1b" id="u4aa93a1b"><span data-lake-id="u6fc72b11" id="u6fc72b11" style="color: rgba(0, 0, 0, 0.88)">连接方式</span></p></td><td data-lake-id="u5bf1575c" id="u5bf1575c"><p data-lake-id="u9cd401ae" id="u9cd401ae"><span data-lake-id="u19fb86ac" id="u19fb86ac" style="color: rgba(0, 0, 0, 0.88)">面向连接</span></p></td><td data-lake-id="u66fe10bc" id="u66fe10bc"><p data-lake-id="uf924c28e" id="uf924c28e"><span data-lake-id="u28d11d7e" id="u28d11d7e" style="color: rgba(0, 0, 0, 0.88)">无连接</span></p></td></tr><tr data-lake-id="ub175a838" id="ub175a838"><td data-lake-id="u370952f0" id="u370952f0"><p data-lake-id="ueddc7e06" id="ueddc7e06"><span data-lake-id="u8971ccdb" id="u8971ccdb" style="color: rgba(0, 0, 0, 0.88)">可靠性</span></p></td><td data-lake-id="ueae11cf8" id="ueae11cf8"><p data-lake-id="u97c1005a" id="u97c1005a"><span data-lake-id="u44c89b81" id="u44c89b81" style="color: rgba(0, 0, 0, 0.88)">提供可靠性，保证数据按顺序到达</span></p></td><td data-lake-id="ud6dfb5a0" id="ud6dfb5a0"><p data-lake-id="u5b6d44c9" id="u5b6d44c9"><span data-lake-id="uc92eb8d2" id="uc92eb8d2" style="color: rgba(0, 0, 0, 0.88)">不可靠，不保证顺序或完整性</span></p></td></tr><tr data-lake-id="u288ee346" id="u288ee346"><td data-lake-id="u0c89818f" id="u0c89818f"><p data-lake-id="u91d4910f" id="u91d4910f"><span data-lake-id="u6c1ba7f4" id="u6c1ba7f4" style="color: rgba(0, 0, 0, 0.88)">流量控制/拥塞控制</span></p></td><td data-lake-id="u9d75bf93" id="u9d75bf93"><p data-lake-id="u57d36597" id="u57d36597"><span data-lake-id="udfc86d53" id="udfc86d53" style="color: rgba(0, 0, 0, 0.88)">提供流量控制和拥塞控制</span></p></td><td data-lake-id="uedad2351" id="uedad2351"><p data-lake-id="u6637bf9e" id="u6637bf9e"><span data-lake-id="u1c5f453c" id="u1c5f453c" style="color: rgba(0, 0, 0, 0.88)">没有流量控制和拥塞控制</span></p></td></tr><tr data-lake-id="u1ae9a29f" id="u1ae9a29f"><td data-lake-id="u7a053470" id="u7a053470"><p data-lake-id="ue77c189b" id="ue77c189b"><span data-lake-id="uad6dae1d" id="uad6dae1d" style="color: rgba(0, 0, 0, 0.88)">顺序保证</span></p></td><td data-lake-id="u5dc95913" id="u5dc95913"><p data-lake-id="ua92b4254" id="ua92b4254"><span data-lake-id="u289eef6b" id="u289eef6b" style="color: rgba(0, 0, 0, 0.88)">保证数据顺序</span></p></td><td data-lake-id="u4cfd9ac3" id="u4cfd9ac3"><p data-lake-id="u0b7e16c8" id="u0b7e16c8"><span data-lake-id="u58d200b1" id="u58d200b1" style="color: rgba(0, 0, 0, 0.88)">不保证数据顺序</span></p></td></tr><tr data-lake-id="u5821a623" id="u5821a623"><td data-lake-id="ue2e77da3" id="ue2e77da3"><p data-lake-id="ud08cb879" id="ud08cb879"><span data-lake-id="u386dec56" id="u386dec56" style="color: rgba(0, 0, 0, 0.88)">头部大小</span></p></td><td data-lake-id="u760c458f" id="u760c458f"><p data-lake-id="ue2e3b1c9" id="ue2e3b1c9"><span data-lake-id="u9e5d1980" id="u9e5d1980" style="color: rgba(0, 0, 0, 0.88)">较大（20字节及以上）</span></p></td><td data-lake-id="u37484edc" id="u37484edc"><p data-lake-id="u93dd20f6" id="u93dd20f6"><span data-lake-id="uc887e2d4" id="uc887e2d4" style="color: rgba(0, 0, 0, 0.88)">较小（8字节）</span></p></td></tr><tr data-lake-id="u0759c495" id="u0759c495"><td data-lake-id="u84b757b6" id="u84b757b6"><p data-lake-id="u55036efc" id="u55036efc"><span data-lake-id="u59fc8bf1" id="u59fc8bf1" style="color: rgba(0, 0, 0, 0.88)">性能</span></p></td><td data-lake-id="ua7ef648d" id="ua7ef648d"><p data-lake-id="u531c67df" id="u531c67df"><span data-lake-id="u263c2515" id="u263c2515" style="color: rgba(0, 0, 0, 0.88)">较低，延迟大</span></p></td><td data-lake-id="ue17b97fa" id="ue17b97fa"><p data-lake-id="uff4ee661" id="uff4ee661"><span data-lake-id="udd58d207" id="udd58d207" style="color: rgba(0, 0, 0, 0.88)">较高，延迟小</span></p></td></tr><tr data-lake-id="u1ad343da" id="u1ad343da"><td data-lake-id="u68d53a07" id="u68d53a07"><p data-lake-id="ufc18855b" id="ufc18855b"><span data-lake-id="u341ac475" id="u341ac475" style="color: rgba(0, 0, 0, 0.88)">数据传输模式</span></p></td><td data-lake-id="u39058607" id="u39058607"><p data-lake-id="u1d9d3983" id="u1d9d3983"><span data-lake-id="udc03c472" id="udc03c472" style="color: rgba(0, 0, 0, 0.88)">字节流传输模式</span></p></td><td data-lake-id="udb0aefea" id="udb0aefea"><p data-lake-id="u04ee8a0a" id="u04ee8a0a"><span data-lake-id="uc6150778" id="uc6150778" style="color: rgba(0, 0, 0, 0.88)">数据报传输模式</span></p></td></tr><tr data-lake-id="u5a21b963" id="u5a21b963"><td data-lake-id="u5928a2ad" id="u5928a2ad"><p data-lake-id="uc9337609" id="uc9337609"><span data-lake-id="u501b367e" id="u501b367e" style="color: rgba(0, 0, 0, 0.88)">适用场景</span></p></td><td data-lake-id="u6ec2e72b" id="u6ec2e72b"><p data-lake-id="uf0bd9faf" id="uf0bd9faf"><span data-lake-id="u0d02a2b0" id="u0d02a2b0" style="color: rgba(0, 0, 0, 0.88)">文件传输、Web、邮件等需要可靠性的应用</span></p></td><td data-lake-id="u39051108" id="u39051108"><p data-lake-id="ud63d5220" id="ud63d5220"><span data-lake-id="ua4c26743" id="ua4c26743" style="color: rgba(0, 0, 0, 0.88)">实时通讯、语音、视频、游戏等高性能要求应用</span></p></td></tr></tbody></table><p data-lake-id="ue24ad44c" id="ue24ad44c"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745071941057-bb0603c8-8130-47a0-848e-ea43d2f53ff1.png%22%2C%22taskId%22%3A%22uc3dbf6e8-1910-49f7-86a9-e1bc4745909%22%2C%22clientId%22%3A%22u1b5a9ea4-ccfe-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A767.3333333333334%2C%22height%22%3A514%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A175443%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1151%2C%22originHeight%22%3A771%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22TCP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%20%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3(16%E4%BD%8D)%20%E6%BA%90%E7%AB%AF%E5%8F%A3(16%E4%BD%8D)%20%E5%BA%8F%E5%8F%B7(32%E4%BD%8D)%2020%E5%AD%97%E8%8A%82%20%E7%A1%AE%E8%AE%A4%E5%8F%B7(32%E4%BD%8D)%20%E5%9B%BA%E5%AE%9A%E9%A6%96%20%E9%83%A8%E9%95%BF%E5%BA%A6%20URG%20%E6%95%B0%E6%8D%AE%E5%81%8F%E7%A7%BB%20%E4%BF%9D%E7%95%99(6%E4%BD%8D)%20%E7%AA%97%E5%8F%A3(16%E4%BD%8D)%20(4%E4%BD%8D)%20N%20N%20%E7%B4%A7%E6%80%A5%E6%8C%87%E9%92%88(16%E4%BD%8D)%20%E6%A3%80%E9%AA%8C%E5%92%8C(16%E4%BD%8D)%20%E9%80%89%E9%A1%B9(%E9%95%BF%E5%BA%A6%E5%8F%AF%E5%8F%98)%20%E5%A1%AB%E5%85%85%20TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E7%9A%84%E6%95%B0%E6%8D%AE%E9%83%A8%E5%88%86%20TCP%E9%A6%96%E9%83%A8%20IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E9%83%A8%E5%88%86%20IP%E9%A6%96%E9%83%A8%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A5%2C%22y%22%3A13%2C%22width%22%3A169%2C%22height%22%3A31%2C%22text%22%3A%22TCP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%22%7D%2C%7B%22x%22%3A649%2C%22y%22%3A118%2C%22width%22%3A159%2C%22height%22%3A23%2C%22text%22%3A%22%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3(16%E4%BD%8D)%22%7D%2C%7B%22x%22%3A215%2C%22y%22%3A119%2C%22width%22%3A141%2C%22height%22%3A23%2C%22text%22%3A%22%E6%BA%90%E7%AB%AF%E5%8F%A3(16%E4%BD%8D)%22%7D%2C%7B%22x%22%3A435%2C%22y%22%3A175%2C%22width%22%3A119%2C%22height%22%3A22%2C%22text%22%3A%22%E5%BA%8F%E5%8F%B7(32%E4%BD%8D)%22%7D%2C%7B%22x%22%3A1006%2C%22y%22%3A207%2C%22width%22%3A68%2C%22height%22%3A25%2C%22text%22%3A%2220%E5%AD%97%E8%8A%82%22%7D%2C%7B%22x%22%3A436%2C%22y%22%3A224%2C%22width%22%3A141%2C%22height%22%3A22%2C%22text%22%3A%22%E7%A1%AE%E8%AE%A4%E5%8F%B7(32%E4%BD%8D)%22%7D%2C%7B%22x%22%3A1007%2C%22y%22%3A232%2C%22width%22%3A67%2C%22height%22%3A24%2C%22text%22%3A%22%E5%9B%BA%E5%AE%9A%E9%A6%96%22%7D%2C%7B%22x%22%3A1007%2C%22y%22%3A257%2C%22width%22%3A67%2C%22height%22%3A24%2C%22text%22%3A%22%E9%83%A8%E9%95%BF%E5%BA%A6%22%7D%2C%7B%22x%22%3A318%2C%22y%22%3A269%2C%22width%22%3A18%2C%22height%22%3A67%2C%22text%22%3A%22URG%22%7D%2C%7B%22x%22%3A51%2C%22y%22%3A276%2C%22width%22%3A84%2C%22height%22%3A23%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E5%81%8F%E7%A7%BB%22%7D%2C%7B%22x%22%3A166%2C%22y%22%3A292%2C%22width%22%3A106%2C%22height%22%3A23%2C%22text%22%3A%22%E4%BF%9D%E7%95%99(6%E4%BD%8D)%22%7D%2C%7B%22x%22%3A664%2C%22y%22%3A293%2C%22width%22%3A118%2C%22height%22%3A24%2C%22text%22%3A%22%E7%AA%97%E5%8F%A3(16%E4%BD%8D)%22%7D%2C%7B%22x%22%3A61%2C%22y%22%3A303%2C%22width%22%3A55%2C%22height%22%3A21%2C%22text%22%3A%22(4%E4%BD%8D)%22%7D%2C%7B%22x%22%3A481%2C%22y%22%3A316%2C%22width%22%3A16%2C%22height%22%3A20%2C%22text%22%3A%22N%22%7D%2C%7B%22x%22%3A448%2C%22y%22%3A317%2C%22width%22%3A16%2C%22height%22%3A21%2C%22text%22%3A%22N%22%7D%2C%7B%22x%22%3A656%2C%22y%22%3A357%2C%22width%22%3A160%2C%22height%22%3A22%2C%22text%22%3A%22%E7%B4%A7%E6%80%A5%E6%8C%87%E9%92%88(16%E4%BD%8D)%22%7D%2C%7B%22x%22%3A209%2C%22y%22%3A359%2C%22width%22%3A142%2C%22height%22%3A24%2C%22text%22%3A%22%E6%A3%80%E9%AA%8C%E5%92%8C(16%E4%BD%8D)%22%7D%2C%7B%22x%22%3A208%2C%22y%22%3A420%2C%22width%22%3A158%2C%22height%22%3A23%2C%22text%22%3A%22%E9%80%89%E9%A1%B9(%E9%95%BF%E5%BA%A6%E5%8F%AF%E5%8F%98)%22%7D%2C%7B%22x%22%3A799%2C%22y%22%3A424%2C%22width%22%3A44%2C%22height%22%3A23%2C%22text%22%3A%22%E5%A1%AB%E5%85%85%22%7D%2C%7B%22x%22%3A438%2C%22y%22%3A568%2C%22width%22%3A204%2C%22height%22%3A23%2C%22text%22%3A%22TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E7%9A%84%E6%95%B0%E6%8D%AE%E9%83%A8%E5%88%86%22%7D%2C%7B%22x%22%3A203%2C%22y%22%3A569%2C%22width%22%3A78%2C%22height%22%3A23%2C%22text%22%3A%22TCP%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A362%2C%22y%22%3A681%2C%22width%22%3A191%2C%22height%22%3A25%2C%22text%22%3A%22IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E9%83%A8%E5%88%86%22%7D%2C%7B%22x%22%3A88%2C%22y%22%3A686%2C%22width%22%3A66%2C%22height%22%3A22%2C%22text%22%3A%22IP%E9%A6%96%E9%83%A8%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e7e7e7%22%2C%22id%22%3A%22u2805cc2e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uf83546e0" id="uf83546e0"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745071956579-fa2f334d-cc1d-49d9-9e0d-0e39cbfffb12.png%22%2C%22taskId%22%3A%22u7e021e4c-a1f1-45f8-9ba4-e125d71a338%22%2C%22clientId%22%3A%22u1b5a9ea4-ccfe-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A746%2C%22height%22%3A331%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A97814%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1119%2C%22originHeight%22%3A496%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%20UDP%2016%E4%BD%8D%E6%BA%90%E7%AB%AF%E5%8F%A3%E5%8F%B7%2016%E4%BD%8D%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%2016%E4%BD%8DUDP%E6%A0%A1%E9%AA%8C%E5%92%8C%2016%E4%BD%8DUDP%E9%95%BF%E5%BA%A6%20%E6%95%B0%E6%8D%AE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A88%2C%22y%22%3A31%2C%22width%22%3A118%2C%22height%22%3A29%2C%22text%22%3A%22%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%22%7D%2C%7B%22x%22%3A29%2C%22y%22%3A31%2C%22width%22%3A76%2C%22height%22%3A26%2C%22text%22%3A%22UDP%22%7D%2C%7B%22x%22%3A178%2C%22y%22%3A178%2C%22width%22%3A319%2C%22height%22%3A54%2C%22text%22%3A%2216%E4%BD%8D%E6%BA%90%E7%AB%AF%E5%8F%A3%E5%8F%B7%22%7D%2C%7B%22x%22%3A614%2C%22y%22%3A179%2C%22width%22%3A378%2C%22height%22%3A57%2C%22text%22%3A%2216%E4%BD%8D%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%22%7D%2C%7B%22x%22%3A616%2C%22y%22%3A281%2C%22width%22%3A375%2C%22height%22%3A55%2C%22text%22%3A%2216%E4%BD%8DUDP%E6%A0%A1%E9%AA%8C%E5%92%8C%22%7D%2C%7B%22x%22%3A179%2C%22y%22%3A284%2C%22width%22%3A321%2C%22height%22%3A51%2C%22text%22%3A%2216%E4%BD%8DUDP%E9%95%BF%E5%BA%A6%22%7D%2C%7B%22x%22%3A519%2C%22y%22%3A380%2C%22width%22%3A105%2C%22height%22%3A53%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23efefef%22%2C%22id%22%3A%22u8c313ac8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h3 data-lake-id="uM4Qq" id="uM4Qq" data-lake-index-type="0"><span data-lake-id="u2a50b5d9" id="u2a50b5d9">基于 TCP 的协议列举</span></h3><ul list="u6d55765f"><li fid="u13870b74" data-lake-id="u269ee596" id="u269ee596"><span data-lake-id="u9e37f865" id="u9e37f865">HTTP 协议：主要用于超文本和多媒体内容的协议。</span></li><li fid="u13870b74" data-lake-id="ud8ad4482" id="ud8ad4482"><span data-lake-id="ud4ae5126" id="ud4ae5126">HTTPS 协议：在 HTTP 协议上加了一层 SSL/TLS 的外壳，可靠性和安全性有了一定保证。 </span></li><li fid="u13870b74" data-lake-id="u4015bf60" id="u4015bf60"><span data-lake-id="u96b18a77" id="u96b18a77">FTP 协议：文件传输协议，常见的像学生上传作业到学校的 FTP 上。 </span></li><li fid="u13870b74" data-lake-id="u8e34bec2" id="u8e34bec2"><span data-lake-id="u64b540d8" id="u64b540d8">SMTP 协议：简单邮件传输协议，用于发送邮件的协议。 </span></li><li fid="u13870b74" data-lake-id="u0f55245e" id="u0f55245e"><span data-lake-id="ue6b501f2" id="ue6b501f2">POP3 协议：负责邮件接收的协议。</span></li></ul><h3 data-lake-id="voXGr" id="voXGr" data-lake-index-type="0"><span data-lake-id="ub6dac192" id="ub6dac192">基于 UDP 的协议列举</span></h3><ul list="u98b6a6c7"><li fid="ua58eb2dd" data-lake-id="udaf479fe" id="udaf479fe"><span data-lake-id="u8bfc1fda" id="u8bfc1fda">HTTP 3.0 版本使用的是基于 UDP 的 QUIC 协议。 </span></li><li fid="ua58eb2dd" data-lake-id="ufd552086" id="ufd552086"><span data-lake-id="u0e2f9263" id="u0e2f9263">DHCP 协议：动态主机配置协议，动态配置 IP 地址。 </span></li><li fid="ua58eb2dd" data-lake-id="ubc594e05" id="ubc594e05"><span data-lake-id="u89f67096" id="u89f67096">DNS：域名解析系统，将域名转变为机器可读的 IP 地址。</span></li></ul><h2 data-lake-id="Aydnh" id="Aydnh" data-lake-index-type="0"><span data-lake-id="uf261b844" id="uf261b844" style="color: rgba(0, 0, 0, 0.88)">说说 TCP 的三次握手？</span></h2><p data-lake-id="ufddcce3a" id="ufddcce3a"><br></p><p data-lake-id="uec10820b" id="uec10820b"><span data-lake-id="u6b62a682" id="u6b62a682" style="color: rgb(28, 31, 35)">具体流程文字描述就是：客户端首先发送一个SYN（同步序列编号）消息给服务器，服务器收到后回复一个SYN-ACK（同步序列编号-确认）消息，最后客户端再发送一个ACK（确认）消息确认服务器已经收到SYN-ACK消息，从而完成三次握手，建立起一个可靠的TCP连接。 来看下这个图： </span></p><p data-lake-id="u6cbc60bc" id="u6cbc60bc"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745072187475-22499590-d2b2-4f8c-90d0-d28bf1d0c258.png%22%2C%22taskId%22%3A%22u79962028-6ec5-4229-b584-63a199589da%22%2C%22clientId%22%3A%22u1b5a9ea4-ccfe-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1320.6666666666667%2C%22height%22%3A743%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A502680%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1981%2C%22originHeight%22%3A1114%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22TCP%20CONNECTION%20ESTABLISHMENT%20(%20THREE%20WAY%20HANDSHAKE)%20CLIENT%20SERVER%20SYN%20I%20SEQ.CLIENT%20SYN-ACK%20%7C%20SEQ.CLIENT%2B1%7CSEQ.%20SERVER%20ACK%20I%20SEQ.%20SERVER%2B1L%20SEQ.CLIENT%2B1%20OPTIONAL%3A%20FIRST%20FILE%20SEQ%20SEQUENCE%20NUMBER%20SONOS%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A130%2C%22y%22%3A60%2C%22width%22%3A132%2C%22height%22%3A52%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A270%2C%22y%22%3A54%2C%22width%22%3A1654%2C%22height%22%3A80%2C%22text%22%3A%22CONNECTION%20ESTABLISHMENT%20(%20THREE%20WAY%20HANDSHAKE)%22%7D%2C%7B%22x%22%3A504%2C%22y%22%3A218%2C%22width%22%3A164%2C%22height%22%3A53%2C%22text%22%3A%22CLIENT%22%7D%2C%7B%22x%22%3A1356%2C%22y%22%3A223%2C%22width%22%3A182%2C%22height%22%3A47%2C%22text%22%3A%22SERVER%22%7D%2C%7B%22x%22%3A864%2C%22y%22%3A338%2C%22width%22%3A288%2C%22height%22%3A74%2C%22text%22%3A%22SYN%20I%20SEQ.CLIENT%22%7D%2C%7B%22x%22%3A689%2C%22y%22%3A526%2C%22width%22%3A634%2C%22height%22%3A100%2C%22text%22%3A%22SYN-ACK%20%7C%20SEQ.CLIENT%2B1%7CSEQ.%20SERVER%22%7D%2C%7B%22x%22%3A693%2C%22y%22%3A721%2C%22width%22%3A612%2C%22height%22%3A120%2C%22text%22%3A%22ACK%20I%20SEQ.%20SERVER%2B1L%20SEQ.CLIENT%2B1%22%7D%2C%7B%22x%22%3A853%2C%22y%22%3A810%2C%22width%22%3A279%2C%22height%22%3A68%2C%22text%22%3A%22OPTIONAL%3A%20FIRST%20FILE%22%7D%2C%7B%22x%22%3A1297%2C%22y%22%3A1052%2C%22width%22%3A465%2C%22height%22%3A38%2C%22text%22%3A%22SEQ%20SEQUENCE%20NUMBER%22%7D%2C%7B%22x%22%3A28%2C%22y%22%3A1057%2C%22width%22%3A188%2C%22height%22%3A57%2C%22text%22%3A%22SONOS%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22ud128998c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h2 data-lake-id="y2lSR" id="y2lSR" data-lake-index-type="0"><span data-lake-id="u07cf809d" id="u07cf809d" style="color: rgba(0, 0, 0, 0.88)">TCP 是用来解决什么问题？</span></h2><p data-lake-id="u09701bdc" id="u09701bdc"><br></p><p data-lake-id="u7374a479" id="u7374a479"><span data-lake-id="u2681b346" id="u2681b346">TCP（Transmission Control Protocol）通过提供可靠传输、流量控制、拥塞控制和连接管理，解决了数据在不可靠的 IP 网络上的传输问题：</span></p><ol list="u7b57c679"><li fid="u62d64776" data-lake-id="u739dd57a" id="u739dd57a"><span data-lake-id="u144537bf" id="u144537bf">可靠性传输：TCP 确保数据包在网络传输过程中不丢失、不重复，并且按顺序到达。通过确认（ACK）、重传机制以及序列号，TCP 能够保证数据在不可靠的 IP 网络上可靠传输。</span></li><li fid="u62d64776" data-lake-id="u7954a8ac" id="u7954a8ac"><span data-lake-id="u8e58e2f9" id="u8e58e2f9">流量控制：TCP 通过滑动窗口机制调节发送方的数据发送速率，防止接收方因为处理能力有限而被数据流淹没。 </span></li><li fid="u62d64776" data-lake-id="u30e4f158" id="u30e4f158"><span data-lake-id="ue6a8f85e" id="ue6a8f85e">拥塞控制：TCP 通过拥塞避免算法（如慢启动、拥塞避免、快速重传和快速恢复）来防止网络过载，确保网络资源的公平使用和稳定性。 </span></li><li fid="u62d64776" data-lake-id="uac1daee9" id="uac1daee9"><span data-lake-id="u67530436" id="u67530436">连接管理：TCP 是面向连接的协议，采用三次握手（建立连接）和四次挥手（断开连接）机制来管理会话，确保通信的可靠性和状态的同步。</span></li></ol><h3 data-lake-id="zyiI9" id="zyiI9" data-lake-index-type="0"><span data-lake-id="u2b6f4a40" id="u2b6f4a40">扩展知识</span></h3><ol list="ud26e4537"><li fid="u19df7099" data-lake-id="u1b1fe0cb" id="u1b1fe0cb"><span data-lake-id="u2010eb84" id="u2010eb84">数据包重排序与重传机制：</span></li></ol><ul list="ud26e4537" data-lake-indent="1"><li fid="u6347e2f0" data-lake-id="u417103e2" id="u417103e2"><span data-lake-id="ua85269ce" id="ua85269ce">TCP 的序列号机制确保数据包按照正确的顺序组装。接收方通过序列号识别数据包的顺序，如果检测到丢失或乱序的包，会请求重传，保证数据完整性。</span></li></ul><ol list="ud26e4537" start="2"><li fid="u19df7099" data-lake-id="uec70cf4e" id="uec70cf4e"><span data-lake-id="ud5663272" id="ud5663272">滑动窗口与流量控制：</span></li></ol><ul list="ud26e4537" data-lake-indent="1"><li fid="u221acc12" data-lake-id="u296be11c" id="u296be11c"><span data-lake-id="u1f3f0a86" id="u1f3f0a86">滑动窗口用于动态调整可以发送的数据量。接收方通过发送窗口大小通告，指示发送方可以发送的最大数据量。这种机制不仅避免了接收方的溢出，还提高了数据传输效率。</span></li></ul><ol list="ud26e4537" start="3"><li fid="u19df7099" data-lake-id="uc3bab162" id="uc3bab162"><span data-lake-id="uf3cd37b1" id="uf3cd37b1">拥塞控制算法：<br /></span><span data-lake-id="ud9ed219b" id="ud9ed219b">TCP 的拥塞控制算法是核心的网络稳定性保证。经典算法包括以下几个步骤：</span></li></ol><ul list="ud26e4537" data-lake-indent="1"><li fid="ub9921114" data-lake-id="u968e01c9" id="u968e01c9"><span data-lake-id="uf3812633" id="uf3812633">慢启动：逐步增加发送窗口，直到检测到网络的拥塞点。 </span></li><li fid="ub9921114" data-lake-id="u8ea7b634" id="u8ea7b634"><span data-lake-id="ue84531a1" id="ue84531a1">拥塞避免：当达到网络容量后，逐渐增加窗口以避免拥塞。 </span></li><li fid="ub9921114" data-lake-id="ucad52c39" id="ucad52c39"><span data-lake-id="ua224dd1a" id="ua224dd1a">快速重传和快速恢复：在检测到包丢失时，立即进行重传并调整发送窗口，快速恢复正常传输状态。</span></li></ul><ol list="u0443a828" start="4"><li fid="u1cc86ffe" data-lake-id="u3d616c61" id="u3d616c61"><span data-lake-id="u536eaa45" id="u536eaa45">TCP 三次握手与四次挥手：</span></li></ol><ul list="u0443a828" data-lake-indent="1"><li fid="u42f47903" data-lake-id="uc40e1d30" id="uc40e1d30"><span data-lake-id="uad23541d" id="uad23541d">三次握手：建立连接时，双方通过三次信息交换（SYN, SYN-ACK, ACK）来确保双方都准备好进行数据传输，并协商参数（如初始序列号）。 </span></li><li fid="u42f47903" data-lake-id="ua5bf47d7" id="ua5bf47d7"><span data-lake-id="u364c0d39" id="u364c0d39">四次挥手：断开连接时，通过四次消息交换来确保数据传输完成且资源可以安全释放，防止未传输的数据丢失。</span></li></ul><ol list="u0443a828" start="5"><li fid="u1cc86ffe" data-lake-id="ud06bfd7a" id="ud06bfd7a"><span data-lake-id="ue19c1f25" id="ue19c1f25">TCP 的适应性与演变：</span></li></ol><ul list="u0443a828" data-lake-indent="1"><li fid="ufc1e6941" data-lake-id="u8ef0fb64" id="u8ef0fb64"><span data-lake-id="u7c331d47" id="u7c331d47">随着互联网的发展，TCP 也经历了多次改进，如 TCP Reno、TCP NewReno、TCP Vegas 等，它们在拥塞控制和流量管理上有不同的策略，以适应不同的网络环境。</span></li></ul><ol list="u0443a828" start="6"><li fid="u1cc86ffe" data-lake-id="uc523b5e2" id="uc523b5e2"><span data-lake-id="u19c7e446" id="u19c7e446">TCP 的局限性：</span></li></ol><ul list="u0443a828" data-lake-indent="1"><li fid="ue0af1a45" data-lake-id="ud847f9f9" id="ud847f9f9"><span data-lake-id="u8ecc2654" id="u8ecc2654">虽然 TCP 解决了可靠传输的问题，但在高延迟、高带宽的网络（如卫星通信、现代数据中心）中可能会受到性能瓶颈，进而催生了如 QUIC 等新协议的出现。<br /></span><span data-lake-id="u46e87af8" id="u46e87af8">更多 QUIC 细节参见 HTTP 1.0 和 2.0 有什么区别？内扩展知识 HTTP 3.0 时代</span></li></ul><h3 data-lake-id="cHRcS" id="cHRcS" data-lake-index-type="0"><span data-lake-id="u3f2d4255" id="u3f2d4255">TCP 为什么可靠？</span></h3><p data-lake-id="ua4c8d2a0" id="ua4c8d2a0"><span data-lake-id="u2558f3dd" id="u2558f3dd">TCP 之所以被称为可靠的协议，主要是因为它提供了以下功能：</span></p><ol list="u0e489d8e"><li fid="u427fedd1" data-lake-id="u9f3b1dec" id="u9f3b1dec"><span data-lake-id="ueb2d5a21" id="ueb2d5a21">数据完整性：使用校验和确保数据在传输中没有被破坏。</span></li><li fid="u427fedd1" data-lake-id="uc4982078" id="uc4982078"><span data-lake-id="ub85df397" id="ub85df397">数据顺序：保证数据按顺序到达接收方，且接收方能够重新排序乱序到达的数据。 </span></li><li fid="u427fedd1" data-lake-id="u1ca02898" id="u1ca02898"><span data-lake-id="u69b3ce3f" id="u69b3ce3f">流量控制：通过滑动窗口机制避免接收方溢出。 </span></li><li fid="u427fedd1" data-lake-id="u2bce7096" id="u2bce7096"><span data-lake-id="u481eb8e7" id="u481eb8e7">拥塞控制：通过动态调整发送速率避免网络拥塞。 </span></li><li fid="u427fedd1" data-lake-id="u58e47920" id="u58e47920"><span data-lake-id="u235360e3" id="u235360e3">重传机制：确保丢失的数据会被重新传输。 </span></li><li fid="u427fedd1" data-lake-id="uc748f947" id="uc748f947"><span data-lake-id="udd1e9f3a" id="udd1e9f3a">可靠的连接建立和关闭：通过三次握手和四次挥手确保连接的正确建立和断开。 </span></li><li fid="u427fedd1" data-lake-id="u6f53037c" id="u6f53037c"><span data-lake-id="uff94a81d" id="uff94a81d">防止数据重复：通过序列号和确认机制防止重复数据的接收。</span></li></ol><p data-lake-id="u25af1aac" id="u25af1aac"><span data-lake-id="u0030fe4b" id="u0030fe4b">​</span><br></p><h2 data-lake-id="HFz9H" id="HFz9H" data-lake-index-type="0"><span data-lake-id="u030f0026" id="u030f0026" style="color: rgba(0, 0, 0, 0.88)">说说 TCP 的四次挥手？</span></h2><p data-lake-id="uce2b9948" id="uce2b9948"><br></p><p data-lake-id="u0af28e5d" id="u0af28e5d"><span data-lake-id="u6a129818" id="u6a129818" style="color: rgb(28, 31, 35)">TCP 的四次挥手是用于安全关闭一个已建立的连接的过程，它确保双方都能完成数据传输并安全地释放连接资源。 </span></p><p data-lake-id="u2b95c472" id="u2b95c472"><span data-lake-id="u943ecee7" id="u943ecee7" style="color: rgb(28, 31, 35)">简述步骤： </span></p><p data-lake-id="u6c1a5738" id="u6c1a5738"><span data-lake-id="u8cb381a4" id="u8cb381a4" style="color: rgb(28, 31, 35)">1) 第一次挥手（FIN → ACK）：客户端主动关闭连接，发送 FIN 包，进入 FIN_WAIT_1 状态。服务器收到 FIN 后，表示不再接收数据，但仍可能继续发送数据。 </span></p><p data-lake-id="ua70d7812" id="ua70d7812"><span data-lake-id="u2c559ee9" id="u2c559ee9" style="color: rgb(28, 31, 35)">2) 第二次挥手（ACK）：服务器发送 ACK 包，确认已收到 FIN。此时服务器进入 CLOSE_WAIT 状态，客户端进入 FIN_WAIT_2 状态。</span></p><p data-lake-id="uf180ed6c" id="uf180ed6c"><span data-lake-id="uc94e4116" id="uc94e4116" style="color: rgb(28, 31, 35)"> 3) 第三次挥手（FIN → ACK）：服务器完成所有数据传输后，发送 FIN 包，进入 LAST_ACK 状态。客户端收到 FIN 后，准备关闭连接。</span></p><p data-lake-id="ua6de2dd6" id="ua6de2dd6"><span data-lake-id="ue11d82f5" id="ue11d82f5" style="color: rgb(28, 31, 35)"> 4) 第四次挥手（ACK）：客户端发送最后一个 ACK 包，进入 TIME_WAIT 状态，等待可能迟到的 FIN 包。服务器收到 ACK 后，关闭连接，进入 CLOSED 状态。客户端在 TIME_WAIT 计时结束后（2MSL），正式关闭连接。 </span></p><p data-lake-id="u841368fa" id="u841368fa"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745116186146-d84ffeff-92db-4189-ba73-138dd1c01d7e.png%22%2C%22taskId%22%3A%22ud11de3c2-8084-43fe-9fdb-9970db06805%22%2C%22clientId%22%3A%22u1b5a9ea4-ccfe-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A863.3333333333334%2C%22height%22%3A750%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A426665%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1295%2C%22originHeight%22%3A1125%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%9C%8D%E5%8A%A1%E7%AB%AF%20%E5%AE%A2%E6%88%B7%E7%AB%AF%20%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%20ESTABLISHED%20ESTABLISHED%20SEQ%E4%B8%89X%20FIN%20FIN_WAIT_1%20ACK%20X%2B1%2C%20SEQY%20CLOSED_WAIT%20ACK%20%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%20FIN%20SEG%20W%2C%20ACK%20X%2B1%20FIN_WAIT_2%20LAST_ACK%20SEQX%2B1%2C%20ACK%20W%2B1%20TIME_WAIT%20ACK%20%E7%AD%89%E5%BE%852MSL%20CLOSE%20CLOSE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1082%2C%22y%22%3A3%2C%22width%22%3A92%2C%22height%22%3A30%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E7%AB%AF%22%7D%2C%7B%22x%22%3A151%2C%22y%22%3A10%2C%22width%22%3A88%2C%22height%22%3A30%2C%22text%22%3A%22%E5%AE%A2%E6%88%B7%E7%AB%AF%22%7D%2C%7B%22x%22%3A585%2C%22y%22%3A86%2C%22width%22%3A116%2C%22height%22%3A29%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%22%7D%2C%7B%22x%22%3A87%2C%22y%22%3A114%2C%22width%22%3A190%2C%22height%22%3A24%2C%22text%22%3A%22ESTABLISHED%22%7D%2C%7B%22x%22%3A1066%2C%22y%22%3A155%2C%22width%22%3A190%2C%22height%22%3A27%2C%22text%22%3A%22ESTABLISHED%22%7D%2C%7B%22x%22%3A419%2C%22y%22%3A155%2C%22width%22%3A97%2C%22height%22%3A22%2C%22text%22%3A%22SEQ%E4%B8%89X%22%7D%2C%7B%22x%22%3A636%2C%22y%22%3A207%2C%22width%22%3A46%2C%22height%22%3A24%2C%22text%22%3A%22FIN%22%7D%2C%7B%22x%22%3A99%2C%22y%22%3A290%2C%22width%22%3A164%2C%22height%22%3A27%2C%22text%22%3A%22FIN_WAIT_1%22%7D%2C%7B%22x%22%3A410%2C%22y%22%3A320%2C%22width%22%3A200%2C%22height%22%3A30%2C%22text%22%3A%22ACK%20X%2B1%2C%20SEQY%22%7D%2C%7B%22x%22%3A1062%2C%22y%22%3A334%2C%22width%22%3A201%2C%22height%22%3A27%2C%22text%22%3A%22CLOSED_WAIT%22%7D%2C%7B%22x%22%3A642%2C%22y%22%3A337%2C%22width%22%3A58%2C%22height%22%3A25%2C%22text%22%3A%22ACK%22%7D%2C%7B%22x%22%3A609%2C%22y%22%3A408%2C%22width%22%3A116%2C%22height%22%3A29%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%22%7D%2C%7B%22x%22%3A650%2C%22y%22%3A515%2C%22width%22%3A46%2C%22height%22%3A25%2C%22text%22%3A%22FIN%22%7D%2C%7B%22x%22%3A391%2C%22y%22%3A514%2C%22width%22%3A207%2C%22height%22%3A24%2C%22text%22%3A%22SEG%20W%2C%20ACK%20X%2B1%22%7D%2C%7B%22x%22%3A97%2C%22y%22%3A527%2C%22width%22%3A165%2C%22height%22%3A28%2C%22text%22%3A%22FIN_WAIT_2%22%7D%2C%7B%22x%22%3A1091%2C%22y%22%3A622%2C%22width%22%3A149%2C%22height%22%3A32%2C%22text%22%3A%22LAST_ACK%22%7D%2C%7B%22x%22%3A399%2C%22y%22%3A645%2C%22width%22%3A245%2C%22height%22%3A28%2C%22text%22%3A%22SEQX%2B1%2C%20ACK%20W%2B1%22%7D%2C%7B%22x%22%3A101%2C%22y%22%3A714%2C%22width%22%3A157%2C%22height%22%3A27%2C%22text%22%3A%22TIME_WAIT%22%7D%2C%7B%22x%22%3A647%2C%22y%22%3A747%2C%22width%22%3A61%2C%22height%22%3A25%2C%22text%22%3A%22ACK%22%7D%2C%7B%22x%22%3A11%2C%22y%22%3A875%2C%22width%22%3A141%2C%22height%22%3A28%2C%22text%22%3A%22%E7%AD%89%E5%BE%852MSL%22%7D%2C%7B%22x%22%3A1122%2C%22y%22%3A976%2C%22width%22%3A92%2C%22height%22%3A24%2C%22text%22%3A%22CLOSE%22%7D%2C%7B%22x%22%3A133%2C%22y%22%3A1032%2C%22width%22%3A92%2C%22height%22%3A24%2C%22text%22%3A%22CLOSE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23eaebe7%22%2C%22id%22%3A%22uf63dd3f5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u7e94a660" id="u7e94a660"><br></p><p data-lake-id="u33836cba" id="u33836cba"><span data-lake-id="ua4fec7fa" id="ua4fec7fa" style="color: rgb(28, 31, 35)">为什么挥手需要四次? 主要是为了确保数据完整性。 TCP 是一个全双工协议，也就是说双方都要关闭，每一方都向对方发送 FIN 和回应 ACK。 客户端发起连接断开，代表客户端没数据要发送的，但是服务端可能还有数据没有返回给客户端。 就像我对你说我数据发完了，然后你回复好的你收到了。然后你对我说你数据发完了，然后我向你回复我收到了。这样才能保证数据不会丢失。 所以一个 FIN + ACK 代表一方结束数据的传输，因此需要两对 FIN + ACK，加起来就是四次通信。 挥手一定需要四次吗? 不一定，有时候可以变成三次挥手。 看下这张图： </span></p><p data-lake-id="u46a62828" id="u46a62828"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745116253251-33b52220-a781-42f7-bf5e-4cea2086655b.png%22%2C%22taskId%22%3A%22ua87c7a56-77ee-4571-be1e-6697c66100b%22%2C%22clientId%22%3A%22u1b5a9ea4-ccfe-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1239.3333333333333%2C%22height%22%3A697%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A255167%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1859%2C%22originHeight%22%3A1045%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%20%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%20%E5%AE%A2%E6%88%B7%E7%AB%AF%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%20%E5%AE%A2%E6%88%B7%E7%AB%AF%20FIN%20FIN%20ACK%2BFIN%20ACK%20FIN%20ACK%20ACK%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A332%2C%22y%22%3A59%2C%22width%22%3A144%2C%22height%22%3A38%2C%22text%22%3A%22%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%22%7D%2C%7B%22x%22%3A1331%2C%22y%22%3A63%2C%22width%22%3A144%2C%22height%22%3A37%2C%22text%22%3A%22%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B%22%7D%2C%7B%22x%22%3A1629%2C%22y%22%3A115%2C%22width%22%3A109%2C%22height%22%3A37%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E7%AB%AF%22%7D%2C%7B%22x%22%3A1076%2C%22y%22%3A136%2C%22width%22%3A107%2C%22height%22%3A37%2C%22text%22%3A%22%E5%AE%A2%E6%88%B7%E7%AB%AF%22%7D%2C%7B%22x%22%3A626%2C%22y%22%3A139%2C%22width%22%3A108%2C%22height%22%3A38%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E7%AB%AF%22%7D%2C%7B%22x%22%3A71%2C%22y%22%3A161%2C%22width%22%3A111%2C%22height%22%3A37%2C%22text%22%3A%22%E5%AE%A2%E6%88%B7%E7%AB%AF%22%7D%2C%7B%22x%22%3A1359%2C%22y%22%3A303%2C%22width%22%3A55%2C%22height%22%3A29%2C%22text%22%3A%22FIN%22%7D%2C%7B%22x%22%3A353%2C%22y%22%3A326%2C%22width%22%3A60%2C%22height%22%3A31%2C%22text%22%3A%22FIN%22%7D%2C%7B%22x%22%3A1317%2C%22y%22%3A495%2C%22width%22%3A150%2C%22height%22%3A29%2C%22text%22%3A%22ACK%2BFIN%22%7D%2C%7B%22x%22%3A353%2C%22y%22%3A518%2C%22width%22%3A75%2C%22height%22%3A32%2C%22text%22%3A%22ACK%22%7D%2C%7B%22x%22%3A362%2C%22y%22%3A627%2C%22width%22%3A57%2C%22height%22%3A31%2C%22text%22%3A%22FIN%22%7D%2C%7B%22x%22%3A1375%2C%22y%22%3A693%2C%22width%22%3A76%2C%22height%22%3A30%2C%22text%22%3A%22ACK%22%7D%2C%7B%22x%22%3A358%2C%22y%22%3A829%2C%22width%22%3A74%2C%22height%22%3A30%2C%22text%22%3A%22ACK%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fdfdfd%22%2C%22id%22%3A%22u13a75e7f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u0be41afb" id="u0be41afb"><span data-lake-id="u52eb9e01" id="u52eb9e01" style="color: rgb(28, 31, 35)">正常的四次挥手流程应该很熟悉了，但是思考一下，如果 Client 发送 FIN 给 server 的时候 server 已经没数据发送给 Client 了，那么 Server 就可以将 ACK 和它的 FIN 一起发给 Client，这样一来不就变成三次挥手了吗？ </span></p><h2 data-lake-id="ITSi6" id="ITSi6" data-lake-index-type="0"><span data-lake-id="ue95ce48f" id="ue95ce48f" style="color: rgba(0, 0, 0, 0.88)">TCP 的粘包和拆包能说说吗？</span></h2><ol list="uf97185b6"><li fid="ua49741f5" data-lake-id="uefb334a2" id="uefb334a2"><span data-lake-id="u3291b835" id="u3291b835" style="color: rgba(0, 0, 0, 0.88)">粘包与拆包（也称半包）现象：</span></li></ol><ul list="ud395ba83"><li fid="u96866fcd" data-lake-id="u6edc9862" id="u6edc9862"><span data-lake-id="u8cd08cfc" id="u8cd08cfc" style="color: rgba(0, 0, 0, 0.88)">粘包：指的是在 TCP 传输中，发送方的多个数据包在接收方被合并成一个包接收，导致多条消息数据粘在一起，接收方无法正确区分这些消息的边界。</span></li><li fid="u96866fcd" data-lake-id="uffd5d7d9" id="uffd5d7d9"><span data-lake-id="uc1472249" id="uc1472249" style="color: rgba(0, 0, 0, 0.88)">拆包：指的是发送方的一个数据包在接收方被分成了多个包接收，导致一条完整的消息被拆成多个部分，接收方无法一次性接收到完整的数据。</span></li></ul><ol list="u739f0d7d" start="2"><li fid="u844216db" data-lake-id="ua145c44f" id="ua145c44f"><span data-lake-id="u2ad0e070" id="u2ad0e070" style="color: rgba(0, 0, 0, 0.88)">原因：</span></li></ol><ul list="u03a30bfd"><li fid="u969e1689" data-lake-id="ub52abeb0" id="ub52abeb0"><span data-lake-id="ubd18a0e4" id="ubd18a0e4" style="color: rgba(0, 0, 0, 0.88)">粘包：主要由于 TCP 是面向字节流的协议，它不关心数据边界，数据在发送方可能被一次性发送，接收方在读取时可能会将多个消息拼接在一起。</span></li><li fid="u969e1689" data-lake-id="ue1f362f0" id="ue1f362f0"><span data-lake-id="u83de962e" id="u83de962e" style="color: rgba(0, 0, 0, 0.88)">拆包：可能由于网络传输中的 MTU（最大传输单元）限制或发送缓冲区大小限制，一个大包被分成了多个小包传输。</span></li></ul><ol list="ucd52eac3" start="3"><li fid="uc7dfb029" data-lake-id="u1226c410" id="u1226c410"><span data-lake-id="ub4b6c502" id="ub4b6c502" style="color: rgba(0, 0, 0, 0.88)">解决方法：</span></li></ol><ul list="ua20c2a8c"><li fid="u1e6145be" data-lake-id="u70518a25" id="u70518a25"><span data-lake-id="u467e038e" id="u467e038e" style="color: rgba(0, 0, 0, 0.88)">使用定长消息：每个消息都有固定的长度，接收方按照固定长度读取数据。</span></li><li fid="u1e6145be" data-lake-id="u4d659413" id="u4d659413"><span data-lake-id="u394af9cf" id="u394af9cf" style="color: rgba(0, 0, 0, 0.88)">添加消息分隔符：在每个消息之间添加特定的分隔符（如换行符），接收方可以通过分隔符来区分消息。 </span></li><li fid="u1e6145be" data-lake-id="u2e2d366c" id="u2e2d366c"><span data-lake-id="uca92ff83" id="uca92ff83" style="color: rgba(0, 0, 0, 0.88)">使用消息头：在消息的头部添加一个长度字段，指示消息的长度，接收方根据这个长度来读取相应长度的数据。</span></li></ul><h3 data-lake-id="C75Un" id="C75Un" data-lake-index-type="0"><span data-lake-id="uc2e3a0d5" id="uc2e3a0d5">通俗理解粘包与拆包</span></h3><p data-lake-id="uf35a98fd" id="uf35a98fd"><span data-lake-id="ucb79057a" id="ucb79057a">这里先举个可能不太恰当，但是很容易理解的例子。</span></p><p data-lake-id="uf02b8957" id="uf02b8957"><span data-lake-id="ubee907f2" id="ubee907f2">比如，平时我们要寄快递，如果东西太大的话，那么就需要拆成几个包裹来邮寄。<br /></span><span data-lake-id="u46909cfc" id="u46909cfc">收件人仅收到个别包裹的时候，东西是不完整的，对应到网络传输中，这种情况就叫半包。<br /></span><span data-lake-id="u204b52e6" id="u204b52e6">只有等接收到全部包裹时，这个东西（传输的信息）才完整，所以半包情况下无法解析出完整的数据，需要等，等接收到全部包裹。</span></p><p data-lake-id="ufdb1d336" id="ufdb1d336"><span data-lake-id="ud7a574b3" id="ud7a574b3">那么问题来了，如何知晓已经收到全部包裹了呢？下文我们再作分析。</span></p><p data-lake-id="u3451c960" id="u3451c960"><span data-lake-id="uf3959151" id="uf3959151">再比如，快过年了，我打算给家里的亲戚送点礼物，给每位长辈送个手表，我们都知道手表的体积不大，并且我家里人都住在一个村，所以把给各长辈的礼物打包在一个包裹里邮寄，这样能节省运费。<br /></span><span data-lake-id="u0dd1f1a3" id="u0dd1f1a3">这种把本应该分多个包传输的数据合成一个包发送的情况，对应到网络传输中，就叫粘包。</span></p><p data-lake-id="u20b5b674" id="u20b5b674"><span data-lake-id="u15d3f880" id="u15d3f880">看完这个例子之后，应该对粘包与半包有点感觉了，接下来我们看下网络中实际的情况。</span></p><p data-lake-id="ub5ff6c50" id="ub5ff6c50"><span data-lake-id="ub2d45884" id="ub2d45884">粘包与半包只有在 TCP 传输的时候才会有，像 UDP 是不会有这种情况的，原因是因为 TCP 是面向流的，数据之间没有界限的，而 UDP 是有的界限的。</span></p><p data-lake-id="ub4677f81" id="ub4677f81"><span data-lake-id="u6b54b2e7" id="u6b54b2e7">如果熟悉 TCP 和 UDP 报文格式的同学肯定知道，TCP 的包没有报文长度，而 UDP 的包有报文长度，这也说明了 TCP 为什么是流式。</span></p><p data-lake-id="uf8474b81" id="uf8474b81"><span data-lake-id="u2716e6d9" id="u2716e6d9">所以我为什么说上面的例子不太恰当，因为现实生活中快递的包裹之间其实是有界限的，TCP 则像流水，没有明确的界限。</span></p><p data-lake-id="uda1f8409" id="uda1f8409"><span data-lake-id="ue7f5062e" id="ue7f5062e">然后 TCP 有发送缓冲区的概念，UDP 实际上是没这个概念。</span></p><p data-lake-id="u5539f987" id="u5539f987"><span data-lake-id="u1c827f53" id="u1c827f53">假设 TCP 一次传输的数据大小超过发送缓冲区大小，那么一个完整的报文就需要被拆分成两个或更多的小报文，这可能会产生半包的情况，当接收端收到不完整的数据，是无法解析成功的。</span></p><p data-lake-id="uea26d6f9" id="uea26d6f9"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745117338032-6ff2957e-b541-4c93-b41d-3d5748b6c793.png%22%2C%22taskId%22%3A%22u0ec00058-97f2-4c09-a884-22f336e2029%22%2C%22clientId%22%3A%22u1b5a9ea4-ccfe-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A949.3333333333334%2C%22height%22%3A289%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A494404%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1424%2C%22originHeight%22%3A434%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%A4%AA%E5%A4%A7%E4%BA%86%2C%E8%A3%85%E4%B8%8D%E4%B8%8B%20X%20%E5%8F%91%E9%80%81%E7%BC%93%E5%86%B2%E5%8C%BA%20%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E5%8C%85%20%E5%8D%8A%E5%8C%85%E7%8E%B0%E8%B1%A1%20%E6%8E%A5%E6%94%B6%E7%AB%AF%20%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E5%8C%851%20%E6%8B%86%E5%8C%85%20%E5%8F%91%E9%80%81%E7%BC%93%E5%86%B2%E5%8C%BA%20%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E5%8C%851%20%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E5%8C%852%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A367%2C%22y%22%3A15%2C%22width%22%3A172%2C%22height%22%3A32%2C%22text%22%3A%22%E5%A4%AA%E5%A4%A7%E4%BA%86%2C%E8%A3%85%E4%B8%8D%E4%B8%8B%22%7D%2C%7B%22x%22%3A393%2C%22y%22%3A77%2C%22width%22%3A75%2C%22height%22%3A70%2C%22text%22%3A%22X%22%7D%2C%7B%22x%22%3A607%2C%22y%22%3A96%2C%22width%22%3A124%2C%22height%22%3A26%2C%22text%22%3A%22%E5%8F%91%E9%80%81%E7%BC%93%E5%86%B2%E5%8C%BA%22%7D%2C%7B%22x%22%3A104%2C%22y%22%3A96%2C%22width%22%3A123%2C%22height%22%3A26%2C%22text%22%3A%22%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E5%8C%85%22%7D%2C%7B%22x%22%3A1049%2C%22y%22%3A133%2C%22width%22%3A98%2C%22height%22%3A24%2C%22text%22%3A%22%E5%8D%8A%E5%8C%85%E7%8E%B0%E8%B1%A1%22%7D%2C%7B%22x%22%3A1156%2C%22y%22%3A228%2C%22width%22%3A81%2C%22height%22%3A28%2C%22text%22%3A%22%E6%8E%A5%E6%94%B6%E7%AB%AF%22%7D%2C%7B%22x%22%3A997%2C%22y%22%3A231%2C%22width%22%3A134%2C%22height%22%3A24%2C%22text%22%3A%22%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E5%8C%851%22%7D%2C%7B%22x%22%3A511%2C%22y%22%3A256%2C%22width%22%3A50%2C%22height%22%3A25%2C%22text%22%3A%22%E6%8B%86%E5%8C%85%22%7D%2C%7B%22x%22%3A596%2C%22y%22%3A382%2C%22width%22%3A122%2C%22height%22%3A26%2C%22text%22%3A%22%E5%8F%91%E9%80%81%E7%BC%93%E5%86%B2%E5%8C%BA%22%7D%2C%7B%22x%22%3A171%2C%22y%22%3A385%2C%22width%22%3A136%2C%22height%22%3A26%2C%22text%22%3A%22%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E5%8C%851%22%7D%2C%7B%22x%22%3A20%2C%22y%22%3A386%2C%22width%22%3A135%2C%22height%22%3A26%2C%22text%22%3A%22%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E5%8C%852%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23ebf0e6%22%2C%22id%22%3A%22ud55c68b9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u93a4af26" id="u93a4af26"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745117353233-a15e043d-1f81-41f5-a4ca-29373e9afb85.png%22%2C%22taskId%22%3A%22u971bef59-2fba-4a3c-9a27-b5a4a79d459%22%2C%22clientId%22%3A%22u1b5a9ea4-ccfe-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A880%2C%22height%22%3A400%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A523891%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1320%2C%22originHeight%22%3A600%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%A4%AA%E5%B0%8F%E4%BA%86%20A%E5%8F%91%E9%80%81%20%E5%8F%91%E9%80%81%E7%BC%93%E5%86%B2%E5%8C%BA%20%E7%9A%84%E5%8C%85%20%E7%B2%98%E5%8C%85%20%E7%B2%98%E5%8C%85%E7%8E%B0%E8%B1%A1%20B%E5%8F%91%E9%80%81%20%E5%8F%91%E9%80%81%E7%BC%93%E5%86%B2%E5%8C%BA%20%E7%9A%84%E5%8C%85%20%E7%BD%91%E7%BB%9C%E5%8F%91%E9%80%81%20%E5%8F%91%E9%80%81%E7%9A%84%E5%8C%85%20A%E5%8F%91%E9%80%81B%E5%8F%91%E9%80%81%20A%E5%8F%91%E9%80%81%20%E6%8E%A5%E6%94%B6%E7%AB%AF%20%E7%9A%84%E5%8C%85%20%E7%9A%84%E5%8C%85%20%E7%9A%84%E5%8C%85%20C%E5%8F%91%20%E9%80%81%E7%9A%84%E5%8C%85%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A220%2C%22y%22%3A45%2C%22width%22%3A72%2C%22height%22%3A23%2C%22text%22%3A%22%E5%A4%AA%E5%B0%8F%E4%BA%86%22%7D%2C%7B%22x%22%3A88%2C%22y%22%3A61%2C%22width%22%3A64%2C%22height%22%3A26%2C%22text%22%3A%22A%E5%8F%91%E9%80%81%22%7D%2C%7B%22x%22%3A424%2C%22y%22%3A76%2C%22width%22%3A124%2C%22height%22%3A26%2C%22text%22%3A%22%E5%8F%91%E9%80%81%E7%BC%93%E5%86%B2%E5%8C%BA%22%7D%2C%7B%22x%22%3A95%2C%22y%22%3A91%2C%22width%22%3A50%2C%22height%22%3A24%2C%22text%22%3A%22%E7%9A%84%E5%8C%85%22%7D%2C%7B%22x%22%3A304%2C%22y%22%3A236%2C%22width%22%3A53%2C%22height%22%3A25%2C%22text%22%3A%22%E7%B2%98%E5%8C%85%22%7D%2C%7B%22x%22%3A991%2C%22y%22%3A339%2C%22width%22%3A100%2C%22height%22%3A26%2C%22text%22%3A%22%E7%B2%98%E5%8C%85%E7%8E%B0%E8%B1%A1%22%7D%2C%7B%22x%22%3A37%2C%22y%22%3A366%2C%22width%22%3A66%2C%22height%22%3A25%2C%22text%22%3A%22B%E5%8F%91%E9%80%81%22%7D%2C%7B%22x%22%3A439%2C%22y%22%3A367%2C%22width%22%3A122%2C%22height%22%3A26%2C%22text%22%3A%22%E5%8F%91%E9%80%81%E7%BC%93%E5%86%B2%E5%8C%BA%22%7D%2C%7B%22x%22%3A44%2C%22y%22%3A397%2C%22width%22%3A52%2C%22height%22%3A25%2C%22text%22%3A%22%E7%9A%84%E5%8C%85%22%7D%2C%7B%22x%22%3A687%2C%22y%22%3A404%2C%22width%22%3A99%2C%22height%22%3A27%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E5%8F%91%E9%80%81%22%7D%2C%7B%22x%22%3A1104%2C%22y%22%3A415%2C%22width%22%3A43%2C%22height%22%3A112%2C%22text%22%3A%22%E5%8F%91%E9%80%81%E7%9A%84%E5%8C%85%22%7D%2C%7B%22x%22%3A938%2C%22y%22%3A443%2C%22width%22%3A150%2C%22height%22%3A30%2C%22text%22%3A%22A%E5%8F%91%E9%80%81B%E5%8F%91%E9%80%81%22%7D%2C%7B%22x%22%3A388%2C%22y%22%3A446%2C%22width%22%3A69%2C%22height%22%3A26%2C%22text%22%3A%22A%E5%8F%91%E9%80%81%22%7D%2C%7B%22x%22%3A1204%2C%22y%22%3A466%2C%22width%22%3A79%2C%22height%22%3A27%2C%22text%22%3A%22%E6%8E%A5%E6%94%B6%E7%AB%AF%22%7D%2C%7B%22x%22%3A947%2C%22y%22%3A475%2C%22width%22%3A51%2C%22height%22%3A27%2C%22text%22%3A%22%E7%9A%84%E5%8C%85%22%7D%2C%7B%22x%22%3A1030%2C%22y%22%3A476%2C%22width%22%3A50%2C%22height%22%3A25%2C%22text%22%3A%22%E7%9A%84%E5%8C%85%22%7D%2C%7B%22x%22%3A398%2C%22y%22%3A477%2C%22width%22%3A51%2C%22height%22%3A25%2C%22text%22%3A%22%E7%9A%84%E5%8C%85%22%7D%2C%7B%22x%22%3A101%2C%22y%22%3A481%2C%22width%22%3A44%2C%22height%22%3A30%2C%22text%22%3A%22C%E5%8F%91%22%7D%2C%7B%22x%22%3A108%2C%22y%22%3A506%2C%22width%22%3A31%2C%22height%22%3A90%2C%22text%22%3A%22%E9%80%81%E7%9A%84%E5%8C%85%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23eae6d8%22%2C%22id%22%3A%22u00c282c9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h2 data-lake-id="khNDM" id="khNDM" data-lake-index-type="0"><span data-lake-id="uaa84e489" id="uaa84e489" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">说说 TCP 拥塞控制的步骤？</span></h2><p data-lake-id="ubfd904f5" id="ubfd904f5"><br></p><p data-lake-id="u8a98e9d4" id="u8a98e9d4"><span data-lake-id="ua0efd08a" id="ua0efd08a" style="color: rgb(28, 31, 35)">主要有以下几个步骤： </span></p><p data-lake-id="u838a6e12" id="u838a6e12"><span data-lake-id="u8a7a09e7" id="u8a7a09e7" style="color: rgb(28, 31, 35)">1) 慢启动（Slow Start）： 发送方在连接建立初期，缓慢地增加数据发送速率。初始的拥塞窗口（cwnd）通常为一个 MSS（最大报文段大小），然后在每次收到 ACK 后成倍增加 cwnd，直到达到慢启动阈值（ssthresh）或检测到网络拥塞。</span></p><p data-lake-id="ub522aa5d" id="ub522aa5d"><span data-lake-id="u137c054d" id="u137c054d" style="color: rgb(28, 31, 35)"> 2) 拥塞避免（Congestion Avoidance） 当 cwnd 达到 ssthresh 后，TCP 进入拥塞避免阶段，拥塞窗口的增长速度从指数变为线性增长，即每个 RTT（往返时间）增加一个 MSS。这一阶段旨在避免激烈的拥塞反应，保持网络稳定性。</span></p><p data-lake-id="u52096faf" id="u52096faf"><span data-lake-id="u2d1aa166" id="u2d1aa166" style="color: rgb(28, 31, 35)"> 3) 快速重传（Fast Retransmit） 发送方在收到三个重复的 ACK 后，立即重传被认为丢失的报文段，而无需等待超时。这减少了重传的延迟，迅速应对数据丢失。</span></p><p data-lake-id="ua7ca32fe" id="ua7ca32fe"><span data-lake-id="uad6ed72e" id="uad6ed72e" style="color: rgb(28, 31, 35)"> 4) 快速恢复（Fast Recovery） 在快速重传后，TCP 不进入慢启动，而是减小 cwnd 到当前的一半，并设置 ssthresh 为当前新的 cwnd 的值，然后开始线性增加 cwnd，以快速恢复到丢包前的传输速率。</span></p><p data-lake-id="u8fddef0f" id="u8fddef0f"><span data-lake-id="u3f276692" id="u3f276692" style="color: rgb(28, 31, 35)">​</span><br></p><h2 data-lake-id="xNtq4" id="xNtq4" data-lake-index-type="0"><span data-lake-id="ufbd5ef23" id="ufbd5ef23" style="color: rgba(0, 0, 0, 0.88)">TCP/IP 四层模型是什么？</span><span data-lake-id="u9c154c8d" id="u9c154c8d">T</span></h2><p data-lake-id="u7a2b119e" id="u7a2b119e"><span data-lake-id="u7644ef30" id="u7644ef30">TCP/IP 四层模型是一个分层网络通信模型，它将网络通信过程分为四个层次，这四层分别是：网络接口层、互联网层、传输层和应用层。</span></p><ul list="uc2e6cfe9"><li fid="ua252d657" data-lake-id="ud73e38d3" id="ud73e38d3"><span data-lake-id="u12e128e7" id="u12e128e7" style="color: rgba(0, 0, 0, 0.88)">网络接口层负责在计算机和网络硬件之间传输数据，负责在物理网络上发送和接收数据帧，包括以太网、Wi - Fi 等协议</span></li><li fid="ua252d657" data-lake-id="ub821adf7" id="ub821adf7"><span data-lake-id="u31ddd455" id="u31ddd455" style="color: rgba(0, 0, 0, 0.88)">互联网层（网络层）通过 IP 协议提供数据包的路由和转发</span></li><li fid="ua252d657" data-lake-id="u4148f0ce" id="u4148f0ce"><span data-lake-id="u6f8c5028" id="u6f8c5028" style="color: rgba(0, 0, 0, 0.88)">传输层负责在两个主机之间提供端到端的通信服务，常见的协议有 TCP 和 UDP</span></li><li fid="ua252d657" data-lake-id="uc02506e8" id="uc02506e8"><span data-lake-id="u2141fa71" id="u2141fa71" style="color: rgba(0, 0, 0, 0.88)">应用层通过各种协议提供网络应用程序的功能，如 HTTP、FTP、SMTP 等协议</span></li></ul><h3 data-lake-id="AB5pa" id="AB5pa" data-lake-index-type="0"><span data-lake-id="u2fdfcc62" id="u2fdfcc62" style="color: rgba(0, 0, 0, 0.88)">分层的优点</span></h3><ul list="ub79ad8bc"><li fid="uf578543b" data-lake-id="uc09935c1" id="uc09935c1"><strong><span data-lake-id="ubd63e880" id="ubd63e880">简化设计与实现</span></strong><span data-lake-id="u01d06a1a" id="u01d06a1a" style="color: rgba(0, 0, 0, 0.88)">：通过将网络功能分解为不同的层，每一层只负责特定的任务，从而简化了设计和实现的复杂性。</span></li><li fid="uf578543b" data-lake-id="ue6e4827d" id="ue6e4827d"><strong><span data-lake-id="ub810d8e8" id="ub810d8e8">模块化</span></strong><span data-lake-id="u45554d08" id="u45554d08" style="color: rgba(0, 0, 0, 0.88)">：每一层可以独立发展和优化，不同层次之间通过标准接口进行通信，便于各层的更新和替换。 </span></li><li fid="uf578543b" data-lake-id="ud9099bd0" id="ud9099bd0"><strong><span data-lake-id="ub1f6994c" id="ub1f6994c">互操作性</span></strong><span data-lake-id="ucef7ccf3" id="ucef7ccf3" style="color: rgba(0, 0, 0, 0.88)">：明确定义每个层次之间的接口和协议，不同厂商或组织开发的网络设备和软件可以相互兼容，使得不同的网络设备和系统能够在不同的层次上进行无缝互操作，提升了网络的兼容性。 </span></li><li fid="uf578543b" data-lake-id="uac5d0502" id="uac5d0502"><strong><span data-lake-id="ud0d72816" id="ud0d72816">故障隔离</span></strong><span data-lake-id="u3817a93b" id="u3817a93b" style="color: rgba(0, 0, 0, 0.88)">：每个层次都有自己的错误检测、纠错和恢复机制，且分层结构能够帮助网络工程师定位问题所在的层次，从而更快地进行故障排除。</span></li></ul><h2 data-lake-id="FsnHT" id="FsnHT" data-lake-index-type="0"><span data-lake-id="ub3a5bc5b" id="ub3a5bc5b" style="color: rgba(0, 0, 0, 0.88)">Cookie、Session、Token 之间有什么区别？</span></h2><h3 data-lake-id="CZDav" id="CZDav" data-lake-index-type="0"><span data-lake-id="ub27cbd13" id="ub27cbd13" style="color: rgba(0, 0, 0, 0.88)">回答重点</span></h3><ol list="ua7256238"><li fid="ue5457a80" data-lake-id="u4a8cb9fc" id="u4a8cb9fc"><span data-lake-id="ud6ab8f85" id="ud6ab8f85" style="color: rgba(0, 0, 0, 0.88)">Cookie:<br /></span><span data-lake-id="u31b14475" id="u31b14475" style="color: rgba(0, 0, 0, 0.88)">Cookie 是存储在用户浏览器端的一个小型数据文件，用于跟踪和保存用户的状态信息。<br /></span><span data-lake-id="u1ed3fa47" id="u1ed3fa47" style="color: rgba(0, 0, 0, 0.88)">主要用于保持用户登录状态、跟踪用户行为、存储用户偏好等。<br /></span><span data-lake-id="u37864f4b" id="u37864f4b" style="color: rgba(0, 0, 0, 0.88)">存储在浏览器端。</span></li><li fid="ue5457a80" data-lake-id="ub02fdc81" id="ub02fdc81"><span data-lake-id="u23bb00bc" id="u23bb00bc" style="color: rgba(0, 0, 0, 0.88)">Session:<br /></span><span data-lake-id="u5e47b481" id="u5e47b481" style="color: rgba(0, 0, 0, 0.88)">Session 是服务器端保存用户状态的机制，每个用户会话都有一个唯一的 Session ID。<br /></span><span data-lake-id="uadbf13b8" id="uadbf13b8" style="color: rgba(0, 0, 0, 0.88)">主要用于跟踪用户在服务器上的状态信息，例如登录状态和购物车内容。<br /></span><span data-lake-id="ubc390f07" id="ubc390f07" style="color: rgba(0, 0, 0, 0.88)">存储在服务器端，然后对应的 Session ID 通过 Cookie 保存在客户端浏览器中。</span></li><li fid="ue5457a80" data-lake-id="uc9f0d75a" id="uc9f0d75a"><span data-lake-id="uc0dca6a0" id="uc0dca6a0" style="color: rgba(0, 0, 0, 0.88)">Token:<br /></span><span data-lake-id="u6e3bba17" id="u6e3bba17" style="color: rgba(0, 0, 0, 0.88)">Token 本质是一种加密的字符串，用于身份验证和授权，可以包含用户信息和权限，用于验证用户身份或授权访问资源。<br /></span><span data-lake-id="u1e254424" id="u1e254424" style="color: rgba(0, 0, 0, 0.88)">认证后，后端服务会返回 Token，存储在客户端（浏览器或移动应用中），后续客户端访问服务端需要带上这个 Token。</span></li></ol><p data-lake-id="u3dc5e229" id="u3dc5e229"><span data-lake-id="u00d49ae1" id="u00d49ae1" style="color: rgba(0, 0, 0, 0.88)">它们之间使用场景区别:</span></p><ul list="u0ed8f9b0"><li fid="uaa652501" data-lake-id="u23391a08" id="u23391a08"><span data-lake-id="uc8cf3fd7" id="uc8cf3fd7" style="color: rgba(0, 0, 0, 0.88)">Cookie: 主要用于客户端状态的简单存储和追踪。</span></li><li fid="uaa652501" data-lake-id="u2870ef10" id="u2870ef10"><span data-lake-id="u59f9ac21" id="u59f9ac21" style="color: rgba(0, 0, 0, 0.88)">Session: 用于服务器端的复杂状态管理，特别是在需要存储大量会话数据时。 </span></li><li fid="uaa652501" data-lake-id="uc9b9ce21" id="uc9b9ce21"><span data-lake-id="u25561fe8" id="u25561fe8" style="color: rgba(0, 0, 0, 0.88)">Token: 用于无状态的认证和授权，特别是在分布式和跨域环境下。</span></li></ul><p data-lake-id="u8d413531" id="u8d413531"><span data-lake-id="u81631116" id="u81631116" style="color: rgba(0, 0, 0, 0.88)">简单来说，Cookie 和 Session 更适合用于单次会话的认证和状态管理，而 Token 更适合用于跨会话的认证和状态管理。</span></p><p data-lake-id="uded83e39" id="uded83e39"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745242373547-b4d343a0-90cf-4ff0-bd3a-94b334d78d92.png%22%2C%22taskId%22%3A%22u30480e15-df25-4d1c-bb6e-cae1899f2a8%22%2C%22clientId%22%3A%22u1b5a9ea4-ccfe-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A936%2C%22height%22%3A277%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A202084%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1404%2C%22originHeight%22%3A416%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22BAIDUID%20%E7%99%BE%E5%BA%A6%E6%9C%8D%E5%8A%A1%E5%99%A8%20SESSIONLD-1%20YES%E7%9A%84%E7%BB%83%E7%BA%A7%E6%94%BB%20BAIDUNAME%20%E7%95%A5%20%E8%AE%BF%E9%97%AE%E7%99%BE%E5%BA%A6%E5%B8%A6%E4%B8%8ACOOKIE%2C%E5%86%85%E5%90%ABSESSIONLD%20%E9%80%9A%E8%BF%87SESSIONLD%20%E6%89%BE%E5%88%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%20%E6%B5%8F%E8%A7%88%E5%99%A8%20SET-COOKIE%20SESSIONLD%20BAIDUID%20SESSIONLD-2%20%E7%A8%8B%E5%BA%8F%E5%91%98YES%20BAIDUNAME%20%E9%9D%A2%E8%AF%95%E7%94%A8%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1138%2C%22y%22%3A122%2C%22width%22%3A67%2C%22height%22%3A17%2C%22text%22%3A%22BAIDUID%22%7D%2C%7B%22x%22%3A644%2C%22y%22%3A131%2C%22width%22%3A123%2C%22height%22%3A27%2C%22text%22%3A%22%E7%99%BE%E5%BA%A6%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A968%2C%22y%22%3A149%2C%22width%22%3A97%2C%22height%22%3A19%2C%22text%22%3A%22SESSIONLD-1%22%7D%2C%7B%22x%22%3A1224%2C%22y%22%3A165%2C%22width%22%3A97%2C%22height%22%3A20%2C%22text%22%3A%22YES%E7%9A%84%E7%BB%83%E7%BA%A7%E6%94%BB%22%7D%2C%7B%22x%22%3A1122%2C%22y%22%3A175%2C%22width%22%3A98%2C%22height%22%3A17%2C%22text%22%3A%22BAIDUNAME%22%7D%2C%7B%22x%22%3A1261%2C%22y%22%3A187%2C%22width%22%3A23%2C%22height%22%3A16%2C%22text%22%3A%22%E7%95%A5%22%7D%2C%7B%22x%22%3A263%2C%22y%22%3A204%2C%22width%22%3A273%2C%22height%22%3A20%2C%22text%22%3A%22%E8%AE%BF%E9%97%AE%E7%99%BE%E5%BA%A6%E5%B8%A6%E4%B8%8ACOOKIE%2C%E5%86%85%E5%90%ABSESSIONLD%22%7D%2C%7B%22x%22%3A911%2C%22y%22%3A215%2C%22width%22%3A101%2C%22height%22%3A17%2C%22text%22%3A%22%E9%80%9A%E8%BF%87SESSIONLD%22%7D%2C%7B%22x%22%3A911%2C%22y%22%3A234%2C%22width%22%3A100%2C%22height%22%3A20%2C%22text%22%3A%22%E6%89%BE%E5%88%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%22%7D%2C%7B%22x%22%3A95%2C%22y%22%3A237%2C%22width%22%3A51%2C%22height%22%3A18%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%22%7D%2C%7B%22x%22%3A317%2C%22y%22%3A288%2C%22width%22%3A155%2C%22height%22%3A18%2C%22text%22%3A%22SET-COOKIE%20SESSIONLD%22%7D%2C%7B%22x%22%3A1145%2C%22y%22%3A296%2C%22width%22%3A67%2C%22height%22%3A15%2C%22text%22%3A%22BAIDUID%22%7D%2C%7B%22x%22%3A967%2C%22y%22%3A321%2C%22width%22%3A99%2C%22height%22%3A19%2C%22text%22%3A%22SESSIONLD-2%22%7D%2C%7B%22x%22%3A1243%2C%22y%22%3A348%2C%22width%22%3A77%2C%22height%22%3A19%2C%22text%22%3A%22%E7%A8%8B%E5%BA%8F%E5%91%98YES%22%7D%2C%7B%22x%22%3A1131%2C%22y%22%3A349%2C%22width%22%3A95%2C%22height%22%3A15%2C%22text%22%3A%22BAIDUNAME%22%7D%2C%7B%22x%22%3A1324%2C%22y%22%3A371%2C%22width%22%3A73%2C%22height%22%3A32%2C%22text%22%3A%22%E9%9D%A2%E8%AF%95%E7%94%A8%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23a7c2e7%22%2C%22id%22%3A%22uf78fb2b4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><span data-lake-id="uf9f2e65d" id="uf9f2e65d">\</span><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745242383448-dd275b06-da13-441a-b0e5-53f1626c0270.png%22%2C%22taskId%22%3A%22u533b1299-5c3f-4493-850c-0e04c152251%22%2C%22clientId%22%3A%22u1b5a9ea4-ccfe-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A962.6666666666666%2C%22height%22%3A551%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A404777%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1444%2C%22originHeight%22%3A827%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%20USERLD%201.%20%E5%AF%86%E9%92%A5%20USERNAME%3AYES%20%E5%93%88%E5%B8%8C%E5%8A%A0%E5%AF%86%20%E5%85%88%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D%20%E7%AD%BE%E5%90%8D%20%E7%99%BB%E5%BD%95%20%E6%B5%8F%E8%A7%88%E5%99%A8%20TOKEN%20BASE64%20USERLD%201.%20%E5%B0%86%E7%AD%BE%E5%90%8D%E6%8B%BC%E6%8E%A5%E5%88%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%90%8E%E9%9D%A2%20TOKEN%20USERNAME%3AYES%2C%20%E7%AD%BE%E5%90%8D%3AXOOOX%20%E6%9C%8D%E5%8A%A1%E5%99%A8%20USERLD%201%2C%20%E5%AF%86%E9%92%A5%20USERNAME%3AYES%20%E5%93%88%E5%B8%8C%E5%8A%A0%E5%AF%86%20%E6%A0%B9%E6%8D%AETOKEN%E7%9A%84%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D%20%E7%AD%BE%E5%90%8D%20%E8%AF%B7%E6%B1%82%E5%B8%A6%E7%9D%80%20TOKEN%20%E6%B5%8F%E8%A7%88%E5%99%A8%20%E5%86%8D%E5%AF%B9%E6%AF%94%E7%AD%BE%E5%90%8D%20%E4%B8%8D%E7%9B%B8%E7%AD%89%20%E7%9B%B8%E7%AD%89%20%E5%93%8D%E5%BA%94%20%E9%AA%8C%E7%AD%BE%E5%A4%B1%E8%B4%A5%20%E5%92%8CTOKEN%E4%B8%8A%E7%9A%84%E7%AD%BE%E5%90%8D%E6%AF%94%E8%BE%83%20%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1315%2C%22y%22%3A63%2C%22width%22%3A77%2C%22height%22%3A26%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A826%2C%22y%22%3A73%2C%22width%22%3A71%2C%22height%22%3A14%2C%22text%22%3A%22USERLD%201.%22%7D%2C%7B%22x%22%3A1014%2C%22y%22%3A80%2C%22width%22%3A33%2C%22height%22%3A17%2C%22text%22%3A%22%E5%AF%86%E9%92%A5%22%7D%2C%7B%22x%22%3A804%2C%22y%22%3A90%2C%22width%22%3A129%2C%22height%22%3A16%2C%22text%22%3A%22USERNAME%3AYES%22%7D%2C%7B%22x%22%3A976%2C%22y%22%3A112%2C%22width%22%3A66%2C%22height%22%3A18%2C%22text%22%3A%22%E5%93%88%E5%B8%8C%E5%8A%A0%E5%AF%86%22%7D%2C%7B%22x%22%3A1123%2C%22y%22%3A137%2C%22width%22%3A109%2C%22height%22%3A23%2C%22text%22%3A%22%E5%85%88%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D%22%7D%2C%7B%22x%22%3A951%2C%22y%22%3A155%2C%22width%22%3A35%2C%22height%22%3A20%2C%22text%22%3A%22%E7%AD%BE%E5%90%8D%22%7D%2C%7B%22x%22%3A425%2C%22y%22%3A176%2C%22width%22%3A48%2C%22height%22%3A23%2C%22text%22%3A%22%E7%99%BB%E5%BD%95%22%7D%2C%7B%22x%22%3A145%2C%22y%22%3A209%2C%22width%22%3A53%2C%22height%22%3A19%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%22%7D%2C%7B%22x%22%3A415%2C%22y%22%3A260%2C%22width%22%3A58%2C%22height%22%3A19%2C%22text%22%3A%22TOKEN%22%7D%2C%7B%22x%22%3A750%2C%22y%22%3A265%2C%22width%22%3A57%2C%22height%22%3A16%2C%22text%22%3A%22BASE64%22%7D%2C%7B%22x%22%3A893%2C%22y%22%3A267%2C%22width%22%3A69%2C%22height%22%3A16%2C%22text%22%3A%22USERLD%201.%22%7D%2C%7B%22x%22%3A1046%2C%22y%22%3A280%2C%22width%22%3A262%2C%22height%22%3A24%2C%22text%22%3A%22%E5%B0%86%E7%AD%BE%E5%90%8D%E6%8B%BC%E6%8E%A5%E5%88%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%90%8E%E9%9D%A2%22%7D%2C%7B%22x%22%3A668%2C%22y%22%3A283%2C%22width%22%3A47%2C%22height%22%3A16%2C%22text%22%3A%22TOKEN%22%7D%2C%7B%22x%22%3A862%2C%22y%22%3A287%2C%22width%22%3A133%2C%22height%22%3A17%2C%22text%22%3A%22USERNAME%3AYES%2C%22%7D%2C%7B%22x%22%3A884%2C%22y%22%3A306%2C%22width%22%3A103%2C%22height%22%3A16%2C%22text%22%3A%22%E7%AD%BE%E5%90%8D%3AXOOOX%22%7D%2C%7B%22x%22%3A1297%2C%22y%22%3A484%2C%22width%22%3A77%2C%22height%22%3A27%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A825%2C%22y%22%3A496%2C%22width%22%3A64%2C%22height%22%3A15%2C%22text%22%3A%22USERLD%201%2C%22%7D%2C%7B%22x%22%3A1009%2C%22y%22%3A504%2C%22width%22%3A35%2C%22height%22%3A17%2C%22text%22%3A%22%E5%AF%86%E9%92%A5%22%7D%2C%7B%22x%22%3A801%2C%22y%22%3A514%2C%22width%22%3A124%2C%22height%22%3A17%2C%22text%22%3A%22USERNAME%3AYES%22%7D%2C%7B%22x%22%3A971%2C%22y%22%3A536%2C%22width%22%3A67%2C%22height%22%3A18%2C%22text%22%3A%22%E5%93%88%E5%B8%8C%E5%8A%A0%E5%AF%86%22%7D%2C%7B%22x%22%3A1096%2C%22y%22%3A555%2C%22width%22%3A313%2C%22height%22%3A28%2C%22text%22%3A%22%E6%A0%B9%E6%8D%AETOKEN%E7%9A%84%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D%22%7D%2C%7B%22x%22%3A946%2C%22y%22%3A577%2C%22width%22%3A34%2C%22height%22%3A18%2C%22text%22%3A%22%E7%AD%BE%E5%90%8D%22%7D%2C%7B%22x%22%3A368%2C%22y%22%3A598%2C%22width%22%3A154%2C%22height%22%3A23%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%B8%A6%E7%9D%80%20TOKEN%22%7D%2C%7B%22x%22%3A142%2C%22y%22%3A633%2C%22width%22%3A51%2C%22height%22%3A19%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%22%7D%2C%7B%22x%22%3A1171%2C%22y%22%3A641%2C%22width%22%3A111%2C%22height%22%3A23%2C%22text%22%3A%22%E5%86%8D%E5%AF%B9%E6%AF%94%E7%AD%BE%E5%90%8D%22%7D%2C%7B%22x%22%3A770%2C%22y%22%3A656%2C%22width%22%3A51%2C%22height%22%3A19%2C%22text%22%3A%22%E4%B8%8D%E7%9B%B8%E7%AD%89%22%7D%2C%7B%22x%22%3A1055%2C%22y%22%3A670%2C%22width%22%3A37%2C%22height%22%3A19%2C%22text%22%3A%22%E7%9B%B8%E7%AD%89%22%7D%2C%7B%22x%22%3A417%2C%22y%22%3A683%2C%22width%22%3A45%2C%22height%22%3A22%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%22%7D%2C%7B%22x%22%3A635%2C%22y%22%3A685%2C%22width%22%3A69%2C%22height%22%3A20%2C%22text%22%3A%22%E9%AA%8C%E7%AD%BE%E5%A4%B1%E8%B4%A5%22%7D%2C%7B%22x%22%3A850%2C%22y%22%3A691%2C%22width%22%3A158%2C%22height%22%3A19%2C%22text%22%3A%22%E5%92%8CTOKEN%E4%B8%8A%E7%9A%84%E7%AD%BE%E5%90%8D%E6%AF%94%E8%BE%83%22%7D%2C%7B%22x%22%3A1159%2C%22y%22%3A691%2C%22width%22%3A68%2C%22height%22%3A19%2C%22text%22%3A%22%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23c1cbe8%22%2C%22id%22%3A%22ucc4562f0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h2 data-lake-id="hpuWi" id="hpuWi" data-lake-index-type="0"><span data-lake-id="udfb23ba0" id="udfb23ba0" style="color: rgba(0, 0, 0, 0.88); background-color: rgb(250, 250, 250)">从网络角度来看，用户从输入网址到网页显示，期间发生了什么？</span></h2><p data-lake-id="u0d12c42e" id="u0d12c42e"><br></p><p data-lake-id="u6ffdb450" id="u6ffdb450"><span data-lake-id="u8fdadf77" id="u8fdadf77" style="color: rgb(28, 31, 35)">1. 浏览器解析 URL 浏览器会解析 URL，根据请求信息生成对应的 HTTP 请求报文。</span></p><p data-lake-id="ub7473988" id="ub7473988"><span data-lake-id="u30947117" id="u30947117" style="color: rgb(28, 31, 35)"> 2. DNS 解析 请求需要知晓服务器域名对应的 IP 地址才能通信，浏览器会检查本地缓存、操作系统缓存，甚至路由器缓存。如果未命中缓存，浏览器向配置的 DNS 服务器发送查询请求，DNS 服务器递归查询最终返回 IP 地址。</span></p><p data-lake-id="u86a9f9bd" id="u86a9f9bd"><span data-lake-id="u739f957e" id="u739f957e" style="color: rgb(28, 31, 35)"> 3. TCP 或者 UDP 接着浏览器会调用 Socket 库委托协议栈工作，根据指定的情况选择 TCP 或 UDP。 如果使用 TCP，需要通过三次握手建立连接。需要在数据发送前通过三次握手与服务端建立连接。 此时得到了封装了 HTTP 数据的 TCP 数据包。 </span></p><p data-lake-id="u753acd06" id="u753acd06"><span data-lake-id="ucebca141" id="ucebca141" style="color: rgb(28, 31, 35)">4).IP 在 TCP 数据包的基础上，再封装源地址 IP 和目标地址 IP 等信息，得到网络包。有了 IP 就能在多个网络节点中确定数据包的传输路径，最终能找到目标服务器。</span></p><p data-lake-id="uf7d8c360" id="uf7d8c360"><span data-lake-id="ue18e733f" id="ue18e733f" style="color: rgb(28, 31, 35)"> 5. MAC 得到网络包后，需要在 IP 头部的前面加上 MAC 头部，封装发送方 MAC 地址和接收方目标 MAC 地址。 MAC 用来确保子网内设备两点之间的通信寻址。（IP 是多个网络节点传输寻址） </span></p><p data-lake-id="u86967aa0" id="u86967aa0"><span data-lake-id="ubd178d2e" id="ubd178d2e" style="color: rgb(28, 31, 35)">6).网卡 这个时候，网络包还是存储在内存中的二进制数据，需要网卡把二进制数据转换为电信号，通过网线进行传输。 </span></p><p data-lake-id="udd172a0b" id="udd172a0b"><span data-lake-id="u7afb4f2b" id="u7afb4f2b" style="color: rgb(28, 31, 35)">7).交换机 通过网线会连到交换机，交换机是二层网络设备。工作在 MAC 层，它会根据数据包中的 MAC 头找到另一个设备连接在交换机的哪个端口，然后传输。 如果找不到对应的端口，则会向交换机上的所有端口(除了源端口)广播。 </span></p><p data-lake-id="ub21316b4" id="ub21316b4"><span data-lake-id="u54add0da" id="u54add0da" style="color: rgb(28, 31, 35)">8. 路由器 路由器也是进行转发，但它是三层网络设备，包含 IP 层。利用路由器，数据在不同网络节点之间转发，最后到达服务器。 </span></p><p data-lake-id="u73c0f462" id="u73c0f462"><span data-lake-id="u3535a515" id="u3535a515" style="color: rgb(28, 31, 35)">9).层层验证 服务器确认 MAC 地址匹配、IP 地址匹配，如果是 TCP 协议则看看序列号是否匹配，若匹配根据端口找到对应的监听进程，此时服务器上对应的应用就接收到数据了。 </span></p><p data-lake-id="u01d01ded" id="u01d01ded"><span data-lake-id="uad8ac492" id="uad8ac492" style="color: rgb(28, 31, 35)">10. 服务器处理 服务器接收到请求后，处理相应的业务逻辑，生成 HTTP 响应。这其间可能涉及到读取数据库、访问文件系统等。最终会生成响应给客户端（又是一层一层的封装 TCP、IP、MAC 等头部数据，得到最终传输的数据包），从网卡到交换机到路由器…… </span></p><p data-lake-id="u28a07cf6" id="u28a07cf6"><span data-lake-id="u643e4988" id="u643e4988" style="color: rgb(28, 31, 35)">11. 浏览器接收响应并渲染页面 经过多个路由器转发后，浏览器最终会接收到服务器返回的响应，进行页面渲染展示。 </span></p><p data-lake-id="ud39ccca1" id="ud39ccca1"><span data-lake-id="u3261a814" id="u3261a814" style="color: rgb(28, 31, 35)"> </span><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745242971971-bd28db1c-4550-4837-a41b-c7abe1c17cba.png%22%2C%22taskId%22%3A%22ubb139307-100f-41f0-81f5-44054e3dc30%22%2C%22clientId%22%3A%22u1b5a9ea4-ccfe-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A949.3333333333334%2C%22height%22%3A542%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A377288%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1424%2C%22originHeight%22%3A813%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%BB%E6%9C%BAB%20%E4%B8%BB%E6%9C%BAA%20%E4%BA%94%E5%B1%82%E7%BB%93%E6%9E%84%E6%A8%A1%E5%9E%8B%20TCP%2FIP%E5%9B%9B%E5%B1%82%E6%A8%A1%E5%9E%8B%20%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE%3A%20%E8%AF%B7%E6%B1%82%20HTTP%2C%20DNS%2C%20FTP%2C%20TELNET%2C%20DCHP%2C%20%E5%BA%94%E7%94%A8%E5%B1%82%20%E5%BA%94%E7%94%A8%E5%B1%82%20%E5%BA%94%E7%94%A8%E5%B1%82%20SMTP%2CPOP3%2CIMAP%2CSSH%20%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE%3ATCPUDP%20%E4%BC%A0%E8%BE%93%E5%B1%82%20%E4%BC%A0%E8%BE%93%E5%B1%82%20%E4%BC%A0%E8%BE%93%E5%B1%82%20%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE%3A%20%E7%BD%91%E7%BB%9C%E5%B1%82%20%E7%BD%91%E7%BB%9C%E5%B1%82%20%E7%BD%91%E7%BB%9C%E5%B1%82%20IP%2CARP%2CICMP%2CRIP%2CNAT%20%E8%A7%A3%E6%9E%90%E8%AF%B7%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%20%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E5%B1%82%20%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE%3AMAC%2CCSMA%2FCD%20%E7%89%A9%E7%90%86%E4%BB%8B%E8%B4%A8%20%E7%89%A9%E7%90%86%E5%B1%82%20%E7%89%A9%E7%90%86%E5%B1%82%20%E9%9D%A2%E8%AF%95%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1266%2C%22y%22%3A49%2C%22width%22%3A59%2C%22height%22%3A21%2C%22text%22%3A%22%E4%B8%BB%E6%9C%BAB%22%7D%2C%7B%22x%22%3A869%2C%22y%22%3A60%2C%22width%22%3A60%2C%22height%22%3A21%2C%22text%22%3A%22%E4%B8%BB%E6%9C%BAA%22%7D%2C%7B%22x%22%3A1001%2C%22y%22%3A109%2C%22width%22%3A200%2C%22height%22%3A36%2C%22text%22%3A%22%E4%BA%94%E5%B1%82%E7%BB%93%E6%9E%84%E6%A8%A1%E5%9E%8B%22%7D%2C%7B%22x%22%3A447%2C%22y%22%3A143%2C%22width%22%3A248%2C%22height%22%3A36%2C%22text%22%3A%22TCP%2FIP%E5%9B%9B%E5%B1%82%E6%A8%A1%E5%9E%8B%22%7D%2C%7B%22x%22%3A126%2C%22y%22%3A292%2C%22width%22%3A83%2C%22height%22%3A22%2C%22text%22%3A%22%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE%3A%22%7D%2C%7B%22x%22%3A994%2C%22y%22%3A292%2C%22width%22%3A42%2C%22height%22%3A22%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A5%2C%22y%22%3A324%2C%22width%22%3A318%2C%22height%22%3A24%2C%22text%22%3A%22HTTP%2C%20DNS%2C%20FTP%2C%20TELNET%2C%20DCHP%2C%22%7D%2C%7B%22x%22%3A523%2C%22y%22%3A328%2C%22width%22%3A99%2C%22height%22%3A36%2C%22text%22%3A%22%E5%BA%94%E7%94%A8%E5%B1%82%22%7D%2C%7B%22x%22%3A881%2C%22y%22%3A336%2C%22width%22%3A60%2C%22height%22%3A21%2C%22text%22%3A%22%E5%BA%94%E7%94%A8%E5%B1%82%22%7D%2C%7B%22x%22%3A1261%2C%22y%22%3A344%2C%22width%22%3A62%2C%22height%22%3A22%2C%22text%22%3A%22%E5%BA%94%E7%94%A8%E5%B1%82%22%7D%2C%7B%22x%22%3A43%2C%22y%22%3A358%2C%22width%22%3A251%2C%22height%22%3A21%2C%22text%22%3A%22SMTP%2CPOP3%2CIMAP%2CSSH%22%7D%2C%7B%22x%22%3A129%2C%22y%22%3A494%2C%22width%22%3A178%2C%22height%22%3A22%2C%22text%22%3A%22%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE%3ATCPUDP%22%7D%2C%7B%22x%22%3A533%2C%22y%22%3A505%2C%22width%22%3A78%2C%22height%22%3A28%2C%22text%22%3A%22%E4%BC%A0%E8%BE%93%E5%B1%82%22%7D%2C%7B%22x%22%3A880%2C%22y%22%3A508%2C%22width%22%3A62%2C%22height%22%3A20%2C%22text%22%3A%22%E4%BC%A0%E8%BE%93%E5%B1%82%22%7D%2C%7B%22x%22%3A1262%2C%22y%22%3A518%2C%22width%22%3A60%2C%22height%22%3A20%2C%22text%22%3A%22%E4%BC%A0%E8%BE%93%E5%B1%82%22%7D%2C%7B%22x%22%3A157%2C%22y%22%3A585%2C%22width%22%3A83%2C%22height%22%3A22%2C%22text%22%3A%22%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE%3A%22%7D%2C%7B%22x%22%3A534%2C%22y%22%3A592%2C%22width%22%3A77%2C%22height%22%3A28%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E5%B1%82%22%7D%2C%7B%22x%22%3A880%2C%22y%22%3A594%2C%22width%22%3A60%2C%22height%22%3A21%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E5%B1%82%22%7D%2C%7B%22x%22%3A1261%2C%22y%22%3A599%2C%22width%22%3A61%2C%22height%22%3A21%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E5%B1%82%22%7D%2C%7B%22x%22%3A71%2C%22y%22%3A619%2C%22width%22%3A254%2C%22height%22%3A23%2C%22text%22%3A%22IP%2CARP%2CICMP%2CRIP%2CNAT%22%7D%2C%7B%22x%22%3A1357%2C%22y%22%3A676%2C%22width%22%3A64%2C%22height%22%3A23%2C%22text%22%3A%22%E8%A7%A3%E6%9E%90%E8%AF%B7%22%7D%2C%7B%22x%22%3A861%2C%22y%22%3A681%2C%22width%22%3A100%2C%22height%22%3A22%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%22%7D%2C%7B%22x%22%3A1242%2C%22y%22%3A681%2C%22width%22%3A98%2C%22height%22%3A21%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%22%7D%2C%7B%22x%22%3A490%2C%22y%22%3A718%2C%22width%22%3A164%2C%22height%22%3A34%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E5%B1%82%22%7D%2C%7B%22x%22%3A97%2C%22y%22%3A730%2C%22width%22%3A241%2C%22height%22%3A23%2C%22text%22%3A%22%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE%3AMAC%2CCSMA%2FCD%22%7D%2C%7B%22x%22%3A1061%2C%22y%22%3A748%2C%22width%22%3A81%2C%22height%22%3A21%2C%22text%22%3A%22%E7%89%A9%E7%90%86%E4%BB%8B%E8%B4%A8%22%7D%2C%7B%22x%22%3A880%2C%22y%22%3A764%2C%22width%22%3A62%2C%22height%22%3A23%2C%22text%22%3A%22%E7%89%A9%E7%90%86%E5%B1%82%22%7D%2C%7B%22x%22%3A1261%2C%22y%22%3A764%2C%22width%22%3A61%2C%22height%22%3A22%2C%22text%22%3A%22%E7%89%A9%E7%90%86%E5%B1%82%22%7D%2C%7B%22x%22%3A1396%2C%22y%22%3A783%2C%22width%22%3A24%2C%22height%22%3A21%2C%22text%22%3A%22%E9%9D%A2%E8%AF%95%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23dccfb4%22%2C%22id%22%3A%22uc357ba20%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h2 data-lake-id="iLyn2" id="iLyn2" data-lake-index-type="0"><span data-lake-id="uee2802f8" id="uee2802f8" style="color: rgba(0, 0, 0, 0.88)">I/O模型有哪些？</span></h2><p data-lake-id="u609f0428" id="u609f0428"><span data-lake-id="u08030e84" id="u08030e84">常见的I/O模型有以下几种：</span></p><ul list="u5248f5ef"><li fid="u8262be60" data-lake-id="u0d430bd9" id="u0d430bd9"><span data-lake-id="u9a1fdbb9" id="u9a1fdbb9">阻塞I/O（Blocking I/O）：调用I/O操作时，进程会被阻塞，直到数据准备好或操作完成后才继续执行。</span></li><li fid="u8262be60" data-lake-id="u7226a812" id="u7226a812"><span data-lake-id="ub5191fbf" id="ub5191fbf">非阻塞I/O（Non - blocking I/O）：I/O操作不会阻塞进程，如果数据没有准备好，立即返回错误或状态，进程可以继续执行其他操作。 </span></li><li fid="u8262be60" data-lake-id="uec9a1e94" id="uec9a1e94"><span data-lake-id="u39a49dee" id="u39a49dee">I/O多路复用（I/O Multiplexing）：使用select、poll、epoll等系统调用，允许程序同时等待多个I/O操作，当其中任意一个就绪时进行处理。 </span></li><li fid="u8262be60" data-lake-id="u3db4269b" id="u3db4269b"><span data-lake-id="u623cb9a7" id="u623cb9a7">信号驱动I/O（Signal - driven I/O）：在数据准备好时，内核通过信号通知进程进行I/O操作，进程在接收到信号后再进行数据读取或写入。 </span></li><li fid="u8262be60" data-lake-id="u22ad249b" id="u22ad249b"><span data-lake-id="ucc0c543b" id="ucc0c543b">异步I/O（Asynchronous I/O）：发起I/O请求后立即返回，内核在后台完成I/O操作，并在操作完成时通知进程。进程不需要等待I/O完成即可继续执行其他任务。</span></li></ul><p data-lake-id="uf254dc37" id="uf254dc37"><span data-lake-id="u195400a4" id="u195400a4">阻塞的执行单元解释：如果是单线程的程序用进程来描述合适一些，即称之为进程会被阻塞。如果多线程的程序用线程合适一些，即称之为线程会被阻塞</span></p><h3 data-lake-id="usf0z" id="usf0z"><strong><span data-lake-id="u0dbd80af" id="u0dbd80af">同步阻塞I/O</span></strong></h3><p data-lake-id="ubd2c4269" id="ubd2c4269"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745417856470-4d85cc57-7ccd-4790-b2fe-d4547bf7e51c.png%22%2C%22taskId%22%3A%22u439a22a2-13f7-462d-89ea-825a57368e8%22%2C%22clientId%22%3A%22udc942070-9eea-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A516.6666666666666%2C%22height%22%3A297%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A286580%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A775%2C%22originHeight%22%3A445%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%20%E4%B8%80%E7%9B%B4%E8%A2%AB%E9%98%BB%E5%A1%9E%20%E6%88%91%E8%A6%81%E6%8B%BF%E6%95%B0%E6%8D%AE%20READ%20%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%20READ%20%E5%86%85%E6%A0%B8%20%E7%AD%89%E5%BE%85%E7%BD%91%E5%8D%A1%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%20%E6%8B%B7%E8%B4%9D%E5%88%B0%E5%86%85%E6%A0%B8%20%E6%97%B6%E9%97%B4%E7%BA%BF%20ROIARISHIVA%20CO%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A110%2C%22y%22%3A60%2C%22width%22%3A97%2C%22height%22%3A24%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%22%7D%2C%7B%22x%22%3A304%2C%22y%22%3A72%2C%22width%22%3A122%2C%22height%22%3A25%2C%22text%22%3A%22%E4%B8%80%E7%9B%B4%E8%A2%AB%E9%98%BB%E5%A1%9E%22%7D%2C%7B%22x%22%3A181%2C%22y%22%3A179%2C%22width%22%3A122%2C%22height%22%3A26%2C%22text%22%3A%22%E6%88%91%E8%A6%81%E6%8B%BF%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A104%2C%22y%22%3A185%2C%22width%22%3A49%2C%22height%22%3A17%2C%22text%22%3A%22READ%22%7D%2C%7B%22x%22%3A606%2C%22y%22%3A190%2C%22width%22%3A170%2C%22height%22%3A28%2C%22text%22%3A%22%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%22%7D%2C%7B%22x%22%3A517%2C%22y%22%3A193%2C%22width%22%3A51%2C%22height%22%3A19%2C%22text%22%3A%22READ%22%7D%2C%7B%22x%22%3A53%2C%22y%22%3A284%2C%22width%22%3A52%2C%22height%22%3A26%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A126%2C%22y%22%3A305%2C%22width%22%3A198%2C%22height%22%3A34%2C%22text%22%3A%22%E7%AD%89%E5%BE%85%E7%BD%91%E5%8D%A1%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%22%7D%2C%7B%22x%22%3A451%2C%22y%22%3A310%2C%22width%22%3A128%2C%22height%22%3A28%2C%22text%22%3A%22%E6%8B%B7%E8%B4%9D%E5%88%B0%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A347%2C%22y%22%3A423%2C%22width%22%3A76%2C%22height%22%3A23%2C%22text%22%3A%22%E6%97%B6%E9%97%B4%E7%BA%BF%22%7D%2C%7B%22x%22%3A590%2C%22y%22%3A425%2C%22width%22%3A187%2C%22height%22%3A23%2C%22text%22%3A%22ROIARISHIVA%20CO%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e4e5d4%22%2C%22id%22%3A%22uf112409d%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u90606448" id="u90606448"><span data-lake-id="u26592073" id="u26592073" style="color: rgb(28, 31, 35)">当用户程序的线程调用read获取网络数据的时候，首先这个数据得有，也就是网卡得先收到客户端的数据，然后这个数据有了之后需要拷贝到内核中，然后再被拷贝到用户空间内，这整一个过程用户线程都是被阻塞的。 假设没有客户端发数据过来，那么这个用户线程就会一直阻塞等着，直到有数据。即使有数据，那么两次拷贝的过程也得阻塞等着。 所以这称为同步阻塞I/O模型。 它的优点很明显，简单。调用read之后就不管了，直到数据来了且准备好了进行处理即可。 缺点也很明显，一个线程对应一个连接，一直被霸占着，即使网卡没有数据到来，也同步阻塞等着。 我们都知道线程是属于比较重资源，这就有点浪费了。 所以我们不想让它这样傻等着。 于是就有了同步非阻塞I/O。 </span></p><h3 data-lake-id="mxdTC" id="mxdTC"><span data-lake-id="u2a6af0de" id="u2a6af0de" style="color: rgb(28, 31, 35)">同步阻塞I/O</span></h3><p data-lake-id="ud4657398" id="ud4657398"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745417962671-0fe823d6-9aca-4afc-8742-98d118c0cc2c.png%22%2C%22taskId%22%3A%22u6a489977-a8da-4d5e-b7c6-8257e5d7603%22%2C%22clientId%22%3A%22udc942070-9eea-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A580%2C%22height%22%3A285%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A320829%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A870%2C%22originHeight%22%3A427%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%20%E8%A2%AB%E9%98%BB%E5%A1%9E%20%E4%B8%8D%E9%98%BB%E5%A1%9E%20READ%20READ%20READ%20%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%20%E6%B2%A1%E6%95%B0%E6%8D%AE%20%E6%B2%A1%E6%95%B0%E6%8D%AE%20%E5%86%85%E6%A0%B8%20%E7%AD%89%E5%BE%85%E7%BD%91%E5%8D%A1%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%20%E6%8B%B7%E8%B4%9D%E5%88%B0%E5%86%85%E6%A0%B8%20%E9%9D%A2%E8%AF%95%20%E6%97%B6%E9%97%B4%E7%BA%BF%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A150%2C%22y%22%3A41%2C%22width%22%3A100%2C%22height%22%3A26%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%22%7D%2C%7B%22x%22%3A617%2C%22y%22%3A57%2C%22width%22%3A74%2C%22height%22%3A25%2C%22text%22%3A%22%E8%A2%AB%E9%98%BB%E5%A1%9E%22%7D%2C%7B%22x%22%3A338%2C%22y%22%3A60%2C%22width%22%3A76%2C%22height%22%3A25%2C%22text%22%3A%22%E4%B8%8D%E9%98%BB%E5%A1%9E%22%7D%2C%7B%22x%22%3A309%2C%22y%22%3A138%2C%22width%22%3A54%2C%22height%22%3A20%2C%22text%22%3A%22READ%22%7D%2C%7B%22x%22%3A139%2C%22y%22%3A139%2C%22width%22%3A51%2C%22height%22%3A18%2C%22text%22%3A%22READ%22%7D%2C%7B%22x%22%3A561%2C%22y%22%3A146%2C%22width%22%3A51%2C%22height%22%3A18%2C%22text%22%3A%22READ%22%7D%2C%7B%22x%22%3A699%2C%22y%22%3A176%2C%22width%22%3A169%2C%22height%22%3A26%2C%22text%22%3A%22%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%22%7D%2C%7B%22x%22%3A233%2C%22y%22%3A207%2C%22width%22%3A75%2C%22height%22%3A26%2C%22text%22%3A%22%E6%B2%A1%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A402%2C%22y%22%3A209%2C%22width%22%3A77%2C%22height%22%3A26%2C%22text%22%3A%22%E6%B2%A1%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A84%2C%22y%22%3A258%2C%22width%22%3A50%2C%22height%22%3A25%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A162%2C%22y%22%3A288%2C%22width%22%3A194%2C%22height%22%3A27%2C%22text%22%3A%22%E7%AD%89%E5%BE%85%E7%BD%91%E5%8D%A1%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%22%7D%2C%7B%22x%22%3A491%2C%22y%22%3A288%2C%22width%22%3A125%2C%22height%22%3A25%2C%22text%22%3A%22%E6%8B%B7%E8%B4%9D%E5%88%B0%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A758%2C%22y%22%3A373%2C%22width%22%3A113%2C%22height%22%3A35%2C%22text%22%3A%22%E9%9D%A2%E8%AF%95%22%7D%2C%7B%22x%22%3A381%2C%22y%22%3A401%2C%22width%22%3A75%2C%22height%22%3A24%2C%22text%22%3A%22%E6%97%B6%E9%97%B4%E7%BA%BF%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e7e7d9%22%2C%22id%22%3A%22u31a2d146%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ucfae02d6" id="ucfae02d6"><span data-lake-id="u4f629c24" id="u4f629c24" style="color: rgb(28, 31, 35)">​</span><br></p><p data-lake-id="u0d68e188" id="u0d68e188"><span data-lake-id="uec8185d3" id="uec8185d3" style="color: rgb(28, 31, 35)">从图中我们可以很清晰的看到，同步非阻塞I/O 基于同步阻塞I/O 进行了优化： 在没数据的时候可以不再傻傻地阻塞等着，而是直接返回错误，告知暂无准备就绪的数据！ 这里要注意，从内核拷贝到用户空间这一步，用户线程还是会被阻塞的。 这个模型相比于同步阻塞I/O 而言比较灵活，比如调用read如果暂无数据，则线程可以先去干干别的事情，然后再来继续调用read看看有没有数据。 但是如果你的线程就是取数据然后处理数据，不干别的逻辑，那这个模型又有点问题了。 等于你不断地进行系统调用，如果你的服务器需要处理海量的连接，那么就需要有海量的线程不断调用，上下文切换频繁，CPU 也会忙死，做无用功而忙死。 那怎么办？ 于是就有了I/O 多路复用 </span></p><h3 data-lake-id="GbXfz" id="GbXfz"><span data-lake-id="u7acafbee" id="u7acafbee" style="color: rgb(28, 31, 35)">I/O 多路复用 </span></h3><p data-lake-id="u95074437" id="u95074437"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745418011737-5f21639f-6a3b-465c-b38e-4596cda29c7f.png%22%2C%22taskId%22%3A%22uc6f04267-2a18-4cdd-9055-0c3065d7ebd%22%2C%22clientId%22%3A%22udc942070-9eea-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A554%2C%22height%22%3A282%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A321921%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A831%2C%22originHeight%22%3A423%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%20%E8%A2%AB%E9%98%BB%E5%A1%9E%20%E4%B8%8D%E9%98%BB%E5%A1%9E%20SELECT%20SELECT%20READ%20%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%20%E6%B2%A1%E6%95%B0%E6%8D%AE%20%E6%B2%A1%E6%95%B0%E6%8D%AE%20%E5%86%85%E6%A0%B8%20%E7%AD%89%E5%BE%85%E7%BD%91%E5%8D%A1%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%20%E6%8B%B7%E8%B4%9D%E5%88%B0%E5%86%85%E6%A0%B8%20%E6%97%B6%E9%97%B4%E7%BA%BF%20ROIAROCOIVS%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A114%2C%22y%22%3A43%2C%22width%22%3A97%2C%22height%22%3A26%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%22%7D%2C%7B%22x%22%3A567%2C%22y%22%3A56%2C%22width%22%3A76%2C%22height%22%3A27%2C%22text%22%3A%22%E8%A2%AB%E9%98%BB%E5%A1%9E%22%7D%2C%7B%22x%22%3A289%2C%22y%22%3A59%2C%22width%22%3A74%2C%22height%22%3A24%2C%22text%22%3A%22%E4%B8%8D%E9%98%BB%E5%A1%9E%22%7D%2C%7B%22x%22%3A83%2C%22y%22%3A136%2C%22width%22%3A66%2C%22height%22%3A20%2C%22text%22%3A%22SELECT%22%7D%2C%7B%22x%22%3A255%2C%22y%22%3A136%2C%22width%22%3A66%2C%22height%22%3A20%2C%22text%22%3A%22SELECT%22%7D%2C%7B%22x%22%3A510%2C%22y%22%3A143%2C%22width%22%3A51%2C%22height%22%3A20%2C%22text%22%3A%22READ%22%7D%2C%7B%22x%22%3A649%2C%22y%22%3A172%2C%22width%22%3A172%2C%22height%22%3A32%2C%22text%22%3A%22%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%22%7D%2C%7B%22x%22%3A184%2C%22y%22%3A206%2C%22width%22%3A76%2C%22height%22%3A27%2C%22text%22%3A%22%E6%B2%A1%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A353%2C%22y%22%3A209%2C%22width%22%3A78%2C%22height%22%3A27%2C%22text%22%3A%22%E6%B2%A1%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A50%2C%22y%22%3A258%2C%22width%22%3A50%2C%22height%22%3A26%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A113%2C%22y%22%3A287%2C%22width%22%3A193%2C%22height%22%3A29%2C%22text%22%3A%22%E7%AD%89%E5%BE%85%E7%BD%91%E5%8D%A1%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%22%7D%2C%7B%22x%22%3A442%2C%22y%22%3A288%2C%22width%22%3A124%2C%22height%22%3A25%2C%22text%22%3A%22%E6%8B%B7%E8%B4%9D%E5%88%B0%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A331%2C%22y%22%3A401%2C%22width%22%3A77%2C%22height%22%3A24%2C%22text%22%3A%22%E6%97%B6%E9%97%B4%E7%BA%BF%22%7D%2C%7B%22x%22%3A652%2C%22y%22%3A410%2C%22width%22%3A129%2C%22height%22%3A17%2C%22text%22%3A%22ROIAROCOIVS%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e7e9d9%22%2C%22id%22%3A%22u08c70081%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u17a54abf" id="u17a54abf"><span data-lake-id="u323b4903" id="u323b4903" style="color: rgb(28, 31, 35)">从图上来看，好像和上面的同步非阻塞I/O差不多啊，其实不太一样，线程模型不一样。 既同步非阻塞I/O在太多的连接下频繁调用太浪费了，那就招个专员吧。 这个专员工作就是管理多个连接，帮忙查看连接上是否有数据已准备就绪。 也就是说，可以只用一个线程查看多个连接是否有数据已准备就绪。 具体到代码上，这个专员就是select，我们可以往select注册需要被监听的连接，由select来监控它所管理的连接是否有数据已就绪，如果有则可以通知别的线程来read读取数据，这个read和之前的一样，还是会阻塞用户线程。 这样一来就可以用少量的线程去监控多条连接，减少了线程的数量，降低了内存的消耗且减少了上下文切换的次数，很舒服。 想必到此你已经理解了什么叫I/O多路复用。 所谓的多路指的是多条连接，复用指的是用一个线程就可以监控这么多条连接。 看到这，你再想想，还有什么地方可以优化的？ </span></p><h3 data-lake-id="OyPpU" id="OyPpU"><span data-lake-id="ue52fb6d2" id="ue52fb6d2" style="color: rgb(28, 31, 35)">信号驱动I/O</span></h3><p data-lake-id="u4401b0aa" id="u4401b0aa"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745418065994-ee0d3e5d-9f0c-4332-b43a-8545f31133bd.png%22%2C%22taskId%22%3A%22ue462c50d-3dc5-43ba-8d65-5573e19692f%22%2C%22clientId%22%3A%22udc942070-9eea-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A542%2C%22height%22%3A286%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A330901%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A813%2C%22originHeight%22%3A429%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%20%E8%A2%AB%E9%98%BB%E5%A1%9E%20%E4%B8%8D%E9%98%BB%E5%A1%9E%20SIGACTION%20SIGIO%2C%20READ%20%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%20%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%20%E9%80%9A%E7%9F%A5%E6%95%B0%20%E6%8D%AE%E6%9D%A5%E4%BA%86%20%E5%86%85%E6%A0%B8%20%E7%AD%89%E5%BE%85%E7%BD%91%E5%8D%A1%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%20%E6%8B%B7%E8%B4%9D%E5%88%B0%E5%86%85%E6%A0%B8%20%E9%9D%A2%E8%AF%95%E8%81%98%20MIANSHIYA.COM%20%E6%97%B6%E9%97%B4%E7%BA%BF%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A78%2C%22y%22%3A47%2C%22width%22%3A98%2C%22height%22%3A25%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%22%7D%2C%7B%22x%22%3A555%2C%22y%22%3A59%2C%22width%22%3A75%2C%22height%22%3A27%2C%22text%22%3A%22%E8%A2%AB%E9%98%BB%E5%A1%9E%22%7D%2C%7B%22x%22%3A264%2C%22y%22%3A62%2C%22width%22%3A74%2C%22height%22%3A25%2C%22text%22%3A%22%E4%B8%8D%E9%98%BB%E5%A1%9E%22%7D%2C%7B%22x%22%3A29%2C%22y%22%3A136%2C%22width%22%3A97%2C%22height%22%3A25%2C%22text%22%3A%22SIGACTION%22%7D%2C%7B%22x%22%3A461%2C%22y%22%3A148%2C%22width%22%3A57%2C%22height%22%3A22%2C%22text%22%3A%22SIGIO%2C%22%7D%2C%7B%22x%22%3A562%2C%22y%22%3A153%2C%22width%22%3A48%2C%22height%22%3A17%2C%22text%22%3A%22READ%22%7D%2C%7B%22x%22%3A642%2C%22y%22%3A167%2C%22width%22%3A169%2C%22height%22%3A25%2C%22text%22%3A%22%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%22%7D%2C%7B%22x%22%3A166%2C%22y%22%3A168%2C%22width%22%3A102%2C%22height%22%3A29%2C%22text%22%3A%22%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%22%7D%2C%7B%22x%22%3A461%2C%22y%22%3A173%2C%22width%22%3A74%2C%22height%22%3A27%2C%22text%22%3A%22%E9%80%9A%E7%9F%A5%E6%95%B0%22%7D%2C%7B%22x%22%3A460%2C%22y%22%3A202%2C%22width%22%3A73%2C%22height%22%3A25%2C%22text%22%3A%22%E6%8D%AE%E6%9D%A5%E4%BA%86%22%7D%2C%7B%22x%22%3A26%2C%22y%22%3A264%2C%22width%22%3A51%2C%22height%22%3A26%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A87%2C%22y%22%3A288%2C%22width%22%3A196%2C%22height%22%3A31%2C%22text%22%3A%22%E7%AD%89%E5%BE%85%E7%BD%91%E5%8D%A1%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%22%7D%2C%7B%22x%22%3A417%2C%22y%22%3A291%2C%22width%22%3A126%2C%22height%22%3A27%2C%22text%22%3A%22%E6%8B%B7%E8%B4%9D%E5%88%B0%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A732%2C%22y%22%3A353%2C%22width%22%3A80%2C%22height%22%3A32%2C%22text%22%3A%22%E9%9D%A2%E8%AF%95%E8%81%98%22%7D%2C%7B%22x%22%3A610%2C%22y%22%3A390%2C%22width%22%3A203%2C%22height%22%3A32%2C%22text%22%3A%22MIANSHIYA.COM%22%7D%2C%7B%22x%22%3A306%2C%22y%22%3A403%2C%22width%22%3A77%2C%22height%22%3A25%2C%22text%22%3A%22%E6%97%B6%E9%97%B4%E7%BA%BF%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e7e8da%22%2C%22id%22%3A%22u3665ea3a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uee36a00a" id="uee36a00a"><span data-lake-id="u0ef1a647" id="u0ef1a647" style="color: rgb(28, 31, 35)">上面的select虽然不阻塞了，但是他得时刻去查询看看是否有数据已经准备就绪，那是不是可以让内核告诉我们数据到了而不是我们去轮询呢？ 信号驱动I/O就能实现这个功能，由内核告知数据已准备就绪，然后用户线程再去read（还是会阻塞）。 听起来是不是比I/O多路复用好呀？那为什么好像很少听到信号驱动I/O？ 为什么市面上用的都是I/O多路复用而不是信号驱动？ 因为我们的应用通常用的都是TCP协议，而TCP协议的socket可以产生信号事件有七种。 也就是说不仅仅只有数据准备就绪才会发信号，其他事件也会发信号，而这个信号又是同一个信号，所以我们的应用程序无从区分到底是什么事件产生的这个信号。 那就麻了呀！ 所以我们的应用基本上用不了信号驱动I/O，但如果你的应用程序用的是UDP协议，那是可以的，因为UDP没这么多事件。 因此，这么一看对我们而言信号驱动I/O也不太行。 </span></p><h3 data-lake-id="SsBBG" id="SsBBG"><span data-lake-id="u6cce1c18" id="u6cce1c18" style="color: rgb(28, 31, 35)">异步I/O</span></h3><p data-lake-id="u139a9d62" id="u139a9d62"><span data-lake-id="u14908386" id="u14908386" style="color: rgb(28, 31, 35)">信号驱动I/O虽然对TCP不太友好，但是这个思路对的：往异步发展，但是它并没有完全异步，因为其后面那段read还是会阻塞用户线程，所以它算是半异步。</span></p><p data-lake-id="u975dbf05" id="u975dbf05"><span data-lake-id="u82e88e6f" id="u82e88e6f" style="color: rgb(28, 31, 35)">因此，我们得想下如何弄成全异步的，也就是把read那步阻塞也省了。</span></p><p data-lake-id="u379ae03c" id="u379ae03c"><span data-lake-id="u86d661d1" id="u86d661d1" style="color: rgb(28, 31, 35)">其实思路很清晰：让内核直接把数据拷贝到用户空间之后再告知用户线程，来实现真正的非阻塞I/O！</span></p><p data-lake-id="uf23da84a" id="uf23da84a"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2025%2Fpng%2F32795398%2F1745418213476-c59ffa47-152d-460a-ae84-7195f344432f.png%22%2C%22taskId%22%3A%22u50b99900-6165-40eb-8421-8c3eef335d7%22%2C%22clientId%22%3A%22udc942070-9eea-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A698.6666666666666%2C%22height%22%3A295%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A399822%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1048%2C%22originHeight%22%3A442%2C%22ratio%22%3A1.5%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%89%A7%E8%A1%8C%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%2C%20%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%20%E5%85%A8%E7%A8%8B%E4%B8%8D%E9%98%BB%E5%A1%9E%20%E5%8D%B3%E5%9B%9E%E8%B0%83%20AIO%20READ%20%E9%80%92%E4%BA%A4%E5%88%B0AIO_READ%20%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%20%E6%8C%87%E5%AE%9A%E7%9A%84%E4%BF%A1%E5%8F%B7%20%E5%86%85%E6%A0%B8%20%E7%AD%89%E5%BE%85%E7%BD%91%E5%8D%A1%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%20%E6%8B%B7%E8%B4%9D%E5%88%B0%E5%86%85%E6%A0%B8%20%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%20%E4%B8%8D%20%E6%97%B6%E9%97%B4%E7%BA%BF%20%E9%9D%A2%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A730%2C%22y%22%3A20%2C%22width%22%3A205%2C%22height%22%3A26%2C%22text%22%3A%22%E6%89%A7%E8%A1%8C%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%2C%22%7D%2C%7B%22x%22%3A89%2C%22y%22%3A26%2C%22width%22%3A97%2C%22height%22%3A25%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%22%7D%2C%7B%22x%22%3A436%2C%22y%22%3A40%2C%22width%22%3A124%2C%22height%22%3A30%2C%22text%22%3A%22%E5%85%A8%E7%A8%8B%E4%B8%8D%E9%98%BB%E5%A1%9E%22%7D%2C%7B%22x%22%3A804%2C%22y%22%3A49%2C%22width%22%3A75%2C%22height%22%3A25%2C%22text%22%3A%22%E5%8D%B3%E5%9B%9E%E8%B0%83%22%7D%2C%7B%22x%22%3A46%2C%22y%22%3A114%2C%22width%22%3A97%2C%22height%22%3A20%2C%22text%22%3A%22AIO%20READ%22%7D%2C%7B%22x%22%3A872%2C%22y%22%3A143%2C%22width%22%3A172%2C%22height%22%3A27%2C%22text%22%3A%22%E9%80%92%E4%BA%A4%E5%88%B0AIO_READ%22%7D%2C%7B%22x%22%3A175%2C%22y%22%3A148%2C%22width%22%3A98%2C%22height%22%3A28%2C%22text%22%3A%22%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%22%7D%2C%7B%22x%22%3A894%2C%22y%22%3A172%2C%22width%22%3A127%2C%22height%22%3A27%2C%22text%22%3A%22%E6%8C%87%E5%AE%9A%E7%9A%84%E4%BF%A1%E5%8F%B7%22%7D%2C%7B%22x%22%3A35%2C%22y%22%3A242%2C%22width%22%3A50%2C%22height%22%3A25%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A105%2C%22y%22%3A267%2C%22width%22%3A195%2C%22height%22%3A28%2C%22text%22%3A%22%E7%AD%89%E5%BE%85%E7%BD%91%E5%8D%A1%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%22%7D%2C%7B%22x%22%3A436%2C%22y%22%3A269%2C%22width%22%3A123%2C%22height%22%3A25%2C%22text%22%3A%22%E6%8B%B7%E8%B4%9D%E5%88%B0%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A661%2C%22y%22%3A269%2C%22width%22%3A174%2C%22height%22%3A26%2C%22text%22%3A%22%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%22%7D%2C%7B%22x%22%3A991%2C%22y%22%3A347%2C%22width%22%3A43%2C%22height%22%3A61%2C%22text%22%3A%22%E4%B8%8D%22%7D%2C%7B%22x%22%3A471%2C%22y%22%3A393%2C%22width%22%3A74%2C%22height%22%3A25%2C%22text%22%3A%22%E6%97%B6%E9%97%B4%E7%BA%BF%22%7D%2C%7B%22x%22%3A1004%2C%22y%22%3A396%2C%22width%22%3A37%2C%22height%22%3A42%2C%22text%22%3A%22%E9%9D%A2%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e4e4d1%22%2C%22id%22%3A%22u95f03334%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="udd629c7d" id="udd629c7d"><span data-lake-id="u8895422f" id="u8895422f" style="color: rgb(28, 31, 35)">所以异步I/O其实就是用户线程调用aio_read，然后包括将数据从内核拷贝到用户空间那步，所有操作都由内核完成，当内核操作完毕之后，再调用之前设置的回调，此时用户线程就拿着已经拷贝到用户控件的数据可以继续执行后续操作。 在整个过程中，用户线程没有任何阻塞点，这才是真正的非阻塞I/O。 </span></p><h2 data-lake-id="XfLaT" id="XfLaT" data-lake-index-type="0"><span data-lake-id="u82bb1c59" id="u82bb1c59" style="color: rgba(0, 0, 0, 0.88)">Select、Poll、Epoll 之间有什么区别？</span></h2><p data-lake-id="u08ccff0b" id="u08ccff0b"><span data-lake-id="uc71b5892" id="uc71b5892">它们都是操作系统中用于多路复用I/O的机制：</span></p><h3 data-lake-id="xqd7D" id="xqd7D" data-lake-index-type="0"><span data-lake-id="u94bcdf40" id="u94bcdf40">select：</span></h3><ul list="uf6b88bc6"><li fid="ub16677b8" data-lake-id="uabcf6da8" id="uabcf6da8"><span data-lake-id="uca7c007f" id="uca7c007f">早期的I/O多路复用机制，使用固定长度的数组表示文件描述符集。每次调用select时都需要重新构建和检查文件描述符集。</span></li><li fid="ub16677b8" data-lake-id="ue6669724" id="ue6669724"><span data-lake-id="u488412b9" id="u488412b9">支持的文件描述符数量有限（通常为1024），在大规模连接的场景下效率较低。</span></li></ul><h3 data-lake-id="C2c7V" id="C2c7V" data-lake-index-type="0"><span data-lake-id="u71390a66" id="u71390a66">poll：</span></h3><ul list="u7df7e303"><li fid="ua5b27f74" data-lake-id="u91eb0861" id="u91eb0861"><span data-lake-id="u683a217f" id="u683a217f">poll与select类似，但使用动态数组来存储文件描述符，因此没有select的最大连接数限制。 </span></li><li fid="ua5b27f74" data-lake-id="ua6a2976f" id="ua6a2976f"><span data-lake-id="ud58d0a7d" id="ud58d0a7d">每次调用时仍需遍历全部描述符，在处理大量连接时效率不高。</span></li></ul><h3 data-lake-id="oiGZL" id="oiGZL" data-lake-index-type="0"><span data-lake-id="u18b68edd" id="u18b68edd">epoll：</span></h3><ul list="u8f8c35b1"><li fid="u93608708" data-lake-id="u349c3eec" id="u349c3eec"><span data-lake-id="ud1d7b061" id="ud1d7b061">epoll是Linux系统对select和poll的优化，提供了边缘触发（ET）和水平触发（LT）模式。 </span></li><li fid="u93608708" data-lake-id="u5face1ba" id="u5face1ba"><span data-lake-id="uc7837043" id="uc7837043">不会遍历所有文件描述符，而是通过事件通知的方式，只处理实际发生变化的描述符，适合高并发服务器。 </span></li><li fid="u93608708" data-lake-id="u294dbedb" id="u294dbedb"><span data-lake-id="ud797e095" id="ud797e095">epoll在注册文件描述符后，只需调用一次添加操作，后续的事件管理更高效。</span></li></ul><h3 data-lake-id="tpcap" id="tpcap" data-lake-index-type="0"><span data-lake-id="ud07a3ba4" id="ud07a3ba4">扩展知识</span></h3><h4 data-lake-id="QFdqt" id="QFdqt" data-lake-index-type="0"><span data-lake-id="uc6ec6e97" id="uc6ec6e97">select</span></h4><p data-lake-id="u544bb73e" id="u544bb73e"><span data-lake-id="u131deeb3" id="u131deeb3">select函数使用一个固定大小的位图来表示文件描述符集，通过将文件描述符的状态（如可读、可写）存储在一个数组中，调用select时检查这些描述符的状态。<br />每次调用select时，程序需要重新构建位图，并将所有文件描述符集传递给内核检查状态，判断是否有I/O操作就绪。<br /></span><strong><span data-lake-id="u626a4431" id="u626a4431">局限</span></strong><span data-lake-id="uf8d55789" id="uf8d55789">：</span></p><ul list="u07f526da"><li fid="u51abf791" data-lake-id="ue1914477" id="ue1914477"><span data-lake-id="ueeee0e6e" id="ueeee0e6e">文件描述符限制：通常为1024（可以通过修改系统参数调整），限制了并发处理的数量。</span></li><li fid="u51abf791" data-lake-id="u8f074cd4" id="u8f074cd4"><span data-lake-id="ue5fb5b79" id="ue5fb5b79">性能低：在高并发场景中，每次都需要遍历整个文件描述符集进行检查，性能开销大。</span></li><li fid="u51abf791" data-lake-id="u67a3bcac" id="u67a3bcac"><span data-lake-id="u2c494aa9" id="u2c494aa9">不适合高并发场景：随着连接数的增加，select的效率会急剧下降，因为每次调用都需要线性扫描整个文件描述符集。</span></li></ul><h4 data-lake-id="COOij" id="COOij" data-lake-index-type="0"><span data-lake-id="u2fa4642e" id="u2fa4642e">poll</span></h4><p data-lake-id="u7df41093" id="u7df41093"><span data-lake-id="u4756fa3a" id="u4756fa3a">poll使用一个动态数组来管理文件描述符，能够支持更多的连接数。每个文件描述符有一个对应的结构体（pollfd），包含文件描述符和事件类型。<br />调用poll时，程序传入的描述符数组会被内核修改，以反映当前文件描述符的状态。<br /></span><strong><span data-lake-id="uc067abfc" id="uc067abfc">改进</span></strong><span data-lake-id="u91a45be9" id="u91a45be9">：</span></p><ul list="u8d64d350"><li fid="u06671710" data-lake-id="u5c576a34" id="u5c576a34"><span data-lake-id="u5f251a27" id="u5f251a27">打破文件描述符数量限制：poll不再依赖于固定大小的位图，可以支持任意数量的文件描述符。</span></li><li fid="u06671710" data-lake-id="u9e8c40a1" id="u9e8c40a1"><span data-lake-id="ud4661005" id="ud4661005">接口更灵活：比select更灵活，适合大部分网络应用场景。<br /></span><strong><span data-lake-id="u3528ac8f" id="u3528ac8f">不足</span></strong><span data-lake-id="uf39954f6" id="uf39954f6">：</span></li><li fid="u06671710" data-lake-id="u15094f01" id="u15094f01"><span data-lake-id="u29358443" id="u29358443">每次调用时仍需遍历所有描述符：即使只有少数描述符发生变化，也需要检查整个数组。</span></li><li fid="u06671710" data-lake-id="u14e3b1ac" id="u14e3b1ac"><span data-lake-id="uf02c4674" id="uf02c4674">性能开销较大：在大规模并发场景下，性能问题依然存在。</span></li></ul><h4 data-lake-id="dwovi" id="dwovi" data-lake-index-type="0"><span data-lake-id="uc46f01ff" id="uc46f01ff">epoll</span></h4><p data-lake-id="uc3bab5b7" id="uc3bab5b7"><span data-lake-id="ucb462146" id="ucb462146">epoll使用一个内核空间的事件列表，应用程序可以通过epoll_ctl向epoll实例注册、修改或删除感兴趣的文件描述符及其事件。<br />调用epoll_wait时，只会返回发生事件的文件描述符，而不是检查所有描述符。</span></p><h3 data-lake-id="puqOZ" id="puqOZ" data-lake-index-type="0"><span data-lake-id="u7d518408" id="u7d518408">优势：</span></h3><ol list="u99d02062"><li fid="u882a47ba" data-lake-id="u696d391a" id="u696d391a"><strong><span data-lake-id="u7b3e5628" id="u7b3e5628">事件驱动模型</span></strong><span data-lake-id="u135d155d" id="u135d155d">：epoll基于事件驱动，不再像select和poll那样需要线性扫描所有描述符。只有当注册的事件发生时，epoll才会通知应用程序。</span></li><li fid="u882a47ba" data-lake-id="uc3270172" id="uc3270172"><strong><span data-lake-id="u2c03a6c2" id="u2c03a6c2">边缘触发与水平触发</span></strong><span data-lake-id="ud66fbad1" id="ud66fbad1">：</span></li></ol><ul list="u99d02062" data-lake-indent="1"><li fid="u36e4a708" data-lake-id="ucc428b13" id="ucc428b13"><strong><span data-lake-id="u110bf74e" id="u110bf74e">水平触发（LT, Level Triggered）</span></strong><span data-lake-id="ub2f169ad" id="ub2f169ad">：是默认模式，类似于select / poll的工作方式，只要文件描述符上有未处理的数据，每次调用epoll_wait都会返回该文件描述符。</span></li><li fid="u36e4a708" data-lake-id="u0203ec76" id="u0203ec76"><strong><span data-lake-id="u672bee73" id="u672bee73">边缘触发（ET, Edge Triggered）</span></strong><span data-lake-id="u9e665b97" id="u9e665b97">：仅在状态发生变化时通知一次，需要用户在事件发生时读取所有数据，否则可能会错过后续事件。减少了重复事件通知的次数，但增加了编程的复杂度，通常需要结合非阻塞I/O使用。</span></li></ul><ol list="u99d02062" start="3"><li fid="u882a47ba" data-lake-id="u4007b140" id="u4007b140"><strong><span data-lake-id="u832ba170" id="u832ba170">内存映射</span></strong><span data-lake-id="u901e5a2d" id="u901e5a2d">：epoll通过内存映射（mmap）减少了在内核和用户空间之间的数据复制，进一步提高了性能。</span></li></ol><h3 data-lake-id="zfYsz" id="zfYsz" data-lake-index-type="0"><span data-lake-id="u9ba8dba4" id="u9ba8dba4">select底层原理分析</span></h3><p data-lake-id="uc88e7cf7" id="uc88e7cf7"><span data-lake-id="u5b593e12" id="u5b593e12">select的核心数据结构：文件描述符集合（fd_set），用来管理需要监视的文件描述符。<br />fd_set本质上是一个位图，位图中的每一位对应一个文件描述符的状态。大小为1024位（与FD_SETSIZE定义相关），每一位表示一个文件描述符。位图中的每一位的值为1表示该文件描述符需要监视，为0表示不需要监视。<br />再了解下三种监视类型，分别存储在不同的fd_set中：</span></p><ul list="u3dc2f5c4"><li fid="u316c3e39" data-lake-id="ubaef6e7d" id="ubaef6e7d"><strong><span data-lake-id="ub9104f4c" id="ub9104f4c">可读事件（readfds）</span></strong><span data-lake-id="u89627b12" id="u89627b12">：监视文件描述符是否有数据可读。</span></li><li fid="u316c3e39" data-lake-id="u2cbbce55" id="u2cbbce55"><strong><span data-lake-id="u657c8387" id="u657c8387">可写事件（writefds）</span></strong><span data-lake-id="ube8b6d68" id="ube8b6d68">：监视文件描述符是否可写（即是否可以发送数据）。 </span></li><li fid="u316c3e39" data-lake-id="u4ce695dd" id="u4ce695dd"><strong><span data-lake-id="ube7768e4" id="ube7768e4">异常事件（exceptfds）</span></strong><span data-lake-id="u756ca243" id="u756ca243">：监视文件描述符上是否有异常情况（如带外数据）。</span></li></ul><p data-lake-id="u04f06a53" id="u04f06a53"><span data-lake-id="udb6b0f73" id="udb6b0f73">select的操作流程如下</span></p><ol list="u6c1a61f7"><li fid="ub2d075bd" data-lake-id="ub496a27b" id="ub496a27b"><strong><span data-lake-id="u2e8316c7" id="u2e8316c7">构建fd_set并调用select</span></strong><span data-lake-id="u33cc9dfa" id="u33cc9dfa">：<br />在调用select之前，程序需要根据需要监视的文件描述符和事件类型，将文件描述符添加到readfds、writefds或exceptfds中。</span></li></ol><p data-lake-id="ufab3ccd6" id="ufab3ccd6"><br></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22markdown%22%2C%22code%22%3A%22int%20poll(struct%20pollfd%20*fds%2C%20nfds_t%20nfds%2C%20int%20timeout)%3B%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22customStyle%22%3A%5B%5D%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22D52EW%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><ul list="u902d83e7"><li fid="ufd382a71" data-lake-id="u7fb54f83" id="u7fb54f83"><strong><span data-lake-id="u27b61f0d" id="u27b61f0d">fds</span></strong><span data-lake-id="ub3c15119" id="ub3c15119">：指向pollfd结构体数组的指针。</span></li><li fid="ufd382a71" data-lake-id="uf18f709c" id="uf18f709c"><strong><span data-lake-id="uff24bea8" id="uff24bea8">nfds</span></strong><span data-lake-id="u58621dca" id="u58621dca">：表示数组中元素的数量（即需要监视的文件描述符的数量）。</span></li><li fid="ufd382a71" data-lake-id="uc823185c" id="uc823185c"><strong><span data-lake-id="u9ca65c6e" id="u9ca65c6e">timeout</span></strong><span data-lake-id="u442d9f12" id="u442d9f12">：指定poll等待的超时时间，以毫秒为单位。</span></li></ul><ol list="uca1a55af" start="2"><li fid="uf1c34f67" data-lake-id="ue0a2ec69" id="ue0a2ec69"><strong><span data-lake-id="u98f21856" id="u98f21856">进入内核态进行检查</span></strong><span data-lake-id="u69e475fe" id="u69e475fe">：<br />调用poll后，程序会从用户态切换到内核态。内核会遍历fds数组中的所有文件描述符，检查它们的状态是否与events字段中的感兴趣事件匹配。<br />内核会逐一检查每个文件描述符，判断其当前状态是否有数据可读、可写，或是否发生了错误等。</span></li><li fid="uf1c34f67" data-lake-id="ucf92a409" id="ucf92a409"><strong><span data-lake-id="u1cddef3b" id="u1cddef3b">阻塞等待或超时</span></strong><span data-lake-id="u36c07af6" id="u36c07af6">：<br />如果在遍历过程中，没有找到任何就绪的文件描述符，则poll会根据timeout参数进行阻塞等待。</span></li></ol><ul list="ub2655ac7"><li fid="u53de7e81" data-lake-id="u3aaa8f7a" id="u3aaa8f7a"><strong><span data-lake-id="u9f07882a" id="u9f07882a">阻塞等待</span></strong><span data-lake-id="u5fc6c2d1" id="u5fc6c2d1">：如果timeout为 -1，poll会无限期地等待，直到有文件描述符的状态发生变化。</span></li><li fid="u53de7e81" data-lake-id="ud0071f1e" id="ud0071f1e"><strong><span data-lake-id="u0b991b11" id="u0b991b11">非阻塞调用</span></strong><span data-lake-id="ud48740f5" id="ud48740f5">：如果timeout为0，poll会立即返回，即使没有文件描述符发生状态变化。</span></li></ul><ol list="u52bb0c13" start="4"><li fid="ub5a86e2e" data-lake-id="u22031715" id="u22031715"><strong><span data-lake-id="u4e7d732a" id="u4e7d732a">更新revents字段并返回</span></strong><span data-lake-id="u4298c169" id="u4298c169">：<br />当文件描述符的状态与指定的events匹配时，poll会将实际发生的事件写入revents字段。<br />poll返回时，会返回就绪文件描述符的数量，程序可以遍历fds数组，检查revents字段以确定哪些文件描述符发生了事件。</span></li></ol><h2 data-lake-id="G9tSP" id="G9tSP" data-lake-index-type="0"><span data-lake-id="ue9bb8319" id="ue9bb8319" style="color: rgba(0, 0, 0, 0.88)">为什么网络 I/O 会被阻塞？</span></h2><p data-lake-id="u0a9f6872" id="u0a9f6872"><span data-lake-id="uc582869f" id="uc582869f">网络I/O会被阻塞是因为在进行网络数据传输时，操作系统在等待数据的发送或接收完成之前，会将进程挂起，直到数据传输完成后才恢复进程执行。</span></p><p data-lake-id="ub78f6119" id="ub78f6119"><span data-lake-id="u4c4a95eb" id="u4c4a95eb">阻塞的主要原因是：</span></p><ul list="uc0430649"><li fid="uf5205176" data-lake-id="u025cc200" id="u025cc200"><strong><span data-lake-id="u1aa013b3" id="u1aa013b3">等待数据到达或发送完成</span></strong><span data-lake-id="u307abf19" id="u307abf19">：当进程尝试从网络套接字中读取数据时，如果数据尚未到达，操作系统会使进程进入阻塞状态，直到数据到达为止。同样，当数据未能立即发送出去时，发送操作也可能被阻塞，等待缓冲区有空闲空间。</span></li><li fid="uf5205176" data-lake-id="ue9e24f7d" id="ue9e24f7d"><strong><span data-lake-id="ua0319489" id="ua0319489">系统资源有限</span></strong><span data-lake-id="u40c3a9d6" id="u40c3a9d6">：当系统资源（如网络缓冲区、连接数等）被占满时，进一步的I/O请求可能会被阻塞，等待资源释放后才能继续。 </span></li><li fid="uf5205176" data-lake-id="uaffc9300" id="uaffc9300"><strong><span data-lake-id="ud9c1251f" id="ud9c1251f">默认的阻塞行为</span></strong><span data-lake-id="ufec5b4ae" id="ufec5b4ae">：大多数网络API（如recv、send、accept等）在默认情况下都是阻塞的，即调用这些API时，如果条件不满足，会使调用者等待，直到I/O操作完成。</span></li></ul><p data-lake-id="u1535d8c2" id="u1535d8c2"><span data-lake-id="u02e96088" id="u02e96088">​</span><br></p>